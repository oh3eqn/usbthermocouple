
USB_Thermologger_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009d70  08009d70  00019d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d0  0800a1d0  00020355  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1d0  0800a1d0  00020355  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1d0  0800a1d0  00020355  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d0  0800a1d0  0001a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800a1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000001  20000354  0800a52c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000108c  20000358  0800a52d  00020358  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013e4  0800a52d  000213e4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020355  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd25  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000044ac  00000000  00000000  0003d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000be5d  00000000  00000000  0004154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000f40  00000000  00000000  0004d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001508  00000000  00000000  0004e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000115f6  00000000  00000000  0004f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00012424  00000000  00000000  00060dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00054bc5  00000000  00000000  00073212  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  000c7dd7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000384c  00000000  00000000  000c7e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000358 	.word	0x20000358
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d54 	.word	0x08009d54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000035c 	.word	0x2000035c
 8000104:	08009d54 	.word	0x08009d54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0f 	bl	8001260 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe67 	bl	8001120 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff01 	bl	8001260 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef7 	bl	8001260 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe89 	bl	8001198 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7f 	bl	8001198 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fd0d 	bl	8001edc <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 f9a2 	bl	8001814 <__aeabi_dsub>
 80004d0:	f001 fd04 	bl	8001edc <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_dadd>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	464f      	mov	r7, r9
 80004e8:	4646      	mov	r6, r8
 80004ea:	46d6      	mov	lr, sl
 80004ec:	000c      	movs	r4, r1
 80004ee:	0309      	lsls	r1, r1, #12
 80004f0:	b5c0      	push	{r6, r7, lr}
 80004f2:	0a49      	lsrs	r1, r1, #9
 80004f4:	0f47      	lsrs	r7, r0, #29
 80004f6:	005e      	lsls	r6, r3, #1
 80004f8:	4339      	orrs	r1, r7
 80004fa:	031f      	lsls	r7, r3, #12
 80004fc:	0fdb      	lsrs	r3, r3, #31
 80004fe:	469c      	mov	ip, r3
 8000500:	0065      	lsls	r5, r4, #1
 8000502:	0a7b      	lsrs	r3, r7, #9
 8000504:	0f57      	lsrs	r7, r2, #29
 8000506:	431f      	orrs	r7, r3
 8000508:	0d6d      	lsrs	r5, r5, #21
 800050a:	0fe4      	lsrs	r4, r4, #31
 800050c:	0d76      	lsrs	r6, r6, #21
 800050e:	46a1      	mov	r9, r4
 8000510:	00c0      	lsls	r0, r0, #3
 8000512:	46b8      	mov	r8, r7
 8000514:	00d2      	lsls	r2, r2, #3
 8000516:	1bab      	subs	r3, r5, r6
 8000518:	4564      	cmp	r4, ip
 800051a:	d07b      	beq.n	8000614 <__aeabi_dadd+0x130>
 800051c:	2b00      	cmp	r3, #0
 800051e:	dd5f      	ble.n	80005e0 <__aeabi_dadd+0xfc>
 8000520:	2e00      	cmp	r6, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_dadd+0x42>
 8000524:	e0a4      	b.n	8000670 <__aeabi_dadd+0x18c>
 8000526:	003e      	movs	r6, r7
 8000528:	4316      	orrs	r6, r2
 800052a:	d100      	bne.n	800052e <__aeabi_dadd+0x4a>
 800052c:	e112      	b.n	8000754 <__aeabi_dadd+0x270>
 800052e:	1e5e      	subs	r6, r3, #1
 8000530:	2e00      	cmp	r6, #0
 8000532:	d000      	beq.n	8000536 <__aeabi_dadd+0x52>
 8000534:	e19e      	b.n	8000874 <__aeabi_dadd+0x390>
 8000536:	1a87      	subs	r7, r0, r2
 8000538:	4643      	mov	r3, r8
 800053a:	42b8      	cmp	r0, r7
 800053c:	4180      	sbcs	r0, r0
 800053e:	2501      	movs	r5, #1
 8000540:	1ac9      	subs	r1, r1, r3
 8000542:	4240      	negs	r0, r0
 8000544:	1a09      	subs	r1, r1, r0
 8000546:	020b      	lsls	r3, r1, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0x68>
 800054a:	e131      	b.n	80007b0 <__aeabi_dadd+0x2cc>
 800054c:	0249      	lsls	r1, r1, #9
 800054e:	0a4e      	lsrs	r6, r1, #9
 8000550:	2e00      	cmp	r6, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x72>
 8000554:	e16e      	b.n	8000834 <__aeabi_dadd+0x350>
 8000556:	0030      	movs	r0, r6
 8000558:	f001 fde6 	bl	8002128 <__clzsi2>
 800055c:	0003      	movs	r3, r0
 800055e:	3b08      	subs	r3, #8
 8000560:	2b1f      	cmp	r3, #31
 8000562:	dd00      	ble.n	8000566 <__aeabi_dadd+0x82>
 8000564:	e161      	b.n	800082a <__aeabi_dadd+0x346>
 8000566:	2220      	movs	r2, #32
 8000568:	0039      	movs	r1, r7
 800056a:	1ad2      	subs	r2, r2, r3
 800056c:	409e      	lsls	r6, r3
 800056e:	40d1      	lsrs	r1, r2
 8000570:	409f      	lsls	r7, r3
 8000572:	430e      	orrs	r6, r1
 8000574:	429d      	cmp	r5, r3
 8000576:	dd00      	ble.n	800057a <__aeabi_dadd+0x96>
 8000578:	e151      	b.n	800081e <__aeabi_dadd+0x33a>
 800057a:	1b5d      	subs	r5, r3, r5
 800057c:	1c6b      	adds	r3, r5, #1
 800057e:	2b1f      	cmp	r3, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xa0>
 8000582:	e17c      	b.n	800087e <__aeabi_dadd+0x39a>
 8000584:	2120      	movs	r1, #32
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	003d      	movs	r5, r7
 800058a:	0030      	movs	r0, r6
 800058c:	408f      	lsls	r7, r1
 800058e:	4088      	lsls	r0, r1
 8000590:	40dd      	lsrs	r5, r3
 8000592:	1e79      	subs	r1, r7, #1
 8000594:	418f      	sbcs	r7, r1
 8000596:	0031      	movs	r1, r6
 8000598:	2207      	movs	r2, #7
 800059a:	4328      	orrs	r0, r5
 800059c:	40d9      	lsrs	r1, r3
 800059e:	2500      	movs	r5, #0
 80005a0:	4307      	orrs	r7, r0
 80005a2:	403a      	ands	r2, r7
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d009      	beq.n	80005bc <__aeabi_dadd+0xd8>
 80005a8:	230f      	movs	r3, #15
 80005aa:	403b      	ands	r3, r7
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d005      	beq.n	80005bc <__aeabi_dadd+0xd8>
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	42bb      	cmp	r3, r7
 80005b4:	41bf      	sbcs	r7, r7
 80005b6:	427f      	negs	r7, r7
 80005b8:	19c9      	adds	r1, r1, r7
 80005ba:	001f      	movs	r7, r3
 80005bc:	020b      	lsls	r3, r1, #8
 80005be:	d400      	bmi.n	80005c2 <__aeabi_dadd+0xde>
 80005c0:	e226      	b.n	8000a10 <__aeabi_dadd+0x52c>
 80005c2:	1c6a      	adds	r2, r5, #1
 80005c4:	4bc6      	ldr	r3, [pc, #792]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80005c6:	0555      	lsls	r5, r2, #21
 80005c8:	0d6d      	lsrs	r5, r5, #21
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0xec>
 80005ce:	e106      	b.n	80007de <__aeabi_dadd+0x2fa>
 80005d0:	4ac4      	ldr	r2, [pc, #784]	; (80008e4 <__aeabi_dadd+0x400>)
 80005d2:	08ff      	lsrs	r7, r7, #3
 80005d4:	400a      	ands	r2, r1
 80005d6:	0753      	lsls	r3, r2, #29
 80005d8:	0252      	lsls	r2, r2, #9
 80005da:	433b      	orrs	r3, r7
 80005dc:	0b12      	lsrs	r2, r2, #12
 80005de:	e08e      	b.n	80006fe <__aeabi_dadd+0x21a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d000      	beq.n	80005e6 <__aeabi_dadd+0x102>
 80005e4:	e0b8      	b.n	8000758 <__aeabi_dadd+0x274>
 80005e6:	1c6b      	adds	r3, r5, #1
 80005e8:	055b      	lsls	r3, r3, #21
 80005ea:	0d5b      	lsrs	r3, r3, #21
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	dc00      	bgt.n	80005f2 <__aeabi_dadd+0x10e>
 80005f0:	e130      	b.n	8000854 <__aeabi_dadd+0x370>
 80005f2:	1a87      	subs	r7, r0, r2
 80005f4:	4643      	mov	r3, r8
 80005f6:	42b8      	cmp	r0, r7
 80005f8:	41b6      	sbcs	r6, r6
 80005fa:	1acb      	subs	r3, r1, r3
 80005fc:	4276      	negs	r6, r6
 80005fe:	1b9e      	subs	r6, r3, r6
 8000600:	0233      	lsls	r3, r6, #8
 8000602:	d500      	bpl.n	8000606 <__aeabi_dadd+0x122>
 8000604:	e14c      	b.n	80008a0 <__aeabi_dadd+0x3bc>
 8000606:	003b      	movs	r3, r7
 8000608:	4333      	orrs	r3, r6
 800060a:	d1a1      	bne.n	8000550 <__aeabi_dadd+0x6c>
 800060c:	2200      	movs	r2, #0
 800060e:	2400      	movs	r4, #0
 8000610:	2500      	movs	r5, #0
 8000612:	e070      	b.n	80006f6 <__aeabi_dadd+0x212>
 8000614:	2b00      	cmp	r3, #0
 8000616:	dc00      	bgt.n	800061a <__aeabi_dadd+0x136>
 8000618:	e0e5      	b.n	80007e6 <__aeabi_dadd+0x302>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x13c>
 800061e:	e083      	b.n	8000728 <__aeabi_dadd+0x244>
 8000620:	4eaf      	ldr	r6, [pc, #700]	; (80008e0 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d060      	beq.n	80006e8 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dc00      	bgt.n	8000634 <__aeabi_dadd+0x150>
 8000632:	e13e      	b.n	80008b2 <__aeabi_dadd+0x3ce>
 8000634:	4643      	mov	r3, r8
 8000636:	4313      	orrs	r3, r2
 8000638:	001f      	movs	r7, r3
 800063a:	1e7a      	subs	r2, r7, #1
 800063c:	4197      	sbcs	r7, r2
 800063e:	183f      	adds	r7, r7, r0
 8000640:	4287      	cmp	r7, r0
 8000642:	4180      	sbcs	r0, r0
 8000644:	4240      	negs	r0, r0
 8000646:	1809      	adds	r1, r1, r0
 8000648:	020b      	lsls	r3, r1, #8
 800064a:	d400      	bmi.n	800064e <__aeabi_dadd+0x16a>
 800064c:	e0b0      	b.n	80007b0 <__aeabi_dadd+0x2cc>
 800064e:	4ba4      	ldr	r3, [pc, #656]	; (80008e0 <__aeabi_dadd+0x3fc>)
 8000650:	3501      	adds	r5, #1
 8000652:	429d      	cmp	r5, r3
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x174>
 8000656:	e0c3      	b.n	80007e0 <__aeabi_dadd+0x2fc>
 8000658:	4aa2      	ldr	r2, [pc, #648]	; (80008e4 <__aeabi_dadd+0x400>)
 800065a:	087b      	lsrs	r3, r7, #1
 800065c:	400a      	ands	r2, r1
 800065e:	2101      	movs	r1, #1
 8000660:	400f      	ands	r7, r1
 8000662:	431f      	orrs	r7, r3
 8000664:	0851      	lsrs	r1, r2, #1
 8000666:	07d3      	lsls	r3, r2, #31
 8000668:	2207      	movs	r2, #7
 800066a:	431f      	orrs	r7, r3
 800066c:	403a      	ands	r2, r7
 800066e:	e799      	b.n	80005a4 <__aeabi_dadd+0xc0>
 8000670:	4e9b      	ldr	r6, [pc, #620]	; (80008e0 <__aeabi_dadd+0x3fc>)
 8000672:	42b5      	cmp	r5, r6
 8000674:	d038      	beq.n	80006e8 <__aeabi_dadd+0x204>
 8000676:	2680      	movs	r6, #128	; 0x80
 8000678:	0436      	lsls	r6, r6, #16
 800067a:	4337      	orrs	r7, r6
 800067c:	46b8      	mov	r8, r7
 800067e:	2b38      	cmp	r3, #56	; 0x38
 8000680:	dd00      	ble.n	8000684 <__aeabi_dadd+0x1a0>
 8000682:	e0dc      	b.n	800083e <__aeabi_dadd+0x35a>
 8000684:	2b1f      	cmp	r3, #31
 8000686:	dc00      	bgt.n	800068a <__aeabi_dadd+0x1a6>
 8000688:	e130      	b.n	80008ec <__aeabi_dadd+0x408>
 800068a:	001e      	movs	r6, r3
 800068c:	4647      	mov	r7, r8
 800068e:	3e20      	subs	r6, #32
 8000690:	40f7      	lsrs	r7, r6
 8000692:	46bc      	mov	ip, r7
 8000694:	2b20      	cmp	r3, #32
 8000696:	d004      	beq.n	80006a2 <__aeabi_dadd+0x1be>
 8000698:	2640      	movs	r6, #64	; 0x40
 800069a:	1af3      	subs	r3, r6, r3
 800069c:	4646      	mov	r6, r8
 800069e:	409e      	lsls	r6, r3
 80006a0:	4332      	orrs	r2, r6
 80006a2:	0017      	movs	r7, r2
 80006a4:	4663      	mov	r3, ip
 80006a6:	1e7a      	subs	r2, r7, #1
 80006a8:	4197      	sbcs	r7, r2
 80006aa:	431f      	orrs	r7, r3
 80006ac:	e0cc      	b.n	8000848 <__aeabi_dadd+0x364>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x1d0>
 80006b2:	e204      	b.n	8000abe <__aeabi_dadd+0x5da>
 80006b4:	4643      	mov	r3, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x1d8>
 80006ba:	e159      	b.n	8000970 <__aeabi_dadd+0x48c>
 80006bc:	074b      	lsls	r3, r1, #29
 80006be:	08c0      	lsrs	r0, r0, #3
 80006c0:	4318      	orrs	r0, r3
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	08c9      	lsrs	r1, r1, #3
 80006c6:	031b      	lsls	r3, r3, #12
 80006c8:	4219      	tst	r1, r3
 80006ca:	d008      	beq.n	80006de <__aeabi_dadd+0x1fa>
 80006cc:	4645      	mov	r5, r8
 80006ce:	08ed      	lsrs	r5, r5, #3
 80006d0:	421d      	tst	r5, r3
 80006d2:	d104      	bne.n	80006de <__aeabi_dadd+0x1fa>
 80006d4:	4643      	mov	r3, r8
 80006d6:	08d0      	lsrs	r0, r2, #3
 80006d8:	0759      	lsls	r1, r3, #29
 80006da:	4308      	orrs	r0, r1
 80006dc:	0029      	movs	r1, r5
 80006de:	0f42      	lsrs	r2, r0, #29
 80006e0:	00c9      	lsls	r1, r1, #3
 80006e2:	4d7f      	ldr	r5, [pc, #508]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80006e4:	4311      	orrs	r1, r2
 80006e6:	00c0      	lsls	r0, r0, #3
 80006e8:	074b      	lsls	r3, r1, #29
 80006ea:	08ca      	lsrs	r2, r1, #3
 80006ec:	497c      	ldr	r1, [pc, #496]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80006ee:	08c0      	lsrs	r0, r0, #3
 80006f0:	4303      	orrs	r3, r0
 80006f2:	428d      	cmp	r5, r1
 80006f4:	d068      	beq.n	80007c8 <__aeabi_dadd+0x2e4>
 80006f6:	0312      	lsls	r2, r2, #12
 80006f8:	056d      	lsls	r5, r5, #21
 80006fa:	0b12      	lsrs	r2, r2, #12
 80006fc:	0d6d      	lsrs	r5, r5, #21
 80006fe:	2100      	movs	r1, #0
 8000700:	0312      	lsls	r2, r2, #12
 8000702:	0018      	movs	r0, r3
 8000704:	0b13      	lsrs	r3, r2, #12
 8000706:	0d0a      	lsrs	r2, r1, #20
 8000708:	0512      	lsls	r2, r2, #20
 800070a:	431a      	orrs	r2, r3
 800070c:	4b76      	ldr	r3, [pc, #472]	; (80008e8 <__aeabi_dadd+0x404>)
 800070e:	052d      	lsls	r5, r5, #20
 8000710:	4013      	ands	r3, r2
 8000712:	432b      	orrs	r3, r5
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	07e4      	lsls	r4, r4, #31
 8000718:	085b      	lsrs	r3, r3, #1
 800071a:	4323      	orrs	r3, r4
 800071c:	0019      	movs	r1, r3
 800071e:	bc1c      	pop	{r2, r3, r4}
 8000720:	4690      	mov	r8, r2
 8000722:	4699      	mov	r9, r3
 8000724:	46a2      	mov	sl, r4
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000728:	003e      	movs	r6, r7
 800072a:	4316      	orrs	r6, r2
 800072c:	d012      	beq.n	8000754 <__aeabi_dadd+0x270>
 800072e:	1e5e      	subs	r6, r3, #1
 8000730:	2e00      	cmp	r6, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_dadd+0x252>
 8000734:	e100      	b.n	8000938 <__aeabi_dadd+0x454>
 8000736:	1887      	adds	r7, r0, r2
 8000738:	4287      	cmp	r7, r0
 800073a:	4180      	sbcs	r0, r0
 800073c:	4441      	add	r1, r8
 800073e:	4240      	negs	r0, r0
 8000740:	1809      	adds	r1, r1, r0
 8000742:	2501      	movs	r5, #1
 8000744:	020b      	lsls	r3, r1, #8
 8000746:	d533      	bpl.n	80007b0 <__aeabi_dadd+0x2cc>
 8000748:	2502      	movs	r5, #2
 800074a:	e785      	b.n	8000658 <__aeabi_dadd+0x174>
 800074c:	4664      	mov	r4, ip
 800074e:	0033      	movs	r3, r6
 8000750:	4641      	mov	r1, r8
 8000752:	0010      	movs	r0, r2
 8000754:	001d      	movs	r5, r3
 8000756:	e7c7      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d000      	beq.n	800075e <__aeabi_dadd+0x27a>
 800075c:	e0da      	b.n	8000914 <__aeabi_dadd+0x430>
 800075e:	000c      	movs	r4, r1
 8000760:	4304      	orrs	r4, r0
 8000762:	d0f3      	beq.n	800074c <__aeabi_dadd+0x268>
 8000764:	1c5c      	adds	r4, r3, #1
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0x286>
 8000768:	e19f      	b.n	8000aaa <__aeabi_dadd+0x5c6>
 800076a:	4c5d      	ldr	r4, [pc, #372]	; (80008e0 <__aeabi_dadd+0x3fc>)
 800076c:	42a6      	cmp	r6, r4
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x28e>
 8000770:	e12f      	b.n	80009d2 <__aeabi_dadd+0x4ee>
 8000772:	43db      	mvns	r3, r3
 8000774:	2b38      	cmp	r3, #56	; 0x38
 8000776:	dd00      	ble.n	800077a <__aeabi_dadd+0x296>
 8000778:	e166      	b.n	8000a48 <__aeabi_dadd+0x564>
 800077a:	2b1f      	cmp	r3, #31
 800077c:	dd00      	ble.n	8000780 <__aeabi_dadd+0x29c>
 800077e:	e183      	b.n	8000a88 <__aeabi_dadd+0x5a4>
 8000780:	2420      	movs	r4, #32
 8000782:	0005      	movs	r5, r0
 8000784:	1ae4      	subs	r4, r4, r3
 8000786:	000f      	movs	r7, r1
 8000788:	40dd      	lsrs	r5, r3
 800078a:	40d9      	lsrs	r1, r3
 800078c:	40a0      	lsls	r0, r4
 800078e:	4643      	mov	r3, r8
 8000790:	40a7      	lsls	r7, r4
 8000792:	1a5b      	subs	r3, r3, r1
 8000794:	1e44      	subs	r4, r0, #1
 8000796:	41a0      	sbcs	r0, r4
 8000798:	4698      	mov	r8, r3
 800079a:	432f      	orrs	r7, r5
 800079c:	4338      	orrs	r0, r7
 800079e:	1a17      	subs	r7, r2, r0
 80007a0:	42ba      	cmp	r2, r7
 80007a2:	4192      	sbcs	r2, r2
 80007a4:	4643      	mov	r3, r8
 80007a6:	4252      	negs	r2, r2
 80007a8:	1a99      	subs	r1, r3, r2
 80007aa:	4664      	mov	r4, ip
 80007ac:	0035      	movs	r5, r6
 80007ae:	e6ca      	b.n	8000546 <__aeabi_dadd+0x62>
 80007b0:	2207      	movs	r2, #7
 80007b2:	403a      	ands	r2, r7
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_dadd+0x2d6>
 80007b8:	e6f6      	b.n	80005a8 <__aeabi_dadd+0xc4>
 80007ba:	074b      	lsls	r3, r1, #29
 80007bc:	08ca      	lsrs	r2, r1, #3
 80007be:	4948      	ldr	r1, [pc, #288]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80007c0:	08ff      	lsrs	r7, r7, #3
 80007c2:	433b      	orrs	r3, r7
 80007c4:	428d      	cmp	r5, r1
 80007c6:	d196      	bne.n	80006f6 <__aeabi_dadd+0x212>
 80007c8:	0019      	movs	r1, r3
 80007ca:	4311      	orrs	r1, r2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x2ec>
 80007ce:	e19e      	b.n	8000b0e <__aeabi_dadd+0x62a>
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0309      	lsls	r1, r1, #12
 80007d4:	430a      	orrs	r2, r1
 80007d6:	0312      	lsls	r2, r2, #12
 80007d8:	0b12      	lsrs	r2, r2, #12
 80007da:	4d41      	ldr	r5, [pc, #260]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80007dc:	e78f      	b.n	80006fe <__aeabi_dadd+0x21a>
 80007de:	0015      	movs	r5, r2
 80007e0:	2200      	movs	r2, #0
 80007e2:	2300      	movs	r3, #0
 80007e4:	e78b      	b.n	80006fe <__aeabi_dadd+0x21a>
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x308>
 80007ea:	e0c7      	b.n	800097c <__aeabi_dadd+0x498>
 80007ec:	1c6b      	adds	r3, r5, #1
 80007ee:	055f      	lsls	r7, r3, #21
 80007f0:	0d7f      	lsrs	r7, r7, #21
 80007f2:	2f01      	cmp	r7, #1
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x314>
 80007f6:	e0f1      	b.n	80009dc <__aeabi_dadd+0x4f8>
 80007f8:	4d39      	ldr	r5, [pc, #228]	; (80008e0 <__aeabi_dadd+0x3fc>)
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x31c>
 80007fe:	e0b9      	b.n	8000974 <__aeabi_dadd+0x490>
 8000800:	1885      	adds	r5, r0, r2
 8000802:	000a      	movs	r2, r1
 8000804:	4285      	cmp	r5, r0
 8000806:	4189      	sbcs	r1, r1
 8000808:	4442      	add	r2, r8
 800080a:	4249      	negs	r1, r1
 800080c:	1851      	adds	r1, r2, r1
 800080e:	2207      	movs	r2, #7
 8000810:	07cf      	lsls	r7, r1, #31
 8000812:	086d      	lsrs	r5, r5, #1
 8000814:	432f      	orrs	r7, r5
 8000816:	0849      	lsrs	r1, r1, #1
 8000818:	403a      	ands	r2, r7
 800081a:	001d      	movs	r5, r3
 800081c:	e6c2      	b.n	80005a4 <__aeabi_dadd+0xc0>
 800081e:	2207      	movs	r2, #7
 8000820:	4930      	ldr	r1, [pc, #192]	; (80008e4 <__aeabi_dadd+0x400>)
 8000822:	1aed      	subs	r5, r5, r3
 8000824:	4031      	ands	r1, r6
 8000826:	403a      	ands	r2, r7
 8000828:	e6bc      	b.n	80005a4 <__aeabi_dadd+0xc0>
 800082a:	003e      	movs	r6, r7
 800082c:	3828      	subs	r0, #40	; 0x28
 800082e:	4086      	lsls	r6, r0
 8000830:	2700      	movs	r7, #0
 8000832:	e69f      	b.n	8000574 <__aeabi_dadd+0x90>
 8000834:	0038      	movs	r0, r7
 8000836:	f001 fc77 	bl	8002128 <__clzsi2>
 800083a:	3020      	adds	r0, #32
 800083c:	e68e      	b.n	800055c <__aeabi_dadd+0x78>
 800083e:	4643      	mov	r3, r8
 8000840:	4313      	orrs	r3, r2
 8000842:	001f      	movs	r7, r3
 8000844:	1e7a      	subs	r2, r7, #1
 8000846:	4197      	sbcs	r7, r2
 8000848:	1bc7      	subs	r7, r0, r7
 800084a:	42b8      	cmp	r0, r7
 800084c:	4180      	sbcs	r0, r0
 800084e:	4240      	negs	r0, r0
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	e678      	b.n	8000546 <__aeabi_dadd+0x62>
 8000854:	000e      	movs	r6, r1
 8000856:	003b      	movs	r3, r7
 8000858:	4306      	orrs	r6, r0
 800085a:	4313      	orrs	r3, r2
 800085c:	2d00      	cmp	r5, #0
 800085e:	d161      	bne.n	8000924 <__aeabi_dadd+0x440>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x382>
 8000864:	e0f4      	b.n	8000a50 <__aeabi_dadd+0x56c>
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x388>
 800086a:	e11b      	b.n	8000aa4 <__aeabi_dadd+0x5c0>
 800086c:	4664      	mov	r4, ip
 800086e:	0039      	movs	r1, r7
 8000870:	0010      	movs	r0, r2
 8000872:	e739      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000874:	4f1a      	ldr	r7, [pc, #104]	; (80008e0 <__aeabi_dadd+0x3fc>)
 8000876:	42bb      	cmp	r3, r7
 8000878:	d07a      	beq.n	8000970 <__aeabi_dadd+0x48c>
 800087a:	0033      	movs	r3, r6
 800087c:	e6ff      	b.n	800067e <__aeabi_dadd+0x19a>
 800087e:	0030      	movs	r0, r6
 8000880:	3d1f      	subs	r5, #31
 8000882:	40e8      	lsrs	r0, r5
 8000884:	2b20      	cmp	r3, #32
 8000886:	d003      	beq.n	8000890 <__aeabi_dadd+0x3ac>
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	409e      	lsls	r6, r3
 800088e:	4337      	orrs	r7, r6
 8000890:	1e7b      	subs	r3, r7, #1
 8000892:	419f      	sbcs	r7, r3
 8000894:	2207      	movs	r2, #7
 8000896:	4307      	orrs	r7, r0
 8000898:	403a      	ands	r2, r7
 800089a:	2100      	movs	r1, #0
 800089c:	2500      	movs	r5, #0
 800089e:	e789      	b.n	80007b4 <__aeabi_dadd+0x2d0>
 80008a0:	1a17      	subs	r7, r2, r0
 80008a2:	4643      	mov	r3, r8
 80008a4:	42ba      	cmp	r2, r7
 80008a6:	41b6      	sbcs	r6, r6
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	4276      	negs	r6, r6
 80008ac:	1b8e      	subs	r6, r1, r6
 80008ae:	4664      	mov	r4, ip
 80008b0:	e64e      	b.n	8000550 <__aeabi_dadd+0x6c>
 80008b2:	2b1f      	cmp	r3, #31
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dadd+0x3d4>
 80008b6:	e0ad      	b.n	8000a14 <__aeabi_dadd+0x530>
 80008b8:	2620      	movs	r6, #32
 80008ba:	4647      	mov	r7, r8
 80008bc:	1af6      	subs	r6, r6, r3
 80008be:	40b7      	lsls	r7, r6
 80008c0:	46b9      	mov	r9, r7
 80008c2:	0017      	movs	r7, r2
 80008c4:	46b2      	mov	sl, r6
 80008c6:	40df      	lsrs	r7, r3
 80008c8:	464e      	mov	r6, r9
 80008ca:	433e      	orrs	r6, r7
 80008cc:	0037      	movs	r7, r6
 80008ce:	4656      	mov	r6, sl
 80008d0:	40b2      	lsls	r2, r6
 80008d2:	1e56      	subs	r6, r2, #1
 80008d4:	41b2      	sbcs	r2, r6
 80008d6:	4317      	orrs	r7, r2
 80008d8:	4642      	mov	r2, r8
 80008da:	40da      	lsrs	r2, r3
 80008dc:	1889      	adds	r1, r1, r2
 80008de:	e6ae      	b.n	800063e <__aeabi_dadd+0x15a>
 80008e0:	000007ff 	.word	0x000007ff
 80008e4:	ff7fffff 	.word	0xff7fffff
 80008e8:	800fffff 	.word	0x800fffff
 80008ec:	2620      	movs	r6, #32
 80008ee:	4647      	mov	r7, r8
 80008f0:	1af6      	subs	r6, r6, r3
 80008f2:	40b7      	lsls	r7, r6
 80008f4:	46b9      	mov	r9, r7
 80008f6:	0017      	movs	r7, r2
 80008f8:	46b2      	mov	sl, r6
 80008fa:	40df      	lsrs	r7, r3
 80008fc:	464e      	mov	r6, r9
 80008fe:	433e      	orrs	r6, r7
 8000900:	0037      	movs	r7, r6
 8000902:	4656      	mov	r6, sl
 8000904:	40b2      	lsls	r2, r6
 8000906:	1e56      	subs	r6, r2, #1
 8000908:	41b2      	sbcs	r2, r6
 800090a:	4317      	orrs	r7, r2
 800090c:	4642      	mov	r2, r8
 800090e:	40da      	lsrs	r2, r3
 8000910:	1a89      	subs	r1, r1, r2
 8000912:	e799      	b.n	8000848 <__aeabi_dadd+0x364>
 8000914:	4c7f      	ldr	r4, [pc, #508]	; (8000b14 <__aeabi_dadd+0x630>)
 8000916:	42a6      	cmp	r6, r4
 8000918:	d05b      	beq.n	80009d2 <__aeabi_dadd+0x4ee>
 800091a:	2480      	movs	r4, #128	; 0x80
 800091c:	0424      	lsls	r4, r4, #16
 800091e:	425b      	negs	r3, r3
 8000920:	4321      	orrs	r1, r4
 8000922:	e727      	b.n	8000774 <__aeabi_dadd+0x290>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d10c      	bne.n	8000942 <__aeabi_dadd+0x45e>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x44a>
 800092c:	e0cb      	b.n	8000ac6 <__aeabi_dadd+0x5e2>
 800092e:	4664      	mov	r4, ip
 8000930:	0039      	movs	r1, r7
 8000932:	0010      	movs	r0, r2
 8000934:	4d77      	ldr	r5, [pc, #476]	; (8000b14 <__aeabi_dadd+0x630>)
 8000936:	e6d7      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000938:	4f76      	ldr	r7, [pc, #472]	; (8000b14 <__aeabi_dadd+0x630>)
 800093a:	42bb      	cmp	r3, r7
 800093c:	d018      	beq.n	8000970 <__aeabi_dadd+0x48c>
 800093e:	0033      	movs	r3, r6
 8000940:	e675      	b.n	800062e <__aeabi_dadd+0x14a>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d014      	beq.n	8000970 <__aeabi_dadd+0x48c>
 8000946:	074b      	lsls	r3, r1, #29
 8000948:	08c0      	lsrs	r0, r0, #3
 800094a:	4318      	orrs	r0, r3
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	08c9      	lsrs	r1, r1, #3
 8000950:	031b      	lsls	r3, r3, #12
 8000952:	4219      	tst	r1, r3
 8000954:	d007      	beq.n	8000966 <__aeabi_dadd+0x482>
 8000956:	08fc      	lsrs	r4, r7, #3
 8000958:	421c      	tst	r4, r3
 800095a:	d104      	bne.n	8000966 <__aeabi_dadd+0x482>
 800095c:	0779      	lsls	r1, r7, #29
 800095e:	08d0      	lsrs	r0, r2, #3
 8000960:	4308      	orrs	r0, r1
 8000962:	46e1      	mov	r9, ip
 8000964:	0021      	movs	r1, r4
 8000966:	464c      	mov	r4, r9
 8000968:	0f42      	lsrs	r2, r0, #29
 800096a:	00c9      	lsls	r1, r1, #3
 800096c:	4311      	orrs	r1, r2
 800096e:	00c0      	lsls	r0, r0, #3
 8000970:	4d68      	ldr	r5, [pc, #416]	; (8000b14 <__aeabi_dadd+0x630>)
 8000972:	e6b9      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000974:	001d      	movs	r5, r3
 8000976:	2200      	movs	r2, #0
 8000978:	2300      	movs	r3, #0
 800097a:	e6c0      	b.n	80006fe <__aeabi_dadd+0x21a>
 800097c:	2d00      	cmp	r5, #0
 800097e:	d15b      	bne.n	8000a38 <__aeabi_dadd+0x554>
 8000980:	000d      	movs	r5, r1
 8000982:	4305      	orrs	r5, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x4a4>
 8000986:	e6e2      	b.n	800074e <__aeabi_dadd+0x26a>
 8000988:	1c5d      	adds	r5, r3, #1
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x4aa>
 800098c:	e0b0      	b.n	8000af0 <__aeabi_dadd+0x60c>
 800098e:	4d61      	ldr	r5, [pc, #388]	; (8000b14 <__aeabi_dadd+0x630>)
 8000990:	42ae      	cmp	r6, r5
 8000992:	d01f      	beq.n	80009d4 <__aeabi_dadd+0x4f0>
 8000994:	43db      	mvns	r3, r3
 8000996:	2b38      	cmp	r3, #56	; 0x38
 8000998:	dc71      	bgt.n	8000a7e <__aeabi_dadd+0x59a>
 800099a:	2b1f      	cmp	r3, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x4bc>
 800099e:	e096      	b.n	8000ace <__aeabi_dadd+0x5ea>
 80009a0:	2520      	movs	r5, #32
 80009a2:	000f      	movs	r7, r1
 80009a4:	1aed      	subs	r5, r5, r3
 80009a6:	40af      	lsls	r7, r5
 80009a8:	46b9      	mov	r9, r7
 80009aa:	0007      	movs	r7, r0
 80009ac:	46aa      	mov	sl, r5
 80009ae:	40df      	lsrs	r7, r3
 80009b0:	464d      	mov	r5, r9
 80009b2:	433d      	orrs	r5, r7
 80009b4:	002f      	movs	r7, r5
 80009b6:	4655      	mov	r5, sl
 80009b8:	40a8      	lsls	r0, r5
 80009ba:	40d9      	lsrs	r1, r3
 80009bc:	1e45      	subs	r5, r0, #1
 80009be:	41a8      	sbcs	r0, r5
 80009c0:	4488      	add	r8, r1
 80009c2:	4307      	orrs	r7, r0
 80009c4:	18bf      	adds	r7, r7, r2
 80009c6:	4297      	cmp	r7, r2
 80009c8:	4192      	sbcs	r2, r2
 80009ca:	4251      	negs	r1, r2
 80009cc:	4441      	add	r1, r8
 80009ce:	0035      	movs	r5, r6
 80009d0:	e63a      	b.n	8000648 <__aeabi_dadd+0x164>
 80009d2:	4664      	mov	r4, ip
 80009d4:	0035      	movs	r5, r6
 80009d6:	4641      	mov	r1, r8
 80009d8:	0010      	movs	r0, r2
 80009da:	e685      	b.n	80006e8 <__aeabi_dadd+0x204>
 80009dc:	000b      	movs	r3, r1
 80009de:	4303      	orrs	r3, r0
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x502>
 80009e4:	e663      	b.n	80006ae <__aeabi_dadd+0x1ca>
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f5      	beq.n	80009d6 <__aeabi_dadd+0x4f2>
 80009ea:	4643      	mov	r3, r8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x50e>
 80009f0:	e67a      	b.n	80006e8 <__aeabi_dadd+0x204>
 80009f2:	1887      	adds	r7, r0, r2
 80009f4:	4287      	cmp	r7, r0
 80009f6:	4180      	sbcs	r0, r0
 80009f8:	2207      	movs	r2, #7
 80009fa:	4441      	add	r1, r8
 80009fc:	4240      	negs	r0, r0
 80009fe:	1809      	adds	r1, r1, r0
 8000a00:	403a      	ands	r2, r7
 8000a02:	020b      	lsls	r3, r1, #8
 8000a04:	d400      	bmi.n	8000a08 <__aeabi_dadd+0x524>
 8000a06:	e6d5      	b.n	80007b4 <__aeabi_dadd+0x2d0>
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <__aeabi_dadd+0x634>)
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	4019      	ands	r1, r3
 8000a0e:	e5c9      	b.n	80005a4 <__aeabi_dadd+0xc0>
 8000a10:	0038      	movs	r0, r7
 8000a12:	e669      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000a14:	001e      	movs	r6, r3
 8000a16:	4647      	mov	r7, r8
 8000a18:	3e20      	subs	r6, #32
 8000a1a:	40f7      	lsrs	r7, r6
 8000a1c:	46bc      	mov	ip, r7
 8000a1e:	2b20      	cmp	r3, #32
 8000a20:	d004      	beq.n	8000a2c <__aeabi_dadd+0x548>
 8000a22:	2640      	movs	r6, #64	; 0x40
 8000a24:	1af3      	subs	r3, r6, r3
 8000a26:	4646      	mov	r6, r8
 8000a28:	409e      	lsls	r6, r3
 8000a2a:	4332      	orrs	r2, r6
 8000a2c:	0017      	movs	r7, r2
 8000a2e:	4663      	mov	r3, ip
 8000a30:	1e7a      	subs	r2, r7, #1
 8000a32:	4197      	sbcs	r7, r2
 8000a34:	431f      	orrs	r7, r3
 8000a36:	e602      	b.n	800063e <__aeabi_dadd+0x15a>
 8000a38:	4d36      	ldr	r5, [pc, #216]	; (8000b14 <__aeabi_dadd+0x630>)
 8000a3a:	42ae      	cmp	r6, r5
 8000a3c:	d0ca      	beq.n	80009d4 <__aeabi_dadd+0x4f0>
 8000a3e:	2580      	movs	r5, #128	; 0x80
 8000a40:	042d      	lsls	r5, r5, #16
 8000a42:	425b      	negs	r3, r3
 8000a44:	4329      	orrs	r1, r5
 8000a46:	e7a6      	b.n	8000996 <__aeabi_dadd+0x4b2>
 8000a48:	4308      	orrs	r0, r1
 8000a4a:	1e41      	subs	r1, r0, #1
 8000a4c:	4188      	sbcs	r0, r1
 8000a4e:	e6a6      	b.n	800079e <__aeabi_dadd+0x2ba>
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x572>
 8000a54:	e648      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000a56:	1a87      	subs	r7, r0, r2
 8000a58:	4643      	mov	r3, r8
 8000a5a:	42b8      	cmp	r0, r7
 8000a5c:	41b6      	sbcs	r6, r6
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	4276      	negs	r6, r6
 8000a62:	1b9e      	subs	r6, r3, r6
 8000a64:	0233      	lsls	r3, r6, #8
 8000a66:	d54b      	bpl.n	8000b00 <__aeabi_dadd+0x61c>
 8000a68:	1a17      	subs	r7, r2, r0
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	42ba      	cmp	r2, r7
 8000a6e:	4192      	sbcs	r2, r2
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	4252      	negs	r2, r2
 8000a74:	1a89      	subs	r1, r1, r2
 8000a76:	2207      	movs	r2, #7
 8000a78:	4664      	mov	r4, ip
 8000a7a:	403a      	ands	r2, r7
 8000a7c:	e592      	b.n	80005a4 <__aeabi_dadd+0xc0>
 8000a7e:	4301      	orrs	r1, r0
 8000a80:	000f      	movs	r7, r1
 8000a82:	1e79      	subs	r1, r7, #1
 8000a84:	418f      	sbcs	r7, r1
 8000a86:	e79d      	b.n	80009c4 <__aeabi_dadd+0x4e0>
 8000a88:	001c      	movs	r4, r3
 8000a8a:	000f      	movs	r7, r1
 8000a8c:	3c20      	subs	r4, #32
 8000a8e:	40e7      	lsrs	r7, r4
 8000a90:	2b20      	cmp	r3, #32
 8000a92:	d003      	beq.n	8000a9c <__aeabi_dadd+0x5b8>
 8000a94:	2440      	movs	r4, #64	; 0x40
 8000a96:	1ae3      	subs	r3, r4, r3
 8000a98:	4099      	lsls	r1, r3
 8000a9a:	4308      	orrs	r0, r1
 8000a9c:	1e41      	subs	r1, r0, #1
 8000a9e:	4188      	sbcs	r0, r1
 8000aa0:	4338      	orrs	r0, r7
 8000aa2:	e67c      	b.n	800079e <__aeabi_dadd+0x2ba>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	e625      	b.n	80006f6 <__aeabi_dadd+0x212>
 8000aaa:	1a17      	subs	r7, r2, r0
 8000aac:	4643      	mov	r3, r8
 8000aae:	42ba      	cmp	r2, r7
 8000ab0:	4192      	sbcs	r2, r2
 8000ab2:	1a59      	subs	r1, r3, r1
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	1a89      	subs	r1, r1, r2
 8000ab8:	4664      	mov	r4, ip
 8000aba:	0035      	movs	r5, r6
 8000abc:	e543      	b.n	8000546 <__aeabi_dadd+0x62>
 8000abe:	4641      	mov	r1, r8
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	4d14      	ldr	r5, [pc, #80]	; (8000b14 <__aeabi_dadd+0x630>)
 8000ac4:	e610      	b.n	80006e8 <__aeabi_dadd+0x204>
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	2400      	movs	r4, #0
 8000aca:	0312      	lsls	r2, r2, #12
 8000acc:	e680      	b.n	80007d0 <__aeabi_dadd+0x2ec>
 8000ace:	001d      	movs	r5, r3
 8000ad0:	000f      	movs	r7, r1
 8000ad2:	3d20      	subs	r5, #32
 8000ad4:	40ef      	lsrs	r7, r5
 8000ad6:	46bc      	mov	ip, r7
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dadd+0x600>
 8000adc:	2540      	movs	r5, #64	; 0x40
 8000ade:	1aeb      	subs	r3, r5, r3
 8000ae0:	4099      	lsls	r1, r3
 8000ae2:	4308      	orrs	r0, r1
 8000ae4:	0007      	movs	r7, r0
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	1e78      	subs	r0, r7, #1
 8000aea:	4187      	sbcs	r7, r0
 8000aec:	431f      	orrs	r7, r3
 8000aee:	e769      	b.n	80009c4 <__aeabi_dadd+0x4e0>
 8000af0:	1887      	adds	r7, r0, r2
 8000af2:	4297      	cmp	r7, r2
 8000af4:	419b      	sbcs	r3, r3
 8000af6:	4441      	add	r1, r8
 8000af8:	425b      	negs	r3, r3
 8000afa:	18c9      	adds	r1, r1, r3
 8000afc:	0035      	movs	r5, r6
 8000afe:	e5a3      	b.n	8000648 <__aeabi_dadd+0x164>
 8000b00:	003b      	movs	r3, r7
 8000b02:	4333      	orrs	r3, r6
 8000b04:	d0ce      	beq.n	8000aa4 <__aeabi_dadd+0x5c0>
 8000b06:	2207      	movs	r2, #7
 8000b08:	0031      	movs	r1, r6
 8000b0a:	403a      	ands	r2, r7
 8000b0c:	e652      	b.n	80007b4 <__aeabi_dadd+0x2d0>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	001a      	movs	r2, r3
 8000b12:	e5f4      	b.n	80006fe <__aeabi_dadd+0x21a>
 8000b14:	000007ff 	.word	0x000007ff
 8000b18:	ff7fffff 	.word	0xff7fffff

08000b1c <__aeabi_ddiv>:
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	4657      	mov	r7, sl
 8000b20:	46de      	mov	lr, fp
 8000b22:	464e      	mov	r6, r9
 8000b24:	4645      	mov	r5, r8
 8000b26:	b5e0      	push	{r5, r6, r7, lr}
 8000b28:	4683      	mov	fp, r0
 8000b2a:	0007      	movs	r7, r0
 8000b2c:	030e      	lsls	r6, r1, #12
 8000b2e:	0048      	lsls	r0, r1, #1
 8000b30:	b085      	sub	sp, #20
 8000b32:	4692      	mov	sl, r2
 8000b34:	001c      	movs	r4, r3
 8000b36:	0b36      	lsrs	r6, r6, #12
 8000b38:	0d40      	lsrs	r0, r0, #21
 8000b3a:	0fcd      	lsrs	r5, r1, #31
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x26>
 8000b40:	e09d      	b.n	8000c7e <__aeabi_ddiv+0x162>
 8000b42:	4b95      	ldr	r3, [pc, #596]	; (8000d98 <__aeabi_ddiv+0x27c>)
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d039      	beq.n	8000bbc <__aeabi_ddiv+0xa0>
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	00f6      	lsls	r6, r6, #3
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	431e      	orrs	r6, r3
 8000b50:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <__aeabi_ddiv+0x280>)
 8000b52:	0f7b      	lsrs	r3, r7, #29
 8000b54:	4333      	orrs	r3, r6
 8000b56:	4699      	mov	r9, r3
 8000b58:	4694      	mov	ip, r2
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	4463      	add	r3, ip
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	2600      	movs	r6, #0
 8000b64:	00ff      	lsls	r7, r7, #3
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	0323      	lsls	r3, r4, #12
 8000b6a:	0b1b      	lsrs	r3, r3, #12
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0063      	lsls	r3, r4, #1
 8000b70:	0fe4      	lsrs	r4, r4, #31
 8000b72:	4652      	mov	r2, sl
 8000b74:	0d5b      	lsrs	r3, r3, #21
 8000b76:	9401      	str	r4, [sp, #4]
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x60>
 8000b7a:	e0b3      	b.n	8000ce4 <__aeabi_ddiv+0x1c8>
 8000b7c:	4986      	ldr	r1, [pc, #536]	; (8000d98 <__aeabi_ddiv+0x27c>)
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x68>
 8000b82:	e09e      	b.n	8000cc2 <__aeabi_ddiv+0x1a6>
 8000b84:	4642      	mov	r2, r8
 8000b86:	00d1      	lsls	r1, r2, #3
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0412      	lsls	r2, r2, #16
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	4651      	mov	r1, sl
 8000b90:	0f49      	lsrs	r1, r1, #29
 8000b92:	4311      	orrs	r1, r2
 8000b94:	468b      	mov	fp, r1
 8000b96:	4981      	ldr	r1, [pc, #516]	; (8000d9c <__aeabi_ddiv+0x280>)
 8000b98:	4652      	mov	r2, sl
 8000b9a:	468c      	mov	ip, r1
 8000b9c:	9900      	ldr	r1, [sp, #0]
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	002b      	movs	r3, r5
 8000baa:	4063      	eors	r3, r4
 8000bac:	469a      	mov	sl, r3
 8000bae:	2e0f      	cmp	r6, #15
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x98>
 8000bb2:	e105      	b.n	8000dc0 <__aeabi_ddiv+0x2a4>
 8000bb4:	4b7a      	ldr	r3, [pc, #488]	; (8000da0 <__aeabi_ddiv+0x284>)
 8000bb6:	00b6      	lsls	r6, r6, #2
 8000bb8:	599b      	ldr	r3, [r3, r6]
 8000bba:	469f      	mov	pc, r3
 8000bbc:	465b      	mov	r3, fp
 8000bbe:	4333      	orrs	r3, r6
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_ddiv+0xaa>
 8000bc4:	e0b8      	b.n	8000d38 <__aeabi_ddiv+0x21c>
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	2608      	movs	r6, #8
 8000bca:	2700      	movs	r7, #0
 8000bcc:	9000      	str	r0, [sp, #0]
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	e7ca      	b.n	8000b68 <__aeabi_ddiv+0x4c>
 8000bd2:	46cb      	mov	fp, r9
 8000bd4:	003a      	movs	r2, r7
 8000bd6:	9902      	ldr	r1, [sp, #8]
 8000bd8:	9501      	str	r5, [sp, #4]
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	469a      	mov	sl, r3
 8000bde:	2902      	cmp	r1, #2
 8000be0:	d027      	beq.n	8000c32 <__aeabi_ddiv+0x116>
 8000be2:	2903      	cmp	r1, #3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0xcc>
 8000be6:	e280      	b.n	80010ea <__aeabi_ddiv+0x5ce>
 8000be8:	2901      	cmp	r1, #1
 8000bea:	d044      	beq.n	8000c76 <__aeabi_ddiv+0x15a>
 8000bec:	496d      	ldr	r1, [pc, #436]	; (8000da4 <__aeabi_ddiv+0x288>)
 8000bee:	9b00      	ldr	r3, [sp, #0]
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4463      	add	r3, ip
 8000bf4:	001c      	movs	r4, r3
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	dd38      	ble.n	8000c6c <__aeabi_ddiv+0x150>
 8000bfa:	0753      	lsls	r3, r2, #29
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_ddiv+0xe4>
 8000bfe:	e213      	b.n	8001028 <__aeabi_ddiv+0x50c>
 8000c00:	08d2      	lsrs	r2, r2, #3
 8000c02:	465b      	mov	r3, fp
 8000c04:	01db      	lsls	r3, r3, #7
 8000c06:	d509      	bpl.n	8000c1c <__aeabi_ddiv+0x100>
 8000c08:	4659      	mov	r1, fp
 8000c0a:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <__aeabi_ddiv+0x28c>)
 8000c0c:	4019      	ands	r1, r3
 8000c0e:	468b      	mov	fp, r1
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	00c9      	lsls	r1, r1, #3
 8000c14:	468c      	mov	ip, r1
 8000c16:	9b00      	ldr	r3, [sp, #0]
 8000c18:	4463      	add	r3, ip
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	4b63      	ldr	r3, [pc, #396]	; (8000dac <__aeabi_ddiv+0x290>)
 8000c1e:	429c      	cmp	r4, r3
 8000c20:	dc07      	bgt.n	8000c32 <__aeabi_ddiv+0x116>
 8000c22:	465b      	mov	r3, fp
 8000c24:	0564      	lsls	r4, r4, #21
 8000c26:	075f      	lsls	r7, r3, #29
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	4317      	orrs	r7, r2
 8000c2c:	0b1b      	lsrs	r3, r3, #12
 8000c2e:	0d62      	lsrs	r2, r4, #21
 8000c30:	e002      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 8000c32:	2300      	movs	r3, #0
 8000c34:	2700      	movs	r7, #0
 8000c36:	4a58      	ldr	r2, [pc, #352]	; (8000d98 <__aeabi_ddiv+0x27c>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	031b      	lsls	r3, r3, #12
 8000c3c:	0b1c      	lsrs	r4, r3, #12
 8000c3e:	0d0b      	lsrs	r3, r1, #20
 8000c40:	051b      	lsls	r3, r3, #20
 8000c42:	4323      	orrs	r3, r4
 8000c44:	0514      	lsls	r4, r2, #20
 8000c46:	4a5a      	ldr	r2, [pc, #360]	; (8000db0 <__aeabi_ddiv+0x294>)
 8000c48:	0038      	movs	r0, r7
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	4653      	mov	r3, sl
 8000c50:	0064      	lsls	r4, r4, #1
 8000c52:	07db      	lsls	r3, r3, #31
 8000c54:	0864      	lsrs	r4, r4, #1
 8000c56:	431c      	orrs	r4, r3
 8000c58:	0021      	movs	r1, r4
 8000c5a:	b005      	add	sp, #20
 8000c5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	46ab      	mov	fp, r5
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	1b1b      	subs	r3, r3, r4
 8000c70:	2b38      	cmp	r3, #56	; 0x38
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_ddiv+0x15a>
 8000c74:	e1ad      	b.n	8000fd2 <__aeabi_ddiv+0x4b6>
 8000c76:	2200      	movs	r2, #0
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2700      	movs	r7, #0
 8000c7c:	e7dc      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 8000c7e:	465b      	mov	r3, fp
 8000c80:	4333      	orrs	r3, r6
 8000c82:	4699      	mov	r9, r3
 8000c84:	d05e      	beq.n	8000d44 <__aeabi_ddiv+0x228>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_ddiv+0x170>
 8000c8a:	e18a      	b.n	8000fa2 <__aeabi_ddiv+0x486>
 8000c8c:	0030      	movs	r0, r6
 8000c8e:	f001 fa4b 	bl	8002128 <__clzsi2>
 8000c92:	0003      	movs	r3, r0
 8000c94:	3b0b      	subs	r3, #11
 8000c96:	2b1c      	cmp	r3, #28
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_ddiv+0x180>
 8000c9a:	e17b      	b.n	8000f94 <__aeabi_ddiv+0x478>
 8000c9c:	221d      	movs	r2, #29
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	465a      	mov	r2, fp
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	40da      	lsrs	r2, r3
 8000ca6:	3908      	subs	r1, #8
 8000ca8:	408e      	lsls	r6, r1
 8000caa:	0013      	movs	r3, r2
 8000cac:	465f      	mov	r7, fp
 8000cae:	4333      	orrs	r3, r6
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	408f      	lsls	r7, r1
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <__aeabi_ddiv+0x298>)
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	1a1b      	subs	r3, r3, r0
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9302      	str	r3, [sp, #8]
 8000cc0:	e752      	b.n	8000b68 <__aeabi_ddiv+0x4c>
 8000cc2:	4641      	mov	r1, r8
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	493b      	ldr	r1, [pc, #236]	; (8000db8 <__aeabi_ddiv+0x29c>)
 8000cca:	469b      	mov	fp, r3
 8000ccc:	468c      	mov	ip, r1
 8000cce:	9b00      	ldr	r3, [sp, #0]
 8000cd0:	4463      	add	r3, ip
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	465b      	mov	r3, fp
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d13b      	bne.n	8000d52 <__aeabi_ddiv+0x236>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	431e      	orrs	r6, r3
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	e761      	b.n	8000ba8 <__aeabi_ddiv+0x8c>
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	469b      	mov	fp, r3
 8000cea:	d037      	beq.n	8000d5c <__aeabi_ddiv+0x240>
 8000cec:	4643      	mov	r3, r8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x1d8>
 8000cf2:	e162      	b.n	8000fba <__aeabi_ddiv+0x49e>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	f001 fa17 	bl	8002128 <__clzsi2>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	3b0b      	subs	r3, #11
 8000cfe:	2b1c      	cmp	r3, #28
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_ddiv+0x1e8>
 8000d02:	e153      	b.n	8000fac <__aeabi_ddiv+0x490>
 8000d04:	0002      	movs	r2, r0
 8000d06:	4641      	mov	r1, r8
 8000d08:	3a08      	subs	r2, #8
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	4688      	mov	r8, r1
 8000d0e:	211d      	movs	r1, #29
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	4651      	mov	r1, sl
 8000d14:	40d9      	lsrs	r1, r3
 8000d16:	000b      	movs	r3, r1
 8000d18:	4641      	mov	r1, r8
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	469b      	mov	fp, r3
 8000d1e:	4653      	mov	r3, sl
 8000d20:	4093      	lsls	r3, r2
 8000d22:	001a      	movs	r2, r3
 8000d24:	9b00      	ldr	r3, [sp, #0]
 8000d26:	4925      	ldr	r1, [pc, #148]	; (8000dbc <__aeabi_ddiv+0x2a0>)
 8000d28:	469c      	mov	ip, r3
 8000d2a:	4460      	add	r0, ip
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	468c      	mov	ip, r1
 8000d30:	4463      	add	r3, ip
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e737      	b.n	8000ba8 <__aeabi_ddiv+0x8c>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	46b1      	mov	r9, r6
 8000d3c:	9000      	str	r0, [sp, #0]
 8000d3e:	260c      	movs	r6, #12
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	e711      	b.n	8000b68 <__aeabi_ddiv+0x4c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	2604      	movs	r6, #4
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	e70a      	b.n	8000b68 <__aeabi_ddiv+0x4c>
 8000d52:	2303      	movs	r3, #3
 8000d54:	46c3      	mov	fp, r8
 8000d56:	431e      	orrs	r6, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	e725      	b.n	8000ba8 <__aeabi_ddiv+0x8c>
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	431e      	orrs	r6, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	e720      	b.n	8000ba8 <__aeabi_ddiv+0x8c>
 8000d66:	2300      	movs	r3, #0
 8000d68:	469a      	mov	sl, r3
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	031b      	lsls	r3, r3, #12
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <__aeabi_ddiv+0x27c>)
 8000d72:	e761      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	4649      	mov	r1, r9
 8000d78:	031b      	lsls	r3, r3, #12
 8000d7a:	4219      	tst	r1, r3
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x264>
 8000d7e:	e0e2      	b.n	8000f46 <__aeabi_ddiv+0x42a>
 8000d80:	4659      	mov	r1, fp
 8000d82:	4219      	tst	r1, r3
 8000d84:	d000      	beq.n	8000d88 <__aeabi_ddiv+0x26c>
 8000d86:	e0de      	b.n	8000f46 <__aeabi_ddiv+0x42a>
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	031b      	lsls	r3, r3, #12
 8000d8c:	0017      	movs	r7, r2
 8000d8e:	0b1b      	lsrs	r3, r3, #12
 8000d90:	46a2      	mov	sl, r4
 8000d92:	4a01      	ldr	r2, [pc, #4]	; (8000d98 <__aeabi_ddiv+0x27c>)
 8000d94:	e750      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	000007ff 	.word	0x000007ff
 8000d9c:	fffffc01 	.word	0xfffffc01
 8000da0:	08009d90 	.word	0x08009d90
 8000da4:	000003ff 	.word	0x000003ff
 8000da8:	feffffff 	.word	0xfeffffff
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	800fffff 	.word	0x800fffff
 8000db4:	fffffc0d 	.word	0xfffffc0d
 8000db8:	fffff801 	.word	0xfffff801
 8000dbc:	000003f3 	.word	0x000003f3
 8000dc0:	45d9      	cmp	r9, fp
 8000dc2:	d900      	bls.n	8000dc6 <__aeabi_ddiv+0x2aa>
 8000dc4:	e0cb      	b.n	8000f5e <__aeabi_ddiv+0x442>
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2ae>
 8000dc8:	e0c6      	b.n	8000f58 <__aeabi_ddiv+0x43c>
 8000dca:	003c      	movs	r4, r7
 8000dcc:	4648      	mov	r0, r9
 8000dce:	2700      	movs	r7, #0
 8000dd0:	9b00      	ldr	r3, [sp, #0]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0e16      	lsrs	r6, r2, #24
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	0213      	lsls	r3, r2, #8
 8000de0:	4698      	mov	r8, r3
 8000de2:	0433      	lsls	r3, r6, #16
 8000de4:	0c1b      	lsrs	r3, r3, #16
 8000de6:	4699      	mov	r9, r3
 8000de8:	0c31      	lsrs	r1, r6, #16
 8000dea:	9101      	str	r1, [sp, #4]
 8000dec:	f7ff fa2e 	bl	800024c <__aeabi_uidivmod>
 8000df0:	464a      	mov	r2, r9
 8000df2:	4342      	muls	r2, r0
 8000df4:	040b      	lsls	r3, r1, #16
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	0005      	movs	r5, r0
 8000dfa:	4319      	orrs	r1, r3
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d907      	bls.n	8000e10 <__aeabi_ddiv+0x2f4>
 8000e00:	1989      	adds	r1, r1, r6
 8000e02:	3d01      	subs	r5, #1
 8000e04:	428e      	cmp	r6, r1
 8000e06:	d803      	bhi.n	8000e10 <__aeabi_ddiv+0x2f4>
 8000e08:	428a      	cmp	r2, r1
 8000e0a:	d901      	bls.n	8000e10 <__aeabi_ddiv+0x2f4>
 8000e0c:	1e85      	subs	r5, r0, #2
 8000e0e:	1989      	adds	r1, r1, r6
 8000e10:	1a88      	subs	r0, r1, r2
 8000e12:	9901      	ldr	r1, [sp, #4]
 8000e14:	f7ff fa1a 	bl	800024c <__aeabi_uidivmod>
 8000e18:	0409      	lsls	r1, r1, #16
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	464a      	mov	r2, r9
 8000e1e:	0421      	lsls	r1, r4, #16
 8000e20:	4664      	mov	r4, ip
 8000e22:	4342      	muls	r2, r0
 8000e24:	0c09      	lsrs	r1, r1, #16
 8000e26:	0003      	movs	r3, r0
 8000e28:	4321      	orrs	r1, r4
 8000e2a:	428a      	cmp	r2, r1
 8000e2c:	d904      	bls.n	8000e38 <__aeabi_ddiv+0x31c>
 8000e2e:	1989      	adds	r1, r1, r6
 8000e30:	3b01      	subs	r3, #1
 8000e32:	428e      	cmp	r6, r1
 8000e34:	d800      	bhi.n	8000e38 <__aeabi_ddiv+0x31c>
 8000e36:	e0f1      	b.n	800101c <__aeabi_ddiv+0x500>
 8000e38:	042d      	lsls	r5, r5, #16
 8000e3a:	431d      	orrs	r5, r3
 8000e3c:	46ab      	mov	fp, r5
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a89      	subs	r1, r1, r2
 8000e42:	4642      	mov	r2, r8
 8000e44:	0c28      	lsrs	r0, r5, #16
 8000e46:	0412      	lsls	r2, r2, #16
 8000e48:	0c1d      	lsrs	r5, r3, #16
 8000e4a:	465b      	mov	r3, fp
 8000e4c:	0c14      	lsrs	r4, r2, #16
 8000e4e:	0022      	movs	r2, r4
 8000e50:	041b      	lsls	r3, r3, #16
 8000e52:	0c1b      	lsrs	r3, r3, #16
 8000e54:	435a      	muls	r2, r3
 8000e56:	9403      	str	r4, [sp, #12]
 8000e58:	436b      	muls	r3, r5
 8000e5a:	4344      	muls	r4, r0
 8000e5c:	9502      	str	r5, [sp, #8]
 8000e5e:	4368      	muls	r0, r5
 8000e60:	191b      	adds	r3, r3, r4
 8000e62:	0c15      	lsrs	r5, r2, #16
 8000e64:	18eb      	adds	r3, r5, r3
 8000e66:	429c      	cmp	r4, r3
 8000e68:	d903      	bls.n	8000e72 <__aeabi_ddiv+0x356>
 8000e6a:	2480      	movs	r4, #128	; 0x80
 8000e6c:	0264      	lsls	r4, r4, #9
 8000e6e:	46a4      	mov	ip, r4
 8000e70:	4460      	add	r0, ip
 8000e72:	0c1c      	lsrs	r4, r3, #16
 8000e74:	0415      	lsls	r5, r2, #16
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c2d      	lsrs	r5, r5, #16
 8000e7a:	1820      	adds	r0, r4, r0
 8000e7c:	195d      	adds	r5, r3, r5
 8000e7e:	4281      	cmp	r1, r0
 8000e80:	d377      	bcc.n	8000f72 <__aeabi_ddiv+0x456>
 8000e82:	d073      	beq.n	8000f6c <__aeabi_ddiv+0x450>
 8000e84:	1a0c      	subs	r4, r1, r0
 8000e86:	4aa2      	ldr	r2, [pc, #648]	; (8001110 <__aeabi_ddiv+0x5f4>)
 8000e88:	1b7d      	subs	r5, r7, r5
 8000e8a:	42af      	cmp	r7, r5
 8000e8c:	41bf      	sbcs	r7, r7
 8000e8e:	4694      	mov	ip, r2
 8000e90:	9b00      	ldr	r3, [sp, #0]
 8000e92:	427f      	negs	r7, r7
 8000e94:	4463      	add	r3, ip
 8000e96:	1be0      	subs	r0, r4, r7
 8000e98:	001c      	movs	r4, r3
 8000e9a:	4286      	cmp	r6, r0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x384>
 8000e9e:	e0db      	b.n	8001058 <__aeabi_ddiv+0x53c>
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	f7ff f9d3 	bl	800024c <__aeabi_uidivmod>
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	4342      	muls	r2, r0
 8000eaa:	040b      	lsls	r3, r1, #16
 8000eac:	0c29      	lsrs	r1, r5, #16
 8000eae:	0007      	movs	r7, r0
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d907      	bls.n	8000ec6 <__aeabi_ddiv+0x3aa>
 8000eb6:	1989      	adds	r1, r1, r6
 8000eb8:	3f01      	subs	r7, #1
 8000eba:	428e      	cmp	r6, r1
 8000ebc:	d803      	bhi.n	8000ec6 <__aeabi_ddiv+0x3aa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	d901      	bls.n	8000ec6 <__aeabi_ddiv+0x3aa>
 8000ec2:	1e87      	subs	r7, r0, #2
 8000ec4:	1989      	adds	r1, r1, r6
 8000ec6:	1a88      	subs	r0, r1, r2
 8000ec8:	9901      	ldr	r1, [sp, #4]
 8000eca:	f7ff f9bf 	bl	800024c <__aeabi_uidivmod>
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	4689      	mov	r9, r1
 8000ed4:	0429      	lsls	r1, r5, #16
 8000ed6:	464d      	mov	r5, r9
 8000ed8:	4342      	muls	r2, r0
 8000eda:	0c09      	lsrs	r1, r1, #16
 8000edc:	0003      	movs	r3, r0
 8000ede:	4329      	orrs	r1, r5
 8000ee0:	428a      	cmp	r2, r1
 8000ee2:	d907      	bls.n	8000ef4 <__aeabi_ddiv+0x3d8>
 8000ee4:	1989      	adds	r1, r1, r6
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	428e      	cmp	r6, r1
 8000eea:	d803      	bhi.n	8000ef4 <__aeabi_ddiv+0x3d8>
 8000eec:	428a      	cmp	r2, r1
 8000eee:	d901      	bls.n	8000ef4 <__aeabi_ddiv+0x3d8>
 8000ef0:	1e83      	subs	r3, r0, #2
 8000ef2:	1989      	adds	r1, r1, r6
 8000ef4:	043f      	lsls	r7, r7, #16
 8000ef6:	1a89      	subs	r1, r1, r2
 8000ef8:	003a      	movs	r2, r7
 8000efa:	9f03      	ldr	r7, [sp, #12]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	0038      	movs	r0, r7
 8000f00:	0413      	lsls	r3, r2, #16
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	4358      	muls	r0, r3
 8000f06:	4681      	mov	r9, r0
 8000f08:	9802      	ldr	r0, [sp, #8]
 8000f0a:	0c15      	lsrs	r5, r2, #16
 8000f0c:	436f      	muls	r7, r5
 8000f0e:	4343      	muls	r3, r0
 8000f10:	4345      	muls	r5, r0
 8000f12:	4648      	mov	r0, r9
 8000f14:	0c00      	lsrs	r0, r0, #16
 8000f16:	4684      	mov	ip, r0
 8000f18:	19db      	adds	r3, r3, r7
 8000f1a:	4463      	add	r3, ip
 8000f1c:	429f      	cmp	r7, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_ddiv+0x40c>
 8000f20:	2080      	movs	r0, #128	; 0x80
 8000f22:	0240      	lsls	r0, r0, #9
 8000f24:	4684      	mov	ip, r0
 8000f26:	4465      	add	r5, ip
 8000f28:	4648      	mov	r0, r9
 8000f2a:	0c1f      	lsrs	r7, r3, #16
 8000f2c:	0400      	lsls	r0, r0, #16
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	0c00      	lsrs	r0, r0, #16
 8000f32:	197d      	adds	r5, r7, r5
 8000f34:	1818      	adds	r0, r3, r0
 8000f36:	42a9      	cmp	r1, r5
 8000f38:	d200      	bcs.n	8000f3c <__aeabi_ddiv+0x420>
 8000f3a:	e084      	b.n	8001046 <__aeabi_ddiv+0x52a>
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_ddiv+0x424>
 8000f3e:	e07f      	b.n	8001040 <__aeabi_ddiv+0x524>
 8000f40:	2301      	movs	r3, #1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	e657      	b.n	8000bf6 <__aeabi_ddiv+0xda>
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	464a      	mov	r2, r9
 8000f4a:	031b      	lsls	r3, r3, #12
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	031b      	lsls	r3, r3, #12
 8000f50:	0b1b      	lsrs	r3, r3, #12
 8000f52:	46aa      	mov	sl, r5
 8000f54:	4a6f      	ldr	r2, [pc, #444]	; (8001114 <__aeabi_ddiv+0x5f8>)
 8000f56:	e66f      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 8000f58:	42ba      	cmp	r2, r7
 8000f5a:	d900      	bls.n	8000f5e <__aeabi_ddiv+0x442>
 8000f5c:	e735      	b.n	8000dca <__aeabi_ddiv+0x2ae>
 8000f5e:	464b      	mov	r3, r9
 8000f60:	07dc      	lsls	r4, r3, #31
 8000f62:	0858      	lsrs	r0, r3, #1
 8000f64:	087b      	lsrs	r3, r7, #1
 8000f66:	431c      	orrs	r4, r3
 8000f68:	07ff      	lsls	r7, r7, #31
 8000f6a:	e734      	b.n	8000dd6 <__aeabi_ddiv+0x2ba>
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	42af      	cmp	r7, r5
 8000f70:	d289      	bcs.n	8000e86 <__aeabi_ddiv+0x36a>
 8000f72:	4447      	add	r7, r8
 8000f74:	4547      	cmp	r7, r8
 8000f76:	41a4      	sbcs	r4, r4
 8000f78:	465b      	mov	r3, fp
 8000f7a:	4264      	negs	r4, r4
 8000f7c:	19a4      	adds	r4, r4, r6
 8000f7e:	1864      	adds	r4, r4, r1
 8000f80:	3b01      	subs	r3, #1
 8000f82:	42a6      	cmp	r6, r4
 8000f84:	d21e      	bcs.n	8000fc4 <__aeabi_ddiv+0x4a8>
 8000f86:	42a0      	cmp	r0, r4
 8000f88:	d86d      	bhi.n	8001066 <__aeabi_ddiv+0x54a>
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x472>
 8000f8c:	e0b6      	b.n	80010fc <__aeabi_ddiv+0x5e0>
 8000f8e:	1a24      	subs	r4, r4, r0
 8000f90:	469b      	mov	fp, r3
 8000f92:	e778      	b.n	8000e86 <__aeabi_ddiv+0x36a>
 8000f94:	0003      	movs	r3, r0
 8000f96:	465a      	mov	r2, fp
 8000f98:	3b28      	subs	r3, #40	; 0x28
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	2700      	movs	r7, #0
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	e688      	b.n	8000cb4 <__aeabi_ddiv+0x198>
 8000fa2:	4658      	mov	r0, fp
 8000fa4:	f001 f8c0 	bl	8002128 <__clzsi2>
 8000fa8:	3020      	adds	r0, #32
 8000faa:	e672      	b.n	8000c92 <__aeabi_ddiv+0x176>
 8000fac:	0003      	movs	r3, r0
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3b28      	subs	r3, #40	; 0x28
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	4693      	mov	fp, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	e6b4      	b.n	8000d24 <__aeabi_ddiv+0x208>
 8000fba:	4650      	mov	r0, sl
 8000fbc:	f001 f8b4 	bl	8002128 <__clzsi2>
 8000fc0:	3020      	adds	r0, #32
 8000fc2:	e69a      	b.n	8000cfa <__aeabi_ddiv+0x1de>
 8000fc4:	42a6      	cmp	r6, r4
 8000fc6:	d1e2      	bne.n	8000f8e <__aeabi_ddiv+0x472>
 8000fc8:	45b8      	cmp	r8, r7
 8000fca:	d9dc      	bls.n	8000f86 <__aeabi_ddiv+0x46a>
 8000fcc:	1a34      	subs	r4, r6, r0
 8000fce:	469b      	mov	fp, r3
 8000fd0:	e759      	b.n	8000e86 <__aeabi_ddiv+0x36a>
 8000fd2:	2b1f      	cmp	r3, #31
 8000fd4:	dc65      	bgt.n	80010a2 <__aeabi_ddiv+0x586>
 8000fd6:	4c50      	ldr	r4, [pc, #320]	; (8001118 <__aeabi_ddiv+0x5fc>)
 8000fd8:	9900      	ldr	r1, [sp, #0]
 8000fda:	46a4      	mov	ip, r4
 8000fdc:	465c      	mov	r4, fp
 8000fde:	4461      	add	r1, ip
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	408c      	lsls	r4, r1
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	4082      	lsls	r2, r0
 8000fe8:	40d9      	lsrs	r1, r3
 8000fea:	1e50      	subs	r0, r2, #1
 8000fec:	4182      	sbcs	r2, r0
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	4314      	orrs	r4, r2
 8000ff2:	465a      	mov	r2, fp
 8000ff4:	40da      	lsrs	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	0762      	lsls	r2, r4, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_ddiv+0x4f4>
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	4022      	ands	r2, r4
 8001000:	2a04      	cmp	r2, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_ddiv+0x4f4>
 8001004:	0022      	movs	r2, r4
 8001006:	1d14      	adds	r4, r2, #4
 8001008:	4294      	cmp	r4, r2
 800100a:	4189      	sbcs	r1, r1
 800100c:	4249      	negs	r1, r1
 800100e:	185b      	adds	r3, r3, r1
 8001010:	021a      	lsls	r2, r3, #8
 8001012:	d562      	bpl.n	80010da <__aeabi_ddiv+0x5be>
 8001014:	2201      	movs	r2, #1
 8001016:	2300      	movs	r3, #0
 8001018:	2700      	movs	r7, #0
 800101a:	e60d      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 800101c:	428a      	cmp	r2, r1
 800101e:	d800      	bhi.n	8001022 <__aeabi_ddiv+0x506>
 8001020:	e70a      	b.n	8000e38 <__aeabi_ddiv+0x31c>
 8001022:	1e83      	subs	r3, r0, #2
 8001024:	1989      	adds	r1, r1, r6
 8001026:	e707      	b.n	8000e38 <__aeabi_ddiv+0x31c>
 8001028:	230f      	movs	r3, #15
 800102a:	4013      	ands	r3, r2
 800102c:	2b04      	cmp	r3, #4
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x516>
 8001030:	e5e6      	b.n	8000c00 <__aeabi_ddiv+0xe4>
 8001032:	1d17      	adds	r7, r2, #4
 8001034:	4297      	cmp	r7, r2
 8001036:	4192      	sbcs	r2, r2
 8001038:	4253      	negs	r3, r2
 800103a:	449b      	add	fp, r3
 800103c:	08fa      	lsrs	r2, r7, #3
 800103e:	e5e0      	b.n	8000c02 <__aeabi_ddiv+0xe6>
 8001040:	2800      	cmp	r0, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x52a>
 8001044:	e5d7      	b.n	8000bf6 <__aeabi_ddiv+0xda>
 8001046:	1871      	adds	r1, r6, r1
 8001048:	1e53      	subs	r3, r2, #1
 800104a:	42b1      	cmp	r1, r6
 800104c:	d327      	bcc.n	800109e <__aeabi_ddiv+0x582>
 800104e:	42a9      	cmp	r1, r5
 8001050:	d315      	bcc.n	800107e <__aeabi_ddiv+0x562>
 8001052:	d058      	beq.n	8001106 <__aeabi_ddiv+0x5ea>
 8001054:	001a      	movs	r2, r3
 8001056:	e773      	b.n	8000f40 <__aeabi_ddiv+0x424>
 8001058:	2b00      	cmp	r3, #0
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x542>
 800105c:	e604      	b.n	8000c68 <__aeabi_ddiv+0x14c>
 800105e:	2301      	movs	r3, #1
 8001060:	2200      	movs	r2, #0
 8001062:	449b      	add	fp, r3
 8001064:	e5cd      	b.n	8000c02 <__aeabi_ddiv+0xe6>
 8001066:	2302      	movs	r3, #2
 8001068:	4447      	add	r7, r8
 800106a:	4547      	cmp	r7, r8
 800106c:	4189      	sbcs	r1, r1
 800106e:	425b      	negs	r3, r3
 8001070:	469c      	mov	ip, r3
 8001072:	4249      	negs	r1, r1
 8001074:	1989      	adds	r1, r1, r6
 8001076:	190c      	adds	r4, r1, r4
 8001078:	44e3      	add	fp, ip
 800107a:	1a24      	subs	r4, r4, r0
 800107c:	e703      	b.n	8000e86 <__aeabi_ddiv+0x36a>
 800107e:	4643      	mov	r3, r8
 8001080:	005f      	lsls	r7, r3, #1
 8001082:	4547      	cmp	r7, r8
 8001084:	419b      	sbcs	r3, r3
 8001086:	46b8      	mov	r8, r7
 8001088:	425b      	negs	r3, r3
 800108a:	199e      	adds	r6, r3, r6
 800108c:	3a02      	subs	r2, #2
 800108e:	1989      	adds	r1, r1, r6
 8001090:	42a9      	cmp	r1, r5
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x57a>
 8001094:	e754      	b.n	8000f40 <__aeabi_ddiv+0x424>
 8001096:	4540      	cmp	r0, r8
 8001098:	d000      	beq.n	800109c <__aeabi_ddiv+0x580>
 800109a:	e751      	b.n	8000f40 <__aeabi_ddiv+0x424>
 800109c:	e5ab      	b.n	8000bf6 <__aeabi_ddiv+0xda>
 800109e:	001a      	movs	r2, r3
 80010a0:	e7f6      	b.n	8001090 <__aeabi_ddiv+0x574>
 80010a2:	211f      	movs	r1, #31
 80010a4:	465f      	mov	r7, fp
 80010a6:	4249      	negs	r1, r1
 80010a8:	1b0c      	subs	r4, r1, r4
 80010aa:	40e7      	lsrs	r7, r4
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d007      	beq.n	80010c0 <__aeabi_ddiv+0x5a4>
 80010b0:	491a      	ldr	r1, [pc, #104]	; (800111c <__aeabi_ddiv+0x600>)
 80010b2:	9b00      	ldr	r3, [sp, #0]
 80010b4:	468c      	mov	ip, r1
 80010b6:	4463      	add	r3, ip
 80010b8:	0018      	movs	r0, r3
 80010ba:	465b      	mov	r3, fp
 80010bc:	4083      	lsls	r3, r0
 80010be:	431a      	orrs	r2, r3
 80010c0:	1e50      	subs	r0, r2, #1
 80010c2:	4182      	sbcs	r2, r0
 80010c4:	433a      	orrs	r2, r7
 80010c6:	2707      	movs	r7, #7
 80010c8:	2300      	movs	r3, #0
 80010ca:	4017      	ands	r7, r2
 80010cc:	d009      	beq.n	80010e2 <__aeabi_ddiv+0x5c6>
 80010ce:	210f      	movs	r1, #15
 80010d0:	2300      	movs	r3, #0
 80010d2:	4011      	ands	r1, r2
 80010d4:	0014      	movs	r4, r2
 80010d6:	2904      	cmp	r1, #4
 80010d8:	d195      	bne.n	8001006 <__aeabi_ddiv+0x4ea>
 80010da:	0022      	movs	r2, r4
 80010dc:	075f      	lsls	r7, r3, #29
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	0b1b      	lsrs	r3, r3, #12
 80010e2:	08d2      	lsrs	r2, r2, #3
 80010e4:	4317      	orrs	r7, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	e5a6      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4659      	mov	r1, fp
 80010ee:	031b      	lsls	r3, r3, #12
 80010f0:	430b      	orrs	r3, r1
 80010f2:	031b      	lsls	r3, r3, #12
 80010f4:	0017      	movs	r7, r2
 80010f6:	0b1b      	lsrs	r3, r3, #12
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <__aeabi_ddiv+0x5f8>)
 80010fa:	e59d      	b.n	8000c38 <__aeabi_ddiv+0x11c>
 80010fc:	42bd      	cmp	r5, r7
 80010fe:	d8b2      	bhi.n	8001066 <__aeabi_ddiv+0x54a>
 8001100:	469b      	mov	fp, r3
 8001102:	2400      	movs	r4, #0
 8001104:	e6bf      	b.n	8000e86 <__aeabi_ddiv+0x36a>
 8001106:	4580      	cmp	r8, r0
 8001108:	d3b9      	bcc.n	800107e <__aeabi_ddiv+0x562>
 800110a:	001a      	movs	r2, r3
 800110c:	e7c3      	b.n	8001096 <__aeabi_ddiv+0x57a>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	000003ff 	.word	0x000003ff
 8001114:	000007ff 	.word	0x000007ff
 8001118:	0000041e 	.word	0x0000041e
 800111c:	0000043e 	.word	0x0000043e

08001120 <__eqdf2>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	464f      	mov	r7, r9
 8001124:	4646      	mov	r6, r8
 8001126:	46d6      	mov	lr, sl
 8001128:	4684      	mov	ip, r0
 800112a:	b5c0      	push	{r6, r7, lr}
 800112c:	4680      	mov	r8, r0
 800112e:	4e19      	ldr	r6, [pc, #100]	; (8001194 <__eqdf2+0x74>)
 8001130:	0318      	lsls	r0, r3, #12
 8001132:	030f      	lsls	r7, r1, #12
 8001134:	004d      	lsls	r5, r1, #1
 8001136:	0b00      	lsrs	r0, r0, #12
 8001138:	005c      	lsls	r4, r3, #1
 800113a:	4682      	mov	sl, r0
 800113c:	0b3f      	lsrs	r7, r7, #12
 800113e:	0d6d      	lsrs	r5, r5, #21
 8001140:	0fc9      	lsrs	r1, r1, #31
 8001142:	4691      	mov	r9, r2
 8001144:	0d64      	lsrs	r4, r4, #21
 8001146:	0fdb      	lsrs	r3, r3, #31
 8001148:	2001      	movs	r0, #1
 800114a:	42b5      	cmp	r5, r6
 800114c:	d00a      	beq.n	8001164 <__eqdf2+0x44>
 800114e:	42b4      	cmp	r4, r6
 8001150:	d003      	beq.n	800115a <__eqdf2+0x3a>
 8001152:	42a5      	cmp	r5, r4
 8001154:	d101      	bne.n	800115a <__eqdf2+0x3a>
 8001156:	4557      	cmp	r7, sl
 8001158:	d00c      	beq.n	8001174 <__eqdf2+0x54>
 800115a:	bc1c      	pop	{r2, r3, r4}
 800115c:	4690      	mov	r8, r2
 800115e:	4699      	mov	r9, r3
 8001160:	46a2      	mov	sl, r4
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001164:	4666      	mov	r6, ip
 8001166:	433e      	orrs	r6, r7
 8001168:	d1f7      	bne.n	800115a <__eqdf2+0x3a>
 800116a:	42ac      	cmp	r4, r5
 800116c:	d1f5      	bne.n	800115a <__eqdf2+0x3a>
 800116e:	4654      	mov	r4, sl
 8001170:	4314      	orrs	r4, r2
 8001172:	d1f2      	bne.n	800115a <__eqdf2+0x3a>
 8001174:	2001      	movs	r0, #1
 8001176:	45c8      	cmp	r8, r9
 8001178:	d1ef      	bne.n	800115a <__eqdf2+0x3a>
 800117a:	4299      	cmp	r1, r3
 800117c:	d007      	beq.n	800118e <__eqdf2+0x6e>
 800117e:	2d00      	cmp	r5, #0
 8001180:	d1eb      	bne.n	800115a <__eqdf2+0x3a>
 8001182:	4663      	mov	r3, ip
 8001184:	431f      	orrs	r7, r3
 8001186:	0038      	movs	r0, r7
 8001188:	1e47      	subs	r7, r0, #1
 800118a:	41b8      	sbcs	r0, r7
 800118c:	e7e5      	b.n	800115a <__eqdf2+0x3a>
 800118e:	2000      	movs	r0, #0
 8001190:	e7e3      	b.n	800115a <__eqdf2+0x3a>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	000007ff 	.word	0x000007ff

08001198 <__gedf2>:
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	464f      	mov	r7, r9
 800119c:	4646      	mov	r6, r8
 800119e:	46d6      	mov	lr, sl
 80011a0:	004d      	lsls	r5, r1, #1
 80011a2:	b5c0      	push	{r6, r7, lr}
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	468a      	mov	sl, r1
 80011aa:	492c      	ldr	r1, [pc, #176]	; (800125c <__gedf2+0xc4>)
 80011ac:	031f      	lsls	r7, r3, #12
 80011ae:	005c      	lsls	r4, r3, #1
 80011b0:	4680      	mov	r8, r0
 80011b2:	0b36      	lsrs	r6, r6, #12
 80011b4:	0d6d      	lsrs	r5, r5, #21
 80011b6:	4691      	mov	r9, r2
 80011b8:	0b3f      	lsrs	r7, r7, #12
 80011ba:	0d64      	lsrs	r4, r4, #21
 80011bc:	0fdb      	lsrs	r3, r3, #31
 80011be:	428d      	cmp	r5, r1
 80011c0:	d01e      	beq.n	8001200 <__gedf2+0x68>
 80011c2:	428c      	cmp	r4, r1
 80011c4:	d016      	beq.n	80011f4 <__gedf2+0x5c>
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d11e      	bne.n	8001208 <__gedf2+0x70>
 80011ca:	4330      	orrs	r0, r6
 80011cc:	4684      	mov	ip, r0
 80011ce:	2c00      	cmp	r4, #0
 80011d0:	d101      	bne.n	80011d6 <__gedf2+0x3e>
 80011d2:	433a      	orrs	r2, r7
 80011d4:	d023      	beq.n	800121e <__gedf2+0x86>
 80011d6:	4662      	mov	r2, ip
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d01a      	beq.n	8001212 <__gedf2+0x7a>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d029      	beq.n	8001234 <__gedf2+0x9c>
 80011e0:	4651      	mov	r1, sl
 80011e2:	2002      	movs	r0, #2
 80011e4:	3901      	subs	r1, #1
 80011e6:	4008      	ands	r0, r1
 80011e8:	3801      	subs	r0, #1
 80011ea:	bc1c      	pop	{r2, r3, r4}
 80011ec:	4690      	mov	r8, r2
 80011ee:	4699      	mov	r9, r3
 80011f0:	46a2      	mov	sl, r4
 80011f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f4:	0039      	movs	r1, r7
 80011f6:	4311      	orrs	r1, r2
 80011f8:	d0e5      	beq.n	80011c6 <__gedf2+0x2e>
 80011fa:	2002      	movs	r0, #2
 80011fc:	4240      	negs	r0, r0
 80011fe:	e7f4      	b.n	80011ea <__gedf2+0x52>
 8001200:	4330      	orrs	r0, r6
 8001202:	d1fa      	bne.n	80011fa <__gedf2+0x62>
 8001204:	42ac      	cmp	r4, r5
 8001206:	d00f      	beq.n	8001228 <__gedf2+0x90>
 8001208:	2c00      	cmp	r4, #0
 800120a:	d10f      	bne.n	800122c <__gedf2+0x94>
 800120c:	433a      	orrs	r2, r7
 800120e:	d0e7      	beq.n	80011e0 <__gedf2+0x48>
 8001210:	e00c      	b.n	800122c <__gedf2+0x94>
 8001212:	2201      	movs	r2, #1
 8001214:	3b01      	subs	r3, #1
 8001216:	4393      	bics	r3, r2
 8001218:	0018      	movs	r0, r3
 800121a:	3001      	adds	r0, #1
 800121c:	e7e5      	b.n	80011ea <__gedf2+0x52>
 800121e:	4663      	mov	r3, ip
 8001220:	2000      	movs	r0, #0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0e1      	beq.n	80011ea <__gedf2+0x52>
 8001226:	e7db      	b.n	80011e0 <__gedf2+0x48>
 8001228:	433a      	orrs	r2, r7
 800122a:	d1e6      	bne.n	80011fa <__gedf2+0x62>
 800122c:	459a      	cmp	sl, r3
 800122e:	d1d7      	bne.n	80011e0 <__gedf2+0x48>
 8001230:	42a5      	cmp	r5, r4
 8001232:	dcd5      	bgt.n	80011e0 <__gedf2+0x48>
 8001234:	42a5      	cmp	r5, r4
 8001236:	db05      	blt.n	8001244 <__gedf2+0xac>
 8001238:	42be      	cmp	r6, r7
 800123a:	d8d1      	bhi.n	80011e0 <__gedf2+0x48>
 800123c:	d008      	beq.n	8001250 <__gedf2+0xb8>
 800123e:	2000      	movs	r0, #0
 8001240:	42be      	cmp	r6, r7
 8001242:	d2d2      	bcs.n	80011ea <__gedf2+0x52>
 8001244:	4650      	mov	r0, sl
 8001246:	2301      	movs	r3, #1
 8001248:	3801      	subs	r0, #1
 800124a:	4398      	bics	r0, r3
 800124c:	3001      	adds	r0, #1
 800124e:	e7cc      	b.n	80011ea <__gedf2+0x52>
 8001250:	45c8      	cmp	r8, r9
 8001252:	d8c5      	bhi.n	80011e0 <__gedf2+0x48>
 8001254:	2000      	movs	r0, #0
 8001256:	45c8      	cmp	r8, r9
 8001258:	d3f4      	bcc.n	8001244 <__gedf2+0xac>
 800125a:	e7c6      	b.n	80011ea <__gedf2+0x52>
 800125c:	000007ff 	.word	0x000007ff

08001260 <__ledf2>:
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	464f      	mov	r7, r9
 8001264:	4646      	mov	r6, r8
 8001266:	46d6      	mov	lr, sl
 8001268:	004d      	lsls	r5, r1, #1
 800126a:	b5c0      	push	{r6, r7, lr}
 800126c:	030e      	lsls	r6, r1, #12
 800126e:	0fc9      	lsrs	r1, r1, #31
 8001270:	468a      	mov	sl, r1
 8001272:	492e      	ldr	r1, [pc, #184]	; (800132c <__ledf2+0xcc>)
 8001274:	031f      	lsls	r7, r3, #12
 8001276:	005c      	lsls	r4, r3, #1
 8001278:	4680      	mov	r8, r0
 800127a:	0b36      	lsrs	r6, r6, #12
 800127c:	0d6d      	lsrs	r5, r5, #21
 800127e:	4691      	mov	r9, r2
 8001280:	0b3f      	lsrs	r7, r7, #12
 8001282:	0d64      	lsrs	r4, r4, #21
 8001284:	0fdb      	lsrs	r3, r3, #31
 8001286:	428d      	cmp	r5, r1
 8001288:	d018      	beq.n	80012bc <__ledf2+0x5c>
 800128a:	428c      	cmp	r4, r1
 800128c:	d011      	beq.n	80012b2 <__ledf2+0x52>
 800128e:	2d00      	cmp	r5, #0
 8001290:	d118      	bne.n	80012c4 <__ledf2+0x64>
 8001292:	4330      	orrs	r0, r6
 8001294:	4684      	mov	ip, r0
 8001296:	2c00      	cmp	r4, #0
 8001298:	d11e      	bne.n	80012d8 <__ledf2+0x78>
 800129a:	433a      	orrs	r2, r7
 800129c:	d11c      	bne.n	80012d8 <__ledf2+0x78>
 800129e:	4663      	mov	r3, ip
 80012a0:	2000      	movs	r0, #0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d030      	beq.n	8001308 <__ledf2+0xa8>
 80012a6:	4651      	mov	r1, sl
 80012a8:	2002      	movs	r0, #2
 80012aa:	3901      	subs	r1, #1
 80012ac:	4008      	ands	r0, r1
 80012ae:	3801      	subs	r0, #1
 80012b0:	e02a      	b.n	8001308 <__ledf2+0xa8>
 80012b2:	0039      	movs	r1, r7
 80012b4:	4311      	orrs	r1, r2
 80012b6:	d0ea      	beq.n	800128e <__ledf2+0x2e>
 80012b8:	2002      	movs	r0, #2
 80012ba:	e025      	b.n	8001308 <__ledf2+0xa8>
 80012bc:	4330      	orrs	r0, r6
 80012be:	d1fb      	bne.n	80012b8 <__ledf2+0x58>
 80012c0:	42ac      	cmp	r4, r5
 80012c2:	d026      	beq.n	8001312 <__ledf2+0xb2>
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d126      	bne.n	8001316 <__ledf2+0xb6>
 80012c8:	433a      	orrs	r2, r7
 80012ca:	d124      	bne.n	8001316 <__ledf2+0xb6>
 80012cc:	4651      	mov	r1, sl
 80012ce:	2002      	movs	r0, #2
 80012d0:	3901      	subs	r1, #1
 80012d2:	4008      	ands	r0, r1
 80012d4:	3801      	subs	r0, #1
 80012d6:	e017      	b.n	8001308 <__ledf2+0xa8>
 80012d8:	4662      	mov	r2, ip
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d00f      	beq.n	80012fe <__ledf2+0x9e>
 80012de:	459a      	cmp	sl, r3
 80012e0:	d1e1      	bne.n	80012a6 <__ledf2+0x46>
 80012e2:	42a5      	cmp	r5, r4
 80012e4:	db05      	blt.n	80012f2 <__ledf2+0x92>
 80012e6:	42be      	cmp	r6, r7
 80012e8:	d8dd      	bhi.n	80012a6 <__ledf2+0x46>
 80012ea:	d019      	beq.n	8001320 <__ledf2+0xc0>
 80012ec:	2000      	movs	r0, #0
 80012ee:	42be      	cmp	r6, r7
 80012f0:	d20a      	bcs.n	8001308 <__ledf2+0xa8>
 80012f2:	4650      	mov	r0, sl
 80012f4:	2301      	movs	r3, #1
 80012f6:	3801      	subs	r0, #1
 80012f8:	4398      	bics	r0, r3
 80012fa:	3001      	adds	r0, #1
 80012fc:	e004      	b.n	8001308 <__ledf2+0xa8>
 80012fe:	2201      	movs	r2, #1
 8001300:	3b01      	subs	r3, #1
 8001302:	4393      	bics	r3, r2
 8001304:	0018      	movs	r0, r3
 8001306:	3001      	adds	r0, #1
 8001308:	bc1c      	pop	{r2, r3, r4}
 800130a:	4690      	mov	r8, r2
 800130c:	4699      	mov	r9, r3
 800130e:	46a2      	mov	sl, r4
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	433a      	orrs	r2, r7
 8001314:	d1d0      	bne.n	80012b8 <__ledf2+0x58>
 8001316:	459a      	cmp	sl, r3
 8001318:	d1c5      	bne.n	80012a6 <__ledf2+0x46>
 800131a:	42a5      	cmp	r5, r4
 800131c:	dcc3      	bgt.n	80012a6 <__ledf2+0x46>
 800131e:	e7e0      	b.n	80012e2 <__ledf2+0x82>
 8001320:	45c8      	cmp	r8, r9
 8001322:	d8c0      	bhi.n	80012a6 <__ledf2+0x46>
 8001324:	2000      	movs	r0, #0
 8001326:	45c8      	cmp	r8, r9
 8001328:	d3e3      	bcc.n	80012f2 <__ledf2+0x92>
 800132a:	e7ed      	b.n	8001308 <__ledf2+0xa8>
 800132c:	000007ff 	.word	0x000007ff

08001330 <__aeabi_dmul>:
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	4657      	mov	r7, sl
 8001334:	46de      	mov	lr, fp
 8001336:	464e      	mov	r6, r9
 8001338:	4645      	mov	r5, r8
 800133a:	b5e0      	push	{r5, r6, r7, lr}
 800133c:	4683      	mov	fp, r0
 800133e:	0006      	movs	r6, r0
 8001340:	030f      	lsls	r7, r1, #12
 8001342:	0048      	lsls	r0, r1, #1
 8001344:	b087      	sub	sp, #28
 8001346:	4692      	mov	sl, r2
 8001348:	001d      	movs	r5, r3
 800134a:	0b3f      	lsrs	r7, r7, #12
 800134c:	0d40      	lsrs	r0, r0, #21
 800134e:	0fcc      	lsrs	r4, r1, #31
 8001350:	2800      	cmp	r0, #0
 8001352:	d100      	bne.n	8001356 <__aeabi_dmul+0x26>
 8001354:	e06f      	b.n	8001436 <__aeabi_dmul+0x106>
 8001356:	4bde      	ldr	r3, [pc, #888]	; (80016d0 <__aeabi_dmul+0x3a0>)
 8001358:	4298      	cmp	r0, r3
 800135a:	d038      	beq.n	80013ce <__aeabi_dmul+0x9e>
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	00ff      	lsls	r7, r7, #3
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	431f      	orrs	r7, r3
 8001364:	0f73      	lsrs	r3, r6, #29
 8001366:	433b      	orrs	r3, r7
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	4bda      	ldr	r3, [pc, #872]	; (80016d4 <__aeabi_dmul+0x3a4>)
 800136c:	2700      	movs	r7, #0
 800136e:	4699      	mov	r9, r3
 8001370:	2300      	movs	r3, #0
 8001372:	469b      	mov	fp, r3
 8001374:	00f6      	lsls	r6, r6, #3
 8001376:	4481      	add	r9, r0
 8001378:	032b      	lsls	r3, r5, #12
 800137a:	0069      	lsls	r1, r5, #1
 800137c:	0b1b      	lsrs	r3, r3, #12
 800137e:	4652      	mov	r2, sl
 8001380:	4698      	mov	r8, r3
 8001382:	0d49      	lsrs	r1, r1, #21
 8001384:	0fed      	lsrs	r5, r5, #31
 8001386:	2900      	cmp	r1, #0
 8001388:	d100      	bne.n	800138c <__aeabi_dmul+0x5c>
 800138a:	e085      	b.n	8001498 <__aeabi_dmul+0x168>
 800138c:	4bd0      	ldr	r3, [pc, #832]	; (80016d0 <__aeabi_dmul+0x3a0>)
 800138e:	4299      	cmp	r1, r3
 8001390:	d100      	bne.n	8001394 <__aeabi_dmul+0x64>
 8001392:	e073      	b.n	800147c <__aeabi_dmul+0x14c>
 8001394:	4643      	mov	r3, r8
 8001396:	00da      	lsls	r2, r3, #3
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	4313      	orrs	r3, r2
 800139e:	4652      	mov	r2, sl
 80013a0:	48cc      	ldr	r0, [pc, #816]	; (80016d4 <__aeabi_dmul+0x3a4>)
 80013a2:	0f52      	lsrs	r2, r2, #29
 80013a4:	4684      	mov	ip, r0
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4652      	mov	r2, sl
 80013aa:	2000      	movs	r0, #0
 80013ac:	4461      	add	r1, ip
 80013ae:	00d2      	lsls	r2, r2, #3
 80013b0:	4489      	add	r9, r1
 80013b2:	0021      	movs	r1, r4
 80013b4:	4069      	eors	r1, r5
 80013b6:	9100      	str	r1, [sp, #0]
 80013b8:	468c      	mov	ip, r1
 80013ba:	2101      	movs	r1, #1
 80013bc:	4449      	add	r1, r9
 80013be:	468a      	mov	sl, r1
 80013c0:	2f0f      	cmp	r7, #15
 80013c2:	d900      	bls.n	80013c6 <__aeabi_dmul+0x96>
 80013c4:	e090      	b.n	80014e8 <__aeabi_dmul+0x1b8>
 80013c6:	49c4      	ldr	r1, [pc, #784]	; (80016d8 <__aeabi_dmul+0x3a8>)
 80013c8:	00bf      	lsls	r7, r7, #2
 80013ca:	59cf      	ldr	r7, [r1, r7]
 80013cc:	46bf      	mov	pc, r7
 80013ce:	465b      	mov	r3, fp
 80013d0:	433b      	orrs	r3, r7
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dmul+0xa8>
 80013d6:	e16a      	b.n	80016ae <__aeabi_dmul+0x37e>
 80013d8:	2302      	movs	r3, #2
 80013da:	2708      	movs	r7, #8
 80013dc:	2600      	movs	r6, #0
 80013de:	4681      	mov	r9, r0
 80013e0:	469b      	mov	fp, r3
 80013e2:	e7c9      	b.n	8001378 <__aeabi_dmul+0x48>
 80013e4:	0032      	movs	r2, r6
 80013e6:	4658      	mov	r0, fp
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	4661      	mov	r1, ip
 80013ec:	9100      	str	r1, [sp, #0]
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dmul+0xc4>
 80013f2:	e075      	b.n	80014e0 <__aeabi_dmul+0x1b0>
 80013f4:	2803      	cmp	r0, #3
 80013f6:	d100      	bne.n	80013fa <__aeabi_dmul+0xca>
 80013f8:	e1fe      	b.n	80017f8 <__aeabi_dmul+0x4c8>
 80013fa:	2801      	cmp	r0, #1
 80013fc:	d000      	beq.n	8001400 <__aeabi_dmul+0xd0>
 80013fe:	e12c      	b.n	800165a <__aeabi_dmul+0x32a>
 8001400:	2300      	movs	r3, #0
 8001402:	2700      	movs	r7, #0
 8001404:	2600      	movs	r6, #0
 8001406:	2500      	movs	r5, #0
 8001408:	033f      	lsls	r7, r7, #12
 800140a:	0d2a      	lsrs	r2, r5, #20
 800140c:	0b3f      	lsrs	r7, r7, #12
 800140e:	48b3      	ldr	r0, [pc, #716]	; (80016dc <__aeabi_dmul+0x3ac>)
 8001410:	0512      	lsls	r2, r2, #20
 8001412:	433a      	orrs	r2, r7
 8001414:	4002      	ands	r2, r0
 8001416:	051b      	lsls	r3, r3, #20
 8001418:	4313      	orrs	r3, r2
 800141a:	9a00      	ldr	r2, [sp, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	07d1      	lsls	r1, r2, #31
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	430b      	orrs	r3, r1
 8001424:	0030      	movs	r0, r6
 8001426:	0019      	movs	r1, r3
 8001428:	b007      	add	sp, #28
 800142a:	bc3c      	pop	{r2, r3, r4, r5}
 800142c:	4690      	mov	r8, r2
 800142e:	4699      	mov	r9, r3
 8001430:	46a2      	mov	sl, r4
 8001432:	46ab      	mov	fp, r5
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	465b      	mov	r3, fp
 8001438:	433b      	orrs	r3, r7
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	d100      	bne.n	8001440 <__aeabi_dmul+0x110>
 800143e:	e12f      	b.n	80016a0 <__aeabi_dmul+0x370>
 8001440:	2f00      	cmp	r7, #0
 8001442:	d100      	bne.n	8001446 <__aeabi_dmul+0x116>
 8001444:	e1a5      	b.n	8001792 <__aeabi_dmul+0x462>
 8001446:	0038      	movs	r0, r7
 8001448:	f000 fe6e 	bl	8002128 <__clzsi2>
 800144c:	0003      	movs	r3, r0
 800144e:	3b0b      	subs	r3, #11
 8001450:	2b1c      	cmp	r3, #28
 8001452:	dd00      	ble.n	8001456 <__aeabi_dmul+0x126>
 8001454:	e196      	b.n	8001784 <__aeabi_dmul+0x454>
 8001456:	221d      	movs	r2, #29
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	465a      	mov	r2, fp
 800145c:	0001      	movs	r1, r0
 800145e:	40da      	lsrs	r2, r3
 8001460:	465e      	mov	r6, fp
 8001462:	3908      	subs	r1, #8
 8001464:	408f      	lsls	r7, r1
 8001466:	0013      	movs	r3, r2
 8001468:	408e      	lsls	r6, r1
 800146a:	433b      	orrs	r3, r7
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4b9c      	ldr	r3, [pc, #624]	; (80016e0 <__aeabi_dmul+0x3b0>)
 8001470:	2700      	movs	r7, #0
 8001472:	1a1b      	subs	r3, r3, r0
 8001474:	4699      	mov	r9, r3
 8001476:	2300      	movs	r3, #0
 8001478:	469b      	mov	fp, r3
 800147a:	e77d      	b.n	8001378 <__aeabi_dmul+0x48>
 800147c:	4641      	mov	r1, r8
 800147e:	4653      	mov	r3, sl
 8001480:	430b      	orrs	r3, r1
 8001482:	4993      	ldr	r1, [pc, #588]	; (80016d0 <__aeabi_dmul+0x3a0>)
 8001484:	468c      	mov	ip, r1
 8001486:	44e1      	add	r9, ip
 8001488:	2b00      	cmp	r3, #0
 800148a:	d000      	beq.n	800148e <__aeabi_dmul+0x15e>
 800148c:	e11a      	b.n	80016c4 <__aeabi_dmul+0x394>
 800148e:	2202      	movs	r2, #2
 8001490:	2002      	movs	r0, #2
 8001492:	4317      	orrs	r7, r2
 8001494:	2200      	movs	r2, #0
 8001496:	e78c      	b.n	80013b2 <__aeabi_dmul+0x82>
 8001498:	4313      	orrs	r3, r2
 800149a:	d100      	bne.n	800149e <__aeabi_dmul+0x16e>
 800149c:	e10d      	b.n	80016ba <__aeabi_dmul+0x38a>
 800149e:	4643      	mov	r3, r8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dmul+0x176>
 80014a4:	e181      	b.n	80017aa <__aeabi_dmul+0x47a>
 80014a6:	4640      	mov	r0, r8
 80014a8:	f000 fe3e 	bl	8002128 <__clzsi2>
 80014ac:	0002      	movs	r2, r0
 80014ae:	3a0b      	subs	r2, #11
 80014b0:	2a1c      	cmp	r2, #28
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dmul+0x186>
 80014b4:	e172      	b.n	800179c <__aeabi_dmul+0x46c>
 80014b6:	0001      	movs	r1, r0
 80014b8:	4643      	mov	r3, r8
 80014ba:	3908      	subs	r1, #8
 80014bc:	408b      	lsls	r3, r1
 80014be:	4698      	mov	r8, r3
 80014c0:	231d      	movs	r3, #29
 80014c2:	1a9a      	subs	r2, r3, r2
 80014c4:	4653      	mov	r3, sl
 80014c6:	40d3      	lsrs	r3, r2
 80014c8:	001a      	movs	r2, r3
 80014ca:	4643      	mov	r3, r8
 80014cc:	4313      	orrs	r3, r2
 80014ce:	4652      	mov	r2, sl
 80014d0:	408a      	lsls	r2, r1
 80014d2:	4649      	mov	r1, r9
 80014d4:	1a08      	subs	r0, r1, r0
 80014d6:	4982      	ldr	r1, [pc, #520]	; (80016e0 <__aeabi_dmul+0x3b0>)
 80014d8:	4689      	mov	r9, r1
 80014da:	4481      	add	r9, r0
 80014dc:	2000      	movs	r0, #0
 80014de:	e768      	b.n	80013b2 <__aeabi_dmul+0x82>
 80014e0:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <__aeabi_dmul+0x3a0>)
 80014e2:	2700      	movs	r7, #0
 80014e4:	2600      	movs	r6, #0
 80014e6:	e78e      	b.n	8001406 <__aeabi_dmul+0xd6>
 80014e8:	0c14      	lsrs	r4, r2, #16
 80014ea:	0412      	lsls	r2, r2, #16
 80014ec:	0c12      	lsrs	r2, r2, #16
 80014ee:	0011      	movs	r1, r2
 80014f0:	0c37      	lsrs	r7, r6, #16
 80014f2:	0436      	lsls	r6, r6, #16
 80014f4:	0c35      	lsrs	r5, r6, #16
 80014f6:	4379      	muls	r1, r7
 80014f8:	0028      	movs	r0, r5
 80014fa:	468c      	mov	ip, r1
 80014fc:	002e      	movs	r6, r5
 80014fe:	4360      	muls	r0, r4
 8001500:	4460      	add	r0, ip
 8001502:	4683      	mov	fp, r0
 8001504:	4356      	muls	r6, r2
 8001506:	0021      	movs	r1, r4
 8001508:	0c30      	lsrs	r0, r6, #16
 800150a:	4680      	mov	r8, r0
 800150c:	4658      	mov	r0, fp
 800150e:	4379      	muls	r1, r7
 8001510:	4440      	add	r0, r8
 8001512:	9102      	str	r1, [sp, #8]
 8001514:	4584      	cmp	ip, r0
 8001516:	d906      	bls.n	8001526 <__aeabi_dmul+0x1f6>
 8001518:	4688      	mov	r8, r1
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0249      	lsls	r1, r1, #9
 800151e:	468c      	mov	ip, r1
 8001520:	44e0      	add	r8, ip
 8001522:	4641      	mov	r1, r8
 8001524:	9102      	str	r1, [sp, #8]
 8001526:	0436      	lsls	r6, r6, #16
 8001528:	0c01      	lsrs	r1, r0, #16
 800152a:	0c36      	lsrs	r6, r6, #16
 800152c:	0400      	lsls	r0, r0, #16
 800152e:	468b      	mov	fp, r1
 8001530:	1981      	adds	r1, r0, r6
 8001532:	0c1e      	lsrs	r6, r3, #16
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	9103      	str	r1, [sp, #12]
 800153a:	0019      	movs	r1, r3
 800153c:	4379      	muls	r1, r7
 800153e:	468c      	mov	ip, r1
 8001540:	0028      	movs	r0, r5
 8001542:	4375      	muls	r5, r6
 8001544:	4465      	add	r5, ip
 8001546:	46a8      	mov	r8, r5
 8001548:	4358      	muls	r0, r3
 800154a:	0c05      	lsrs	r5, r0, #16
 800154c:	4445      	add	r5, r8
 800154e:	4377      	muls	r7, r6
 8001550:	42a9      	cmp	r1, r5
 8001552:	d903      	bls.n	800155c <__aeabi_dmul+0x22c>
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	0249      	lsls	r1, r1, #9
 8001558:	468c      	mov	ip, r1
 800155a:	4467      	add	r7, ip
 800155c:	0c29      	lsrs	r1, r5, #16
 800155e:	468c      	mov	ip, r1
 8001560:	0039      	movs	r1, r7
 8001562:	0400      	lsls	r0, r0, #16
 8001564:	0c00      	lsrs	r0, r0, #16
 8001566:	042d      	lsls	r5, r5, #16
 8001568:	182d      	adds	r5, r5, r0
 800156a:	4461      	add	r1, ip
 800156c:	44ab      	add	fp, r5
 800156e:	9105      	str	r1, [sp, #20]
 8001570:	4659      	mov	r1, fp
 8001572:	9104      	str	r1, [sp, #16]
 8001574:	9901      	ldr	r1, [sp, #4]
 8001576:	040f      	lsls	r7, r1, #16
 8001578:	0c3f      	lsrs	r7, r7, #16
 800157a:	0c08      	lsrs	r0, r1, #16
 800157c:	0039      	movs	r1, r7
 800157e:	4351      	muls	r1, r2
 8001580:	4342      	muls	r2, r0
 8001582:	4690      	mov	r8, r2
 8001584:	0002      	movs	r2, r0
 8001586:	468c      	mov	ip, r1
 8001588:	0c09      	lsrs	r1, r1, #16
 800158a:	468b      	mov	fp, r1
 800158c:	4362      	muls	r2, r4
 800158e:	437c      	muls	r4, r7
 8001590:	4444      	add	r4, r8
 8001592:	445c      	add	r4, fp
 8001594:	45a0      	cmp	r8, r4
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x270>
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0249      	lsls	r1, r1, #9
 800159c:	4688      	mov	r8, r1
 800159e:	4442      	add	r2, r8
 80015a0:	0c21      	lsrs	r1, r4, #16
 80015a2:	4688      	mov	r8, r1
 80015a4:	4661      	mov	r1, ip
 80015a6:	0409      	lsls	r1, r1, #16
 80015a8:	0c09      	lsrs	r1, r1, #16
 80015aa:	468c      	mov	ip, r1
 80015ac:	0039      	movs	r1, r7
 80015ae:	4359      	muls	r1, r3
 80015b0:	4343      	muls	r3, r0
 80015b2:	4370      	muls	r0, r6
 80015b4:	437e      	muls	r6, r7
 80015b6:	0c0f      	lsrs	r7, r1, #16
 80015b8:	18f6      	adds	r6, r6, r3
 80015ba:	0424      	lsls	r4, r4, #16
 80015bc:	19be      	adds	r6, r7, r6
 80015be:	4464      	add	r4, ip
 80015c0:	4442      	add	r2, r8
 80015c2:	468c      	mov	ip, r1
 80015c4:	42b3      	cmp	r3, r6
 80015c6:	d903      	bls.n	80015d0 <__aeabi_dmul+0x2a0>
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	4698      	mov	r8, r3
 80015ce:	4440      	add	r0, r8
 80015d0:	9b02      	ldr	r3, [sp, #8]
 80015d2:	4661      	mov	r1, ip
 80015d4:	4698      	mov	r8, r3
 80015d6:	9b04      	ldr	r3, [sp, #16]
 80015d8:	0437      	lsls	r7, r6, #16
 80015da:	4443      	add	r3, r8
 80015dc:	469b      	mov	fp, r3
 80015de:	45ab      	cmp	fp, r5
 80015e0:	41ad      	sbcs	r5, r5
 80015e2:	426b      	negs	r3, r5
 80015e4:	040d      	lsls	r5, r1, #16
 80015e6:	9905      	ldr	r1, [sp, #20]
 80015e8:	0c2d      	lsrs	r5, r5, #16
 80015ea:	468c      	mov	ip, r1
 80015ec:	197f      	adds	r7, r7, r5
 80015ee:	4467      	add	r7, ip
 80015f0:	18fd      	adds	r5, r7, r3
 80015f2:	46a8      	mov	r8, r5
 80015f4:	465d      	mov	r5, fp
 80015f6:	192d      	adds	r5, r5, r4
 80015f8:	42a5      	cmp	r5, r4
 80015fa:	41a4      	sbcs	r4, r4
 80015fc:	4693      	mov	fp, r2
 80015fe:	4264      	negs	r4, r4
 8001600:	46a4      	mov	ip, r4
 8001602:	44c3      	add	fp, r8
 8001604:	44dc      	add	ip, fp
 8001606:	428f      	cmp	r7, r1
 8001608:	41bf      	sbcs	r7, r7
 800160a:	4598      	cmp	r8, r3
 800160c:	419b      	sbcs	r3, r3
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	45a4      	cmp	ip, r4
 8001614:	41a4      	sbcs	r4, r4
 8001616:	425b      	negs	r3, r3
 8001618:	427f      	negs	r7, r7
 800161a:	431f      	orrs	r7, r3
 800161c:	0c36      	lsrs	r6, r6, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4264      	negs	r4, r4
 8001622:	19bf      	adds	r7, r7, r6
 8001624:	4322      	orrs	r2, r4
 8001626:	18bf      	adds	r7, r7, r2
 8001628:	4662      	mov	r2, ip
 800162a:	1838      	adds	r0, r7, r0
 800162c:	0243      	lsls	r3, r0, #9
 800162e:	0dd2      	lsrs	r2, r2, #23
 8001630:	9903      	ldr	r1, [sp, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	026a      	lsls	r2, r5, #9
 8001636:	430a      	orrs	r2, r1
 8001638:	1e50      	subs	r0, r2, #1
 800163a:	4182      	sbcs	r2, r0
 800163c:	4661      	mov	r1, ip
 800163e:	0ded      	lsrs	r5, r5, #23
 8001640:	432a      	orrs	r2, r5
 8001642:	024e      	lsls	r6, r1, #9
 8001644:	4332      	orrs	r2, r6
 8001646:	01d9      	lsls	r1, r3, #7
 8001648:	d400      	bmi.n	800164c <__aeabi_dmul+0x31c>
 800164a:	e0b3      	b.n	80017b4 <__aeabi_dmul+0x484>
 800164c:	2601      	movs	r6, #1
 800164e:	0850      	lsrs	r0, r2, #1
 8001650:	4032      	ands	r2, r6
 8001652:	4302      	orrs	r2, r0
 8001654:	07de      	lsls	r6, r3, #31
 8001656:	4332      	orrs	r2, r6
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	4c22      	ldr	r4, [pc, #136]	; (80016e4 <__aeabi_dmul+0x3b4>)
 800165c:	4454      	add	r4, sl
 800165e:	2c00      	cmp	r4, #0
 8001660:	dd62      	ble.n	8001728 <__aeabi_dmul+0x3f8>
 8001662:	0751      	lsls	r1, r2, #29
 8001664:	d009      	beq.n	800167a <__aeabi_dmul+0x34a>
 8001666:	200f      	movs	r0, #15
 8001668:	4010      	ands	r0, r2
 800166a:	2804      	cmp	r0, #4
 800166c:	d005      	beq.n	800167a <__aeabi_dmul+0x34a>
 800166e:	1d10      	adds	r0, r2, #4
 8001670:	4290      	cmp	r0, r2
 8001672:	4192      	sbcs	r2, r2
 8001674:	4252      	negs	r2, r2
 8001676:	189b      	adds	r3, r3, r2
 8001678:	0002      	movs	r2, r0
 800167a:	01d9      	lsls	r1, r3, #7
 800167c:	d504      	bpl.n	8001688 <__aeabi_dmul+0x358>
 800167e:	2480      	movs	r4, #128	; 0x80
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <__aeabi_dmul+0x3b8>)
 8001682:	00e4      	lsls	r4, r4, #3
 8001684:	4003      	ands	r3, r0
 8001686:	4454      	add	r4, sl
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <__aeabi_dmul+0x3bc>)
 800168a:	4284      	cmp	r4, r0
 800168c:	dd00      	ble.n	8001690 <__aeabi_dmul+0x360>
 800168e:	e727      	b.n	80014e0 <__aeabi_dmul+0x1b0>
 8001690:	075e      	lsls	r6, r3, #29
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	08d2      	lsrs	r2, r2, #3
 8001696:	0b1f      	lsrs	r7, r3, #12
 8001698:	0563      	lsls	r3, r4, #21
 800169a:	4316      	orrs	r6, r2
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	e6b2      	b.n	8001406 <__aeabi_dmul+0xd6>
 80016a0:	2300      	movs	r3, #0
 80016a2:	4699      	mov	r9, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	2704      	movs	r7, #4
 80016a8:	2600      	movs	r6, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e664      	b.n	8001378 <__aeabi_dmul+0x48>
 80016ae:	2303      	movs	r3, #3
 80016b0:	9701      	str	r7, [sp, #4]
 80016b2:	4681      	mov	r9, r0
 80016b4:	270c      	movs	r7, #12
 80016b6:	469b      	mov	fp, r3
 80016b8:	e65e      	b.n	8001378 <__aeabi_dmul+0x48>
 80016ba:	2201      	movs	r2, #1
 80016bc:	2001      	movs	r0, #1
 80016be:	4317      	orrs	r7, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	e676      	b.n	80013b2 <__aeabi_dmul+0x82>
 80016c4:	2303      	movs	r3, #3
 80016c6:	2003      	movs	r0, #3
 80016c8:	431f      	orrs	r7, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	e671      	b.n	80013b2 <__aeabi_dmul+0x82>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	000007ff 	.word	0x000007ff
 80016d4:	fffffc01 	.word	0xfffffc01
 80016d8:	08009dd0 	.word	0x08009dd0
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	fffffc0d 	.word	0xfffffc0d
 80016e4:	000003ff 	.word	0x000003ff
 80016e8:	feffffff 	.word	0xfeffffff
 80016ec:	000007fe 	.word	0x000007fe
 80016f0:	2300      	movs	r3, #0
 80016f2:	2780      	movs	r7, #128	; 0x80
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	033f      	lsls	r7, r7, #12
 80016f8:	2600      	movs	r6, #0
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <__aeabi_dmul+0x4d8>)
 80016fc:	e683      	b.n	8001406 <__aeabi_dmul+0xd6>
 80016fe:	9b01      	ldr	r3, [sp, #4]
 8001700:	0032      	movs	r2, r6
 8001702:	46a4      	mov	ip, r4
 8001704:	4658      	mov	r0, fp
 8001706:	e670      	b.n	80013ea <__aeabi_dmul+0xba>
 8001708:	46ac      	mov	ip, r5
 800170a:	e66e      	b.n	80013ea <__aeabi_dmul+0xba>
 800170c:	2780      	movs	r7, #128	; 0x80
 800170e:	9901      	ldr	r1, [sp, #4]
 8001710:	033f      	lsls	r7, r7, #12
 8001712:	4239      	tst	r1, r7
 8001714:	d02d      	beq.n	8001772 <__aeabi_dmul+0x442>
 8001716:	423b      	tst	r3, r7
 8001718:	d12b      	bne.n	8001772 <__aeabi_dmul+0x442>
 800171a:	431f      	orrs	r7, r3
 800171c:	033f      	lsls	r7, r7, #12
 800171e:	0b3f      	lsrs	r7, r7, #12
 8001720:	9500      	str	r5, [sp, #0]
 8001722:	0016      	movs	r6, r2
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <__aeabi_dmul+0x4d8>)
 8001726:	e66e      	b.n	8001406 <__aeabi_dmul+0xd6>
 8001728:	2501      	movs	r5, #1
 800172a:	1b2d      	subs	r5, r5, r4
 800172c:	2d38      	cmp	r5, #56	; 0x38
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x402>
 8001730:	e666      	b.n	8001400 <__aeabi_dmul+0xd0>
 8001732:	2d1f      	cmp	r5, #31
 8001734:	dc40      	bgt.n	80017b8 <__aeabi_dmul+0x488>
 8001736:	4835      	ldr	r0, [pc, #212]	; (800180c <__aeabi_dmul+0x4dc>)
 8001738:	001c      	movs	r4, r3
 800173a:	4450      	add	r0, sl
 800173c:	0016      	movs	r6, r2
 800173e:	4082      	lsls	r2, r0
 8001740:	4084      	lsls	r4, r0
 8001742:	40ee      	lsrs	r6, r5
 8001744:	1e50      	subs	r0, r2, #1
 8001746:	4182      	sbcs	r2, r0
 8001748:	4334      	orrs	r4, r6
 800174a:	4314      	orrs	r4, r2
 800174c:	40eb      	lsrs	r3, r5
 800174e:	0762      	lsls	r2, r4, #29
 8001750:	d009      	beq.n	8001766 <__aeabi_dmul+0x436>
 8001752:	220f      	movs	r2, #15
 8001754:	4022      	ands	r2, r4
 8001756:	2a04      	cmp	r2, #4
 8001758:	d005      	beq.n	8001766 <__aeabi_dmul+0x436>
 800175a:	0022      	movs	r2, r4
 800175c:	1d14      	adds	r4, r2, #4
 800175e:	4294      	cmp	r4, r2
 8001760:	4180      	sbcs	r0, r0
 8001762:	4240      	negs	r0, r0
 8001764:	181b      	adds	r3, r3, r0
 8001766:	021a      	lsls	r2, r3, #8
 8001768:	d53e      	bpl.n	80017e8 <__aeabi_dmul+0x4b8>
 800176a:	2301      	movs	r3, #1
 800176c:	2700      	movs	r7, #0
 800176e:	2600      	movs	r6, #0
 8001770:	e649      	b.n	8001406 <__aeabi_dmul+0xd6>
 8001772:	2780      	movs	r7, #128	; 0x80
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	033f      	lsls	r7, r7, #12
 8001778:	431f      	orrs	r7, r3
 800177a:	033f      	lsls	r7, r7, #12
 800177c:	0b3f      	lsrs	r7, r7, #12
 800177e:	9400      	str	r4, [sp, #0]
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <__aeabi_dmul+0x4d8>)
 8001782:	e640      	b.n	8001406 <__aeabi_dmul+0xd6>
 8001784:	0003      	movs	r3, r0
 8001786:	465a      	mov	r2, fp
 8001788:	3b28      	subs	r3, #40	; 0x28
 800178a:	409a      	lsls	r2, r3
 800178c:	2600      	movs	r6, #0
 800178e:	9201      	str	r2, [sp, #4]
 8001790:	e66d      	b.n	800146e <__aeabi_dmul+0x13e>
 8001792:	4658      	mov	r0, fp
 8001794:	f000 fcc8 	bl	8002128 <__clzsi2>
 8001798:	3020      	adds	r0, #32
 800179a:	e657      	b.n	800144c <__aeabi_dmul+0x11c>
 800179c:	0003      	movs	r3, r0
 800179e:	4652      	mov	r2, sl
 80017a0:	3b28      	subs	r3, #40	; 0x28
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	2200      	movs	r2, #0
 80017a8:	e693      	b.n	80014d2 <__aeabi_dmul+0x1a2>
 80017aa:	4650      	mov	r0, sl
 80017ac:	f000 fcbc 	bl	8002128 <__clzsi2>
 80017b0:	3020      	adds	r0, #32
 80017b2:	e67b      	b.n	80014ac <__aeabi_dmul+0x17c>
 80017b4:	46ca      	mov	sl, r9
 80017b6:	e750      	b.n	800165a <__aeabi_dmul+0x32a>
 80017b8:	201f      	movs	r0, #31
 80017ba:	001e      	movs	r6, r3
 80017bc:	4240      	negs	r0, r0
 80017be:	1b04      	subs	r4, r0, r4
 80017c0:	40e6      	lsrs	r6, r4
 80017c2:	2d20      	cmp	r5, #32
 80017c4:	d003      	beq.n	80017ce <__aeabi_dmul+0x49e>
 80017c6:	4c12      	ldr	r4, [pc, #72]	; (8001810 <__aeabi_dmul+0x4e0>)
 80017c8:	4454      	add	r4, sl
 80017ca:	40a3      	lsls	r3, r4
 80017cc:	431a      	orrs	r2, r3
 80017ce:	1e50      	subs	r0, r2, #1
 80017d0:	4182      	sbcs	r2, r0
 80017d2:	4332      	orrs	r2, r6
 80017d4:	2607      	movs	r6, #7
 80017d6:	2700      	movs	r7, #0
 80017d8:	4016      	ands	r6, r2
 80017da:	d009      	beq.n	80017f0 <__aeabi_dmul+0x4c0>
 80017dc:	200f      	movs	r0, #15
 80017de:	2300      	movs	r3, #0
 80017e0:	4010      	ands	r0, r2
 80017e2:	0014      	movs	r4, r2
 80017e4:	2804      	cmp	r0, #4
 80017e6:	d1b9      	bne.n	800175c <__aeabi_dmul+0x42c>
 80017e8:	0022      	movs	r2, r4
 80017ea:	075e      	lsls	r6, r3, #29
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	0b1f      	lsrs	r7, r3, #12
 80017f0:	08d2      	lsrs	r2, r2, #3
 80017f2:	4316      	orrs	r6, r2
 80017f4:	2300      	movs	r3, #0
 80017f6:	e606      	b.n	8001406 <__aeabi_dmul+0xd6>
 80017f8:	2780      	movs	r7, #128	; 0x80
 80017fa:	033f      	lsls	r7, r7, #12
 80017fc:	431f      	orrs	r7, r3
 80017fe:	033f      	lsls	r7, r7, #12
 8001800:	0b3f      	lsrs	r7, r7, #12
 8001802:	0016      	movs	r6, r2
 8001804:	4b00      	ldr	r3, [pc, #0]	; (8001808 <__aeabi_dmul+0x4d8>)
 8001806:	e5fe      	b.n	8001406 <__aeabi_dmul+0xd6>
 8001808:	000007ff 	.word	0x000007ff
 800180c:	0000041e 	.word	0x0000041e
 8001810:	0000043e 	.word	0x0000043e

08001814 <__aeabi_dsub>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	4657      	mov	r7, sl
 8001818:	464e      	mov	r6, r9
 800181a:	4645      	mov	r5, r8
 800181c:	46de      	mov	lr, fp
 800181e:	000c      	movs	r4, r1
 8001820:	0309      	lsls	r1, r1, #12
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	0a49      	lsrs	r1, r1, #9
 8001826:	0f46      	lsrs	r6, r0, #29
 8001828:	005f      	lsls	r7, r3, #1
 800182a:	4331      	orrs	r1, r6
 800182c:	031e      	lsls	r6, r3, #12
 800182e:	0fdb      	lsrs	r3, r3, #31
 8001830:	0a76      	lsrs	r6, r6, #9
 8001832:	469b      	mov	fp, r3
 8001834:	0f53      	lsrs	r3, r2, #29
 8001836:	4333      	orrs	r3, r6
 8001838:	4ec8      	ldr	r6, [pc, #800]	; (8001b5c <__aeabi_dsub+0x348>)
 800183a:	0065      	lsls	r5, r4, #1
 800183c:	00c0      	lsls	r0, r0, #3
 800183e:	0fe4      	lsrs	r4, r4, #31
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	0d6d      	lsrs	r5, r5, #21
 8001844:	46a2      	mov	sl, r4
 8001846:	4681      	mov	r9, r0
 8001848:	0d7f      	lsrs	r7, r7, #21
 800184a:	469c      	mov	ip, r3
 800184c:	4690      	mov	r8, r2
 800184e:	42b7      	cmp	r7, r6
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x40>
 8001852:	e0b9      	b.n	80019c8 <__aeabi_dsub+0x1b4>
 8001854:	465b      	mov	r3, fp
 8001856:	2601      	movs	r6, #1
 8001858:	4073      	eors	r3, r6
 800185a:	469b      	mov	fp, r3
 800185c:	1bee      	subs	r6, r5, r7
 800185e:	45a3      	cmp	fp, r4
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x50>
 8001862:	e083      	b.n	800196c <__aeabi_dsub+0x158>
 8001864:	2e00      	cmp	r6, #0
 8001866:	dd63      	ble.n	8001930 <__aeabi_dsub+0x11c>
 8001868:	2f00      	cmp	r7, #0
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x5a>
 800186c:	e0b1      	b.n	80019d2 <__aeabi_dsub+0x1be>
 800186e:	4663      	mov	r3, ip
 8001870:	4313      	orrs	r3, r2
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x62>
 8001874:	e123      	b.n	8001abe <__aeabi_dsub+0x2aa>
 8001876:	1e73      	subs	r3, r6, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d000      	beq.n	800187e <__aeabi_dsub+0x6a>
 800187c:	e1ba      	b.n	8001bf4 <__aeabi_dsub+0x3e0>
 800187e:	1a86      	subs	r6, r0, r2
 8001880:	4663      	mov	r3, ip
 8001882:	42b0      	cmp	r0, r6
 8001884:	4180      	sbcs	r0, r0
 8001886:	2501      	movs	r5, #1
 8001888:	1ac9      	subs	r1, r1, r3
 800188a:	4240      	negs	r0, r0
 800188c:	1a09      	subs	r1, r1, r0
 800188e:	020b      	lsls	r3, r1, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dsub+0x80>
 8001892:	e147      	b.n	8001b24 <__aeabi_dsub+0x310>
 8001894:	0249      	lsls	r1, r1, #9
 8001896:	0a4b      	lsrs	r3, r1, #9
 8001898:	4698      	mov	r8, r3
 800189a:	4643      	mov	r3, r8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d100      	bne.n	80018a2 <__aeabi_dsub+0x8e>
 80018a0:	e189      	b.n	8001bb6 <__aeabi_dsub+0x3a2>
 80018a2:	4640      	mov	r0, r8
 80018a4:	f000 fc40 	bl	8002128 <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	3b08      	subs	r3, #8
 80018ac:	2b1f      	cmp	r3, #31
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0x9e>
 80018b0:	e17c      	b.n	8001bac <__aeabi_dsub+0x398>
 80018b2:	2220      	movs	r2, #32
 80018b4:	0030      	movs	r0, r6
 80018b6:	1ad2      	subs	r2, r2, r3
 80018b8:	4641      	mov	r1, r8
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	4099      	lsls	r1, r3
 80018be:	0002      	movs	r2, r0
 80018c0:	409e      	lsls	r6, r3
 80018c2:	430a      	orrs	r2, r1
 80018c4:	429d      	cmp	r5, r3
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dsub+0xb6>
 80018c8:	e16a      	b.n	8001ba0 <__aeabi_dsub+0x38c>
 80018ca:	1b5d      	subs	r5, r3, r5
 80018cc:	1c6b      	adds	r3, r5, #1
 80018ce:	2b1f      	cmp	r3, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0xc0>
 80018d2:	e194      	b.n	8001bfe <__aeabi_dsub+0x3ea>
 80018d4:	2120      	movs	r1, #32
 80018d6:	0010      	movs	r0, r2
 80018d8:	0035      	movs	r5, r6
 80018da:	1ac9      	subs	r1, r1, r3
 80018dc:	408e      	lsls	r6, r1
 80018de:	40da      	lsrs	r2, r3
 80018e0:	4088      	lsls	r0, r1
 80018e2:	40dd      	lsrs	r5, r3
 80018e4:	1e71      	subs	r1, r6, #1
 80018e6:	418e      	sbcs	r6, r1
 80018e8:	0011      	movs	r1, r2
 80018ea:	2207      	movs	r2, #7
 80018ec:	4328      	orrs	r0, r5
 80018ee:	2500      	movs	r5, #0
 80018f0:	4306      	orrs	r6, r0
 80018f2:	4032      	ands	r2, r6
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d009      	beq.n	800190c <__aeabi_dsub+0xf8>
 80018f8:	230f      	movs	r3, #15
 80018fa:	4033      	ands	r3, r6
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <__aeabi_dsub+0xf8>
 8001900:	1d33      	adds	r3, r6, #4
 8001902:	42b3      	cmp	r3, r6
 8001904:	41b6      	sbcs	r6, r6
 8001906:	4276      	negs	r6, r6
 8001908:	1989      	adds	r1, r1, r6
 800190a:	001e      	movs	r6, r3
 800190c:	020b      	lsls	r3, r1, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xfe>
 8001910:	e23d      	b.n	8001d8e <__aeabi_dsub+0x57a>
 8001912:	1c6a      	adds	r2, r5, #1
 8001914:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <__aeabi_dsub+0x348>)
 8001916:	0555      	lsls	r5, r2, #21
 8001918:	0d6d      	lsrs	r5, r5, #21
 800191a:	429a      	cmp	r2, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x10c>
 800191e:	e119      	b.n	8001b54 <__aeabi_dsub+0x340>
 8001920:	4a8f      	ldr	r2, [pc, #572]	; (8001b60 <__aeabi_dsub+0x34c>)
 8001922:	08f6      	lsrs	r6, r6, #3
 8001924:	400a      	ands	r2, r1
 8001926:	0757      	lsls	r7, r2, #29
 8001928:	0252      	lsls	r2, r2, #9
 800192a:	4337      	orrs	r7, r6
 800192c:	0b12      	lsrs	r2, r2, #12
 800192e:	e09b      	b.n	8001a68 <__aeabi_dsub+0x254>
 8001930:	2e00      	cmp	r6, #0
 8001932:	d000      	beq.n	8001936 <__aeabi_dsub+0x122>
 8001934:	e0c5      	b.n	8001ac2 <__aeabi_dsub+0x2ae>
 8001936:	1c6e      	adds	r6, r5, #1
 8001938:	0576      	lsls	r6, r6, #21
 800193a:	0d76      	lsrs	r6, r6, #21
 800193c:	2e01      	cmp	r6, #1
 800193e:	dc00      	bgt.n	8001942 <__aeabi_dsub+0x12e>
 8001940:	e148      	b.n	8001bd4 <__aeabi_dsub+0x3c0>
 8001942:	4667      	mov	r7, ip
 8001944:	1a86      	subs	r6, r0, r2
 8001946:	1bcb      	subs	r3, r1, r7
 8001948:	42b0      	cmp	r0, r6
 800194a:	41bf      	sbcs	r7, r7
 800194c:	427f      	negs	r7, r7
 800194e:	46b8      	mov	r8, r7
 8001950:	001f      	movs	r7, r3
 8001952:	4643      	mov	r3, r8
 8001954:	1aff      	subs	r7, r7, r3
 8001956:	003b      	movs	r3, r7
 8001958:	46b8      	mov	r8, r7
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	d500      	bpl.n	8001960 <__aeabi_dsub+0x14c>
 800195e:	e15f      	b.n	8001c20 <__aeabi_dsub+0x40c>
 8001960:	4337      	orrs	r7, r6
 8001962:	d19a      	bne.n	800189a <__aeabi_dsub+0x86>
 8001964:	2200      	movs	r2, #0
 8001966:	2400      	movs	r4, #0
 8001968:	2500      	movs	r5, #0
 800196a:	e079      	b.n	8001a60 <__aeabi_dsub+0x24c>
 800196c:	2e00      	cmp	r6, #0
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dsub+0x15e>
 8001970:	e0fa      	b.n	8001b68 <__aeabi_dsub+0x354>
 8001972:	2f00      	cmp	r7, #0
 8001974:	d100      	bne.n	8001978 <__aeabi_dsub+0x164>
 8001976:	e08d      	b.n	8001a94 <__aeabi_dsub+0x280>
 8001978:	4b78      	ldr	r3, [pc, #480]	; (8001b5c <__aeabi_dsub+0x348>)
 800197a:	429d      	cmp	r5, r3
 800197c:	d067      	beq.n	8001a4e <__aeabi_dsub+0x23a>
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	4667      	mov	r7, ip
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	431f      	orrs	r7, r3
 8001986:	46bc      	mov	ip, r7
 8001988:	2e38      	cmp	r6, #56	; 0x38
 800198a:	dc00      	bgt.n	800198e <__aeabi_dsub+0x17a>
 800198c:	e152      	b.n	8001c34 <__aeabi_dsub+0x420>
 800198e:	4663      	mov	r3, ip
 8001990:	4313      	orrs	r3, r2
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	4193      	sbcs	r3, r2
 8001996:	181e      	adds	r6, r3, r0
 8001998:	4286      	cmp	r6, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1809      	adds	r1, r1, r0
 80019a0:	020b      	lsls	r3, r1, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x192>
 80019a4:	e0be      	b.n	8001b24 <__aeabi_dsub+0x310>
 80019a6:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <__aeabi_dsub+0x348>)
 80019a8:	3501      	adds	r5, #1
 80019aa:	429d      	cmp	r5, r3
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x19c>
 80019ae:	e0d2      	b.n	8001b56 <__aeabi_dsub+0x342>
 80019b0:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <__aeabi_dsub+0x34c>)
 80019b2:	0873      	lsrs	r3, r6, #1
 80019b4:	400a      	ands	r2, r1
 80019b6:	2101      	movs	r1, #1
 80019b8:	400e      	ands	r6, r1
 80019ba:	431e      	orrs	r6, r3
 80019bc:	0851      	lsrs	r1, r2, #1
 80019be:	07d3      	lsls	r3, r2, #31
 80019c0:	2207      	movs	r2, #7
 80019c2:	431e      	orrs	r6, r3
 80019c4:	4032      	ands	r2, r6
 80019c6:	e795      	b.n	80018f4 <__aeabi_dsub+0xe0>
 80019c8:	001e      	movs	r6, r3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	d000      	beq.n	80019d0 <__aeabi_dsub+0x1bc>
 80019ce:	e745      	b.n	800185c <__aeabi_dsub+0x48>
 80019d0:	e740      	b.n	8001854 <__aeabi_dsub+0x40>
 80019d2:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <__aeabi_dsub+0x348>)
 80019d4:	429d      	cmp	r5, r3
 80019d6:	d03a      	beq.n	8001a4e <__aeabi_dsub+0x23a>
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	4667      	mov	r7, ip
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	431f      	orrs	r7, r3
 80019e0:	46bc      	mov	ip, r7
 80019e2:	2e38      	cmp	r6, #56	; 0x38
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dsub+0x1d4>
 80019e6:	e0eb      	b.n	8001bc0 <__aeabi_dsub+0x3ac>
 80019e8:	2e1f      	cmp	r6, #31
 80019ea:	dc00      	bgt.n	80019ee <__aeabi_dsub+0x1da>
 80019ec:	e13a      	b.n	8001c64 <__aeabi_dsub+0x450>
 80019ee:	0033      	movs	r3, r6
 80019f0:	4667      	mov	r7, ip
 80019f2:	3b20      	subs	r3, #32
 80019f4:	40df      	lsrs	r7, r3
 80019f6:	003b      	movs	r3, r7
 80019f8:	2e20      	cmp	r6, #32
 80019fa:	d005      	beq.n	8001a08 <__aeabi_dsub+0x1f4>
 80019fc:	2740      	movs	r7, #64	; 0x40
 80019fe:	1bbf      	subs	r7, r7, r6
 8001a00:	4666      	mov	r6, ip
 8001a02:	40be      	lsls	r6, r7
 8001a04:	4332      	orrs	r2, r6
 8001a06:	4690      	mov	r8, r2
 8001a08:	4646      	mov	r6, r8
 8001a0a:	1e72      	subs	r2, r6, #1
 8001a0c:	4196      	sbcs	r6, r2
 8001a0e:	4333      	orrs	r3, r6
 8001a10:	e0da      	b.n	8001bc8 <__aeabi_dsub+0x3b4>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x204>
 8001a16:	e214      	b.n	8001e42 <__aeabi_dsub+0x62e>
 8001a18:	4663      	mov	r3, ip
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x20c>
 8001a1e:	e168      	b.n	8001cf2 <__aeabi_dsub+0x4de>
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	074e      	lsls	r6, r1, #29
 8001a24:	08c0      	lsrs	r0, r0, #3
 8001a26:	08c9      	lsrs	r1, r1, #3
 8001a28:	031b      	lsls	r3, r3, #12
 8001a2a:	4306      	orrs	r6, r0
 8001a2c:	4219      	tst	r1, r3
 8001a2e:	d008      	beq.n	8001a42 <__aeabi_dsub+0x22e>
 8001a30:	4660      	mov	r0, ip
 8001a32:	08c0      	lsrs	r0, r0, #3
 8001a34:	4218      	tst	r0, r3
 8001a36:	d104      	bne.n	8001a42 <__aeabi_dsub+0x22e>
 8001a38:	4663      	mov	r3, ip
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	08d2      	lsrs	r2, r2, #3
 8001a3e:	075e      	lsls	r6, r3, #29
 8001a40:	4316      	orrs	r6, r2
 8001a42:	00f3      	lsls	r3, r6, #3
 8001a44:	4699      	mov	r9, r3
 8001a46:	00c9      	lsls	r1, r1, #3
 8001a48:	0f72      	lsrs	r2, r6, #29
 8001a4a:	4d44      	ldr	r5, [pc, #272]	; (8001b5c <__aeabi_dsub+0x348>)
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	464b      	mov	r3, r9
 8001a50:	08de      	lsrs	r6, r3, #3
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <__aeabi_dsub+0x348>)
 8001a54:	074f      	lsls	r7, r1, #29
 8001a56:	4337      	orrs	r7, r6
 8001a58:	08ca      	lsrs	r2, r1, #3
 8001a5a:	429d      	cmp	r5, r3
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x24c>
 8001a5e:	e06e      	b.n	8001b3e <__aeabi_dsub+0x32a>
 8001a60:	0312      	lsls	r2, r2, #12
 8001a62:	056d      	lsls	r5, r5, #21
 8001a64:	0b12      	lsrs	r2, r2, #12
 8001a66:	0d6d      	lsrs	r5, r5, #21
 8001a68:	2100      	movs	r1, #0
 8001a6a:	0312      	lsls	r2, r2, #12
 8001a6c:	0b13      	lsrs	r3, r2, #12
 8001a6e:	0d0a      	lsrs	r2, r1, #20
 8001a70:	0512      	lsls	r2, r2, #20
 8001a72:	431a      	orrs	r2, r3
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <__aeabi_dsub+0x350>)
 8001a76:	052d      	lsls	r5, r5, #20
 8001a78:	4013      	ands	r3, r2
 8001a7a:	432b      	orrs	r3, r5
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	07e4      	lsls	r4, r4, #31
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	4323      	orrs	r3, r4
 8001a84:	0038      	movs	r0, r7
 8001a86:	0019      	movs	r1, r3
 8001a88:	bc3c      	pop	{r2, r3, r4, r5}
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	46a2      	mov	sl, r4
 8001a90:	46ab      	mov	fp, r5
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a94:	4663      	mov	r3, ip
 8001a96:	4313      	orrs	r3, r2
 8001a98:	d011      	beq.n	8001abe <__aeabi_dsub+0x2aa>
 8001a9a:	1e73      	subs	r3, r6, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dsub+0x28e>
 8001aa0:	e107      	b.n	8001cb2 <__aeabi_dsub+0x49e>
 8001aa2:	1886      	adds	r6, r0, r2
 8001aa4:	4286      	cmp	r6, r0
 8001aa6:	4180      	sbcs	r0, r0
 8001aa8:	4461      	add	r1, ip
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1809      	adds	r1, r1, r0
 8001aae:	2501      	movs	r5, #1
 8001ab0:	020b      	lsls	r3, r1, #8
 8001ab2:	d537      	bpl.n	8001b24 <__aeabi_dsub+0x310>
 8001ab4:	2502      	movs	r5, #2
 8001ab6:	e77b      	b.n	80019b0 <__aeabi_dsub+0x19c>
 8001ab8:	003e      	movs	r6, r7
 8001aba:	4661      	mov	r1, ip
 8001abc:	4691      	mov	r9, r2
 8001abe:	0035      	movs	r5, r6
 8001ac0:	e7c5      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001ac2:	465c      	mov	r4, fp
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x2b6>
 8001ac8:	e0e1      	b.n	8001c8e <__aeabi_dsub+0x47a>
 8001aca:	000b      	movs	r3, r1
 8001acc:	4303      	orrs	r3, r0
 8001ace:	d0f3      	beq.n	8001ab8 <__aeabi_dsub+0x2a4>
 8001ad0:	1c73      	adds	r3, r6, #1
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x2c2>
 8001ad4:	e1ac      	b.n	8001e30 <__aeabi_dsub+0x61c>
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <__aeabi_dsub+0x348>)
 8001ad8:	429f      	cmp	r7, r3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x2ca>
 8001adc:	e13a      	b.n	8001d54 <__aeabi_dsub+0x540>
 8001ade:	43f3      	mvns	r3, r6
 8001ae0:	2b38      	cmp	r3, #56	; 0x38
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dsub+0x2d2>
 8001ae4:	e16f      	b.n	8001dc6 <__aeabi_dsub+0x5b2>
 8001ae6:	2b1f      	cmp	r3, #31
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dsub+0x2d8>
 8001aea:	e18c      	b.n	8001e06 <__aeabi_dsub+0x5f2>
 8001aec:	2520      	movs	r5, #32
 8001aee:	000e      	movs	r6, r1
 8001af0:	1aed      	subs	r5, r5, r3
 8001af2:	40ae      	lsls	r6, r5
 8001af4:	46b0      	mov	r8, r6
 8001af6:	0006      	movs	r6, r0
 8001af8:	46aa      	mov	sl, r5
 8001afa:	40de      	lsrs	r6, r3
 8001afc:	4645      	mov	r5, r8
 8001afe:	4335      	orrs	r5, r6
 8001b00:	002e      	movs	r6, r5
 8001b02:	4655      	mov	r5, sl
 8001b04:	40d9      	lsrs	r1, r3
 8001b06:	40a8      	lsls	r0, r5
 8001b08:	4663      	mov	r3, ip
 8001b0a:	1e45      	subs	r5, r0, #1
 8001b0c:	41a8      	sbcs	r0, r5
 8001b0e:	1a5b      	subs	r3, r3, r1
 8001b10:	469c      	mov	ip, r3
 8001b12:	4330      	orrs	r0, r6
 8001b14:	1a16      	subs	r6, r2, r0
 8001b16:	42b2      	cmp	r2, r6
 8001b18:	4192      	sbcs	r2, r2
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	4252      	negs	r2, r2
 8001b1e:	1a99      	subs	r1, r3, r2
 8001b20:	003d      	movs	r5, r7
 8001b22:	e6b4      	b.n	800188e <__aeabi_dsub+0x7a>
 8001b24:	2207      	movs	r2, #7
 8001b26:	4032      	ands	r2, r6
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d000      	beq.n	8001b2e <__aeabi_dsub+0x31a>
 8001b2c:	e6e4      	b.n	80018f8 <__aeabi_dsub+0xe4>
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <__aeabi_dsub+0x348>)
 8001b30:	08f6      	lsrs	r6, r6, #3
 8001b32:	074f      	lsls	r7, r1, #29
 8001b34:	4337      	orrs	r7, r6
 8001b36:	08ca      	lsrs	r2, r1, #3
 8001b38:	429d      	cmp	r5, r3
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_dsub+0x32a>
 8001b3c:	e790      	b.n	8001a60 <__aeabi_dsub+0x24c>
 8001b3e:	003b      	movs	r3, r7
 8001b40:	4313      	orrs	r3, r2
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x332>
 8001b44:	e1a6      	b.n	8001e94 <__aeabi_dsub+0x680>
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	031b      	lsls	r3, r3, #12
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	0312      	lsls	r2, r2, #12
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	4d02      	ldr	r5, [pc, #8]	; (8001b5c <__aeabi_dsub+0x348>)
 8001b52:	e789      	b.n	8001a68 <__aeabi_dsub+0x254>
 8001b54:	0015      	movs	r5, r2
 8001b56:	2200      	movs	r2, #0
 8001b58:	2700      	movs	r7, #0
 8001b5a:	e785      	b.n	8001a68 <__aeabi_dsub+0x254>
 8001b5c:	000007ff 	.word	0x000007ff
 8001b60:	ff7fffff 	.word	0xff7fffff
 8001b64:	800fffff 	.word	0x800fffff
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_dsub+0x35a>
 8001b6c:	e0c7      	b.n	8001cfe <__aeabi_dsub+0x4ea>
 8001b6e:	1c6b      	adds	r3, r5, #1
 8001b70:	055e      	lsls	r6, r3, #21
 8001b72:	0d76      	lsrs	r6, r6, #21
 8001b74:	2e01      	cmp	r6, #1
 8001b76:	dc00      	bgt.n	8001b7a <__aeabi_dsub+0x366>
 8001b78:	e0f0      	b.n	8001d5c <__aeabi_dsub+0x548>
 8001b7a:	4dc8      	ldr	r5, [pc, #800]	; (8001e9c <__aeabi_dsub+0x688>)
 8001b7c:	42ab      	cmp	r3, r5
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x36e>
 8001b80:	e0b9      	b.n	8001cf6 <__aeabi_dsub+0x4e2>
 8001b82:	1885      	adds	r5, r0, r2
 8001b84:	000a      	movs	r2, r1
 8001b86:	4285      	cmp	r5, r0
 8001b88:	4189      	sbcs	r1, r1
 8001b8a:	4462      	add	r2, ip
 8001b8c:	4249      	negs	r1, r1
 8001b8e:	1851      	adds	r1, r2, r1
 8001b90:	2207      	movs	r2, #7
 8001b92:	07ce      	lsls	r6, r1, #31
 8001b94:	086d      	lsrs	r5, r5, #1
 8001b96:	432e      	orrs	r6, r5
 8001b98:	0849      	lsrs	r1, r1, #1
 8001b9a:	4032      	ands	r2, r6
 8001b9c:	001d      	movs	r5, r3
 8001b9e:	e6a9      	b.n	80018f4 <__aeabi_dsub+0xe0>
 8001ba0:	49bf      	ldr	r1, [pc, #764]	; (8001ea0 <__aeabi_dsub+0x68c>)
 8001ba2:	1aed      	subs	r5, r5, r3
 8001ba4:	4011      	ands	r1, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	4032      	ands	r2, r6
 8001baa:	e6a3      	b.n	80018f4 <__aeabi_dsub+0xe0>
 8001bac:	0032      	movs	r2, r6
 8001bae:	3828      	subs	r0, #40	; 0x28
 8001bb0:	4082      	lsls	r2, r0
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	e686      	b.n	80018c4 <__aeabi_dsub+0xb0>
 8001bb6:	0030      	movs	r0, r6
 8001bb8:	f000 fab6 	bl	8002128 <__clzsi2>
 8001bbc:	3020      	adds	r0, #32
 8001bbe:	e673      	b.n	80018a8 <__aeabi_dsub+0x94>
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	4193      	sbcs	r3, r2
 8001bc8:	1ac6      	subs	r6, r0, r3
 8001bca:	42b0      	cmp	r0, r6
 8001bcc:	4180      	sbcs	r0, r0
 8001bce:	4240      	negs	r0, r0
 8001bd0:	1a09      	subs	r1, r1, r0
 8001bd2:	e65c      	b.n	800188e <__aeabi_dsub+0x7a>
 8001bd4:	000e      	movs	r6, r1
 8001bd6:	4667      	mov	r7, ip
 8001bd8:	4306      	orrs	r6, r0
 8001bda:	4317      	orrs	r7, r2
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	d15e      	bne.n	8001c9e <__aeabi_dsub+0x48a>
 8001be0:	2e00      	cmp	r6, #0
 8001be2:	d000      	beq.n	8001be6 <__aeabi_dsub+0x3d2>
 8001be4:	e0f3      	b.n	8001dce <__aeabi_dsub+0x5ba>
 8001be6:	2f00      	cmp	r7, #0
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x3d8>
 8001bea:	e11e      	b.n	8001e2a <__aeabi_dsub+0x616>
 8001bec:	465c      	mov	r4, fp
 8001bee:	4661      	mov	r1, ip
 8001bf0:	4691      	mov	r9, r2
 8001bf2:	e72c      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001bf4:	4fa9      	ldr	r7, [pc, #676]	; (8001e9c <__aeabi_dsub+0x688>)
 8001bf6:	42be      	cmp	r6, r7
 8001bf8:	d07b      	beq.n	8001cf2 <__aeabi_dsub+0x4de>
 8001bfa:	001e      	movs	r6, r3
 8001bfc:	e6f1      	b.n	80019e2 <__aeabi_dsub+0x1ce>
 8001bfe:	0010      	movs	r0, r2
 8001c00:	3d1f      	subs	r5, #31
 8001c02:	40e8      	lsrs	r0, r5
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d003      	beq.n	8001c10 <__aeabi_dsub+0x3fc>
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	4316      	orrs	r6, r2
 8001c10:	1e73      	subs	r3, r6, #1
 8001c12:	419e      	sbcs	r6, r3
 8001c14:	2207      	movs	r2, #7
 8001c16:	4306      	orrs	r6, r0
 8001c18:	4032      	ands	r2, r6
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2500      	movs	r5, #0
 8001c1e:	e783      	b.n	8001b28 <__aeabi_dsub+0x314>
 8001c20:	1a16      	subs	r6, r2, r0
 8001c22:	4663      	mov	r3, ip
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	4180      	sbcs	r0, r0
 8001c28:	1a59      	subs	r1, r3, r1
 8001c2a:	4240      	negs	r0, r0
 8001c2c:	1a0b      	subs	r3, r1, r0
 8001c2e:	4698      	mov	r8, r3
 8001c30:	465c      	mov	r4, fp
 8001c32:	e632      	b.n	800189a <__aeabi_dsub+0x86>
 8001c34:	2e1f      	cmp	r6, #31
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_dsub+0x426>
 8001c38:	e0ab      	b.n	8001d92 <__aeabi_dsub+0x57e>
 8001c3a:	2720      	movs	r7, #32
 8001c3c:	1bbb      	subs	r3, r7, r6
 8001c3e:	469a      	mov	sl, r3
 8001c40:	4663      	mov	r3, ip
 8001c42:	4657      	mov	r7, sl
 8001c44:	40bb      	lsls	r3, r7
 8001c46:	4699      	mov	r9, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	464f      	mov	r7, r9
 8001c4c:	40f3      	lsrs	r3, r6
 8001c4e:	431f      	orrs	r7, r3
 8001c50:	003b      	movs	r3, r7
 8001c52:	4657      	mov	r7, sl
 8001c54:	40ba      	lsls	r2, r7
 8001c56:	1e57      	subs	r7, r2, #1
 8001c58:	41ba      	sbcs	r2, r7
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	4662      	mov	r2, ip
 8001c5e:	40f2      	lsrs	r2, r6
 8001c60:	1889      	adds	r1, r1, r2
 8001c62:	e698      	b.n	8001996 <__aeabi_dsub+0x182>
 8001c64:	2720      	movs	r7, #32
 8001c66:	1bbb      	subs	r3, r7, r6
 8001c68:	469a      	mov	sl, r3
 8001c6a:	4663      	mov	r3, ip
 8001c6c:	4657      	mov	r7, sl
 8001c6e:	40bb      	lsls	r3, r7
 8001c70:	4699      	mov	r9, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	464f      	mov	r7, r9
 8001c76:	40f3      	lsrs	r3, r6
 8001c78:	431f      	orrs	r7, r3
 8001c7a:	003b      	movs	r3, r7
 8001c7c:	4657      	mov	r7, sl
 8001c7e:	40ba      	lsls	r2, r7
 8001c80:	1e57      	subs	r7, r2, #1
 8001c82:	41ba      	sbcs	r2, r7
 8001c84:	4313      	orrs	r3, r2
 8001c86:	4662      	mov	r2, ip
 8001c88:	40f2      	lsrs	r2, r6
 8001c8a:	1a89      	subs	r1, r1, r2
 8001c8c:	e79c      	b.n	8001bc8 <__aeabi_dsub+0x3b4>
 8001c8e:	4b83      	ldr	r3, [pc, #524]	; (8001e9c <__aeabi_dsub+0x688>)
 8001c90:	429f      	cmp	r7, r3
 8001c92:	d05f      	beq.n	8001d54 <__aeabi_dsub+0x540>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	042d      	lsls	r5, r5, #16
 8001c98:	4273      	negs	r3, r6
 8001c9a:	4329      	orrs	r1, r5
 8001c9c:	e720      	b.n	8001ae0 <__aeabi_dsub+0x2cc>
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	d10c      	bne.n	8001cbc <__aeabi_dsub+0x4a8>
 8001ca2:	2f00      	cmp	r7, #0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x494>
 8001ca6:	e0d0      	b.n	8001e4a <__aeabi_dsub+0x636>
 8001ca8:	465c      	mov	r4, fp
 8001caa:	4661      	mov	r1, ip
 8001cac:	4691      	mov	r9, r2
 8001cae:	4d7b      	ldr	r5, [pc, #492]	; (8001e9c <__aeabi_dsub+0x688>)
 8001cb0:	e6cd      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001cb2:	4f7a      	ldr	r7, [pc, #488]	; (8001e9c <__aeabi_dsub+0x688>)
 8001cb4:	42be      	cmp	r6, r7
 8001cb6:	d01c      	beq.n	8001cf2 <__aeabi_dsub+0x4de>
 8001cb8:	001e      	movs	r6, r3
 8001cba:	e665      	b.n	8001988 <__aeabi_dsub+0x174>
 8001cbc:	2f00      	cmp	r7, #0
 8001cbe:	d018      	beq.n	8001cf2 <__aeabi_dsub+0x4de>
 8001cc0:	08c0      	lsrs	r0, r0, #3
 8001cc2:	074e      	lsls	r6, r1, #29
 8001cc4:	4306      	orrs	r6, r0
 8001cc6:	2080      	movs	r0, #128	; 0x80
 8001cc8:	08c9      	lsrs	r1, r1, #3
 8001cca:	0300      	lsls	r0, r0, #12
 8001ccc:	4201      	tst	r1, r0
 8001cce:	d008      	beq.n	8001ce2 <__aeabi_dsub+0x4ce>
 8001cd0:	4663      	mov	r3, ip
 8001cd2:	08dc      	lsrs	r4, r3, #3
 8001cd4:	4204      	tst	r4, r0
 8001cd6:	d104      	bne.n	8001ce2 <__aeabi_dsub+0x4ce>
 8001cd8:	0021      	movs	r1, r4
 8001cda:	46da      	mov	sl, fp
 8001cdc:	08d2      	lsrs	r2, r2, #3
 8001cde:	075e      	lsls	r6, r3, #29
 8001ce0:	4316      	orrs	r6, r2
 8001ce2:	00f3      	lsls	r3, r6, #3
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	2401      	movs	r4, #1
 8001ce8:	4653      	mov	r3, sl
 8001cea:	00c9      	lsls	r1, r1, #3
 8001cec:	0f72      	lsrs	r2, r6, #29
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	401c      	ands	r4, r3
 8001cf2:	4d6a      	ldr	r5, [pc, #424]	; (8001e9c <__aeabi_dsub+0x688>)
 8001cf4:	e6ab      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001cf6:	001d      	movs	r5, r3
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2700      	movs	r7, #0
 8001cfc:	e6b4      	b.n	8001a68 <__aeabi_dsub+0x254>
 8001cfe:	2d00      	cmp	r5, #0
 8001d00:	d159      	bne.n	8001db6 <__aeabi_dsub+0x5a2>
 8001d02:	000b      	movs	r3, r1
 8001d04:	4303      	orrs	r3, r0
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x4f6>
 8001d08:	e6d6      	b.n	8001ab8 <__aeabi_dsub+0x2a4>
 8001d0a:	1c73      	adds	r3, r6, #1
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x4fc>
 8001d0e:	e0b2      	b.n	8001e76 <__aeabi_dsub+0x662>
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <__aeabi_dsub+0x688>)
 8001d12:	429f      	cmp	r7, r3
 8001d14:	d01e      	beq.n	8001d54 <__aeabi_dsub+0x540>
 8001d16:	43f3      	mvns	r3, r6
 8001d18:	2b38      	cmp	r3, #56	; 0x38
 8001d1a:	dc6f      	bgt.n	8001dfc <__aeabi_dsub+0x5e8>
 8001d1c:	2b1f      	cmp	r3, #31
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0x50e>
 8001d20:	e097      	b.n	8001e52 <__aeabi_dsub+0x63e>
 8001d22:	2520      	movs	r5, #32
 8001d24:	000e      	movs	r6, r1
 8001d26:	1aed      	subs	r5, r5, r3
 8001d28:	40ae      	lsls	r6, r5
 8001d2a:	46b0      	mov	r8, r6
 8001d2c:	0006      	movs	r6, r0
 8001d2e:	46aa      	mov	sl, r5
 8001d30:	40de      	lsrs	r6, r3
 8001d32:	4645      	mov	r5, r8
 8001d34:	4335      	orrs	r5, r6
 8001d36:	002e      	movs	r6, r5
 8001d38:	4655      	mov	r5, sl
 8001d3a:	40a8      	lsls	r0, r5
 8001d3c:	40d9      	lsrs	r1, r3
 8001d3e:	1e45      	subs	r5, r0, #1
 8001d40:	41a8      	sbcs	r0, r5
 8001d42:	448c      	add	ip, r1
 8001d44:	4306      	orrs	r6, r0
 8001d46:	18b6      	adds	r6, r6, r2
 8001d48:	4296      	cmp	r6, r2
 8001d4a:	4192      	sbcs	r2, r2
 8001d4c:	4251      	negs	r1, r2
 8001d4e:	4461      	add	r1, ip
 8001d50:	003d      	movs	r5, r7
 8001d52:	e625      	b.n	80019a0 <__aeabi_dsub+0x18c>
 8001d54:	003d      	movs	r5, r7
 8001d56:	4661      	mov	r1, ip
 8001d58:	4691      	mov	r9, r2
 8001d5a:	e678      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001d5c:	000b      	movs	r3, r1
 8001d5e:	4303      	orrs	r3, r0
 8001d60:	2d00      	cmp	r5, #0
 8001d62:	d000      	beq.n	8001d66 <__aeabi_dsub+0x552>
 8001d64:	e655      	b.n	8001a12 <__aeabi_dsub+0x1fe>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f5      	beq.n	8001d56 <__aeabi_dsub+0x542>
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x55e>
 8001d70:	e66d      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001d72:	1886      	adds	r6, r0, r2
 8001d74:	4286      	cmp	r6, r0
 8001d76:	4180      	sbcs	r0, r0
 8001d78:	4461      	add	r1, ip
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	1809      	adds	r1, r1, r0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	020b      	lsls	r3, r1, #8
 8001d82:	d400      	bmi.n	8001d86 <__aeabi_dsub+0x572>
 8001d84:	e6d0      	b.n	8001b28 <__aeabi_dsub+0x314>
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <__aeabi_dsub+0x68c>)
 8001d88:	3501      	adds	r5, #1
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	e5b2      	b.n	80018f4 <__aeabi_dsub+0xe0>
 8001d8e:	46b1      	mov	r9, r6
 8001d90:	e65d      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001d92:	0033      	movs	r3, r6
 8001d94:	4667      	mov	r7, ip
 8001d96:	3b20      	subs	r3, #32
 8001d98:	40df      	lsrs	r7, r3
 8001d9a:	003b      	movs	r3, r7
 8001d9c:	2e20      	cmp	r6, #32
 8001d9e:	d005      	beq.n	8001dac <__aeabi_dsub+0x598>
 8001da0:	2740      	movs	r7, #64	; 0x40
 8001da2:	1bbf      	subs	r7, r7, r6
 8001da4:	4666      	mov	r6, ip
 8001da6:	40be      	lsls	r6, r7
 8001da8:	4332      	orrs	r2, r6
 8001daa:	4690      	mov	r8, r2
 8001dac:	4646      	mov	r6, r8
 8001dae:	1e72      	subs	r2, r6, #1
 8001db0:	4196      	sbcs	r6, r2
 8001db2:	4333      	orrs	r3, r6
 8001db4:	e5ef      	b.n	8001996 <__aeabi_dsub+0x182>
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <__aeabi_dsub+0x688>)
 8001db8:	429f      	cmp	r7, r3
 8001dba:	d0cb      	beq.n	8001d54 <__aeabi_dsub+0x540>
 8001dbc:	2580      	movs	r5, #128	; 0x80
 8001dbe:	042d      	lsls	r5, r5, #16
 8001dc0:	4273      	negs	r3, r6
 8001dc2:	4329      	orrs	r1, r5
 8001dc4:	e7a8      	b.n	8001d18 <__aeabi_dsub+0x504>
 8001dc6:	4308      	orrs	r0, r1
 8001dc8:	1e41      	subs	r1, r0, #1
 8001dca:	4188      	sbcs	r0, r1
 8001dcc:	e6a2      	b.n	8001b14 <__aeabi_dsub+0x300>
 8001dce:	2f00      	cmp	r7, #0
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x5c0>
 8001dd2:	e63c      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	1a86      	subs	r6, r0, r2
 8001dd8:	1acf      	subs	r7, r1, r3
 8001dda:	42b0      	cmp	r0, r6
 8001ddc:	419b      	sbcs	r3, r3
 8001dde:	425b      	negs	r3, r3
 8001de0:	1afb      	subs	r3, r7, r3
 8001de2:	4698      	mov	r8, r3
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	d54e      	bpl.n	8001e86 <__aeabi_dsub+0x672>
 8001de8:	1a16      	subs	r6, r2, r0
 8001dea:	4663      	mov	r3, ip
 8001dec:	42b2      	cmp	r2, r6
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a59      	subs	r1, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a89      	subs	r1, r1, r2
 8001df6:	465c      	mov	r4, fp
 8001df8:	2200      	movs	r2, #0
 8001dfa:	e57b      	b.n	80018f4 <__aeabi_dsub+0xe0>
 8001dfc:	4301      	orrs	r1, r0
 8001dfe:	000e      	movs	r6, r1
 8001e00:	1e71      	subs	r1, r6, #1
 8001e02:	418e      	sbcs	r6, r1
 8001e04:	e79f      	b.n	8001d46 <__aeabi_dsub+0x532>
 8001e06:	001d      	movs	r5, r3
 8001e08:	000e      	movs	r6, r1
 8001e0a:	3d20      	subs	r5, #32
 8001e0c:	40ee      	lsrs	r6, r5
 8001e0e:	46b0      	mov	r8, r6
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d004      	beq.n	8001e1e <__aeabi_dsub+0x60a>
 8001e14:	2540      	movs	r5, #64	; 0x40
 8001e16:	1aeb      	subs	r3, r5, r3
 8001e18:	4099      	lsls	r1, r3
 8001e1a:	4308      	orrs	r0, r1
 8001e1c:	4681      	mov	r9, r0
 8001e1e:	4648      	mov	r0, r9
 8001e20:	4643      	mov	r3, r8
 8001e22:	1e41      	subs	r1, r0, #1
 8001e24:	4188      	sbcs	r0, r1
 8001e26:	4318      	orrs	r0, r3
 8001e28:	e674      	b.n	8001b14 <__aeabi_dsub+0x300>
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	e617      	b.n	8001a60 <__aeabi_dsub+0x24c>
 8001e30:	1a16      	subs	r6, r2, r0
 8001e32:	4663      	mov	r3, ip
 8001e34:	42b2      	cmp	r2, r6
 8001e36:	4192      	sbcs	r2, r2
 8001e38:	1a59      	subs	r1, r3, r1
 8001e3a:	4252      	negs	r2, r2
 8001e3c:	1a89      	subs	r1, r1, r2
 8001e3e:	003d      	movs	r5, r7
 8001e40:	e525      	b.n	800188e <__aeabi_dsub+0x7a>
 8001e42:	4661      	mov	r1, ip
 8001e44:	4691      	mov	r9, r2
 8001e46:	4d15      	ldr	r5, [pc, #84]	; (8001e9c <__aeabi_dsub+0x688>)
 8001e48:	e601      	b.n	8001a4e <__aeabi_dsub+0x23a>
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	0312      	lsls	r2, r2, #12
 8001e50:	e679      	b.n	8001b46 <__aeabi_dsub+0x332>
 8001e52:	001d      	movs	r5, r3
 8001e54:	000e      	movs	r6, r1
 8001e56:	3d20      	subs	r5, #32
 8001e58:	40ee      	lsrs	r6, r5
 8001e5a:	46b0      	mov	r8, r6
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d004      	beq.n	8001e6a <__aeabi_dsub+0x656>
 8001e60:	2540      	movs	r5, #64	; 0x40
 8001e62:	1aeb      	subs	r3, r5, r3
 8001e64:	4099      	lsls	r1, r3
 8001e66:	4308      	orrs	r0, r1
 8001e68:	4681      	mov	r9, r0
 8001e6a:	464e      	mov	r6, r9
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	1e71      	subs	r1, r6, #1
 8001e70:	418e      	sbcs	r6, r1
 8001e72:	431e      	orrs	r6, r3
 8001e74:	e767      	b.n	8001d46 <__aeabi_dsub+0x532>
 8001e76:	1886      	adds	r6, r0, r2
 8001e78:	4296      	cmp	r6, r2
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	4461      	add	r1, ip
 8001e7e:	425b      	negs	r3, r3
 8001e80:	18c9      	adds	r1, r1, r3
 8001e82:	003d      	movs	r5, r7
 8001e84:	e58c      	b.n	80019a0 <__aeabi_dsub+0x18c>
 8001e86:	4647      	mov	r7, r8
 8001e88:	4337      	orrs	r7, r6
 8001e8a:	d0ce      	beq.n	8001e2a <__aeabi_dsub+0x616>
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	4641      	mov	r1, r8
 8001e90:	4032      	ands	r2, r6
 8001e92:	e649      	b.n	8001b28 <__aeabi_dsub+0x314>
 8001e94:	2700      	movs	r7, #0
 8001e96:	003a      	movs	r2, r7
 8001e98:	e5e6      	b.n	8001a68 <__aeabi_dsub+0x254>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	ff7fffff 	.word	0xff7fffff

08001ea4 <__aeabi_dcmpun>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	4e0c      	ldr	r6, [pc, #48]	; (8001ed8 <__aeabi_dcmpun+0x34>)
 8001ea8:	030d      	lsls	r5, r1, #12
 8001eaa:	031c      	lsls	r4, r3, #12
 8001eac:	0049      	lsls	r1, r1, #1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	0b2d      	lsrs	r5, r5, #12
 8001eb2:	0d49      	lsrs	r1, r1, #21
 8001eb4:	0b24      	lsrs	r4, r4, #12
 8001eb6:	0d5b      	lsrs	r3, r3, #21
 8001eb8:	42b1      	cmp	r1, r6
 8001eba:	d008      	beq.n	8001ece <__aeabi_dcmpun+0x2a>
 8001ebc:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <__aeabi_dcmpun+0x34>)
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d103      	bne.n	8001ecc <__aeabi_dcmpun+0x28>
 8001ec4:	4314      	orrs	r4, r2
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	1e44      	subs	r4, r0, #1
 8001eca:	41a0      	sbcs	r0, r4
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
 8001ece:	4305      	orrs	r5, r0
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	2d00      	cmp	r5, #0
 8001ed4:	d1fa      	bne.n	8001ecc <__aeabi_dcmpun+0x28>
 8001ed6:	e7f1      	b.n	8001ebc <__aeabi_dcmpun+0x18>
 8001ed8:	000007ff 	.word	0x000007ff

08001edc <__aeabi_d2iz>:
 8001edc:	b530      	push	{r4, r5, lr}
 8001ede:	4d14      	ldr	r5, [pc, #80]	; (8001f30 <__aeabi_d2iz+0x54>)
 8001ee0:	030a      	lsls	r2, r1, #12
 8001ee2:	004b      	lsls	r3, r1, #1
 8001ee4:	0b12      	lsrs	r2, r2, #12
 8001ee6:	0d5b      	lsrs	r3, r3, #21
 8001ee8:	0fc9      	lsrs	r1, r1, #31
 8001eea:	2400      	movs	r4, #0
 8001eec:	42ab      	cmp	r3, r5
 8001eee:	dd11      	ble.n	8001f14 <__aeabi_d2iz+0x38>
 8001ef0:	4c10      	ldr	r4, [pc, #64]	; (8001f34 <__aeabi_d2iz+0x58>)
 8001ef2:	42a3      	cmp	r3, r4
 8001ef4:	dc10      	bgt.n	8001f18 <__aeabi_d2iz+0x3c>
 8001ef6:	2480      	movs	r4, #128	; 0x80
 8001ef8:	0364      	lsls	r4, r4, #13
 8001efa:	4322      	orrs	r2, r4
 8001efc:	4c0e      	ldr	r4, [pc, #56]	; (8001f38 <__aeabi_d2iz+0x5c>)
 8001efe:	1ae4      	subs	r4, r4, r3
 8001f00:	2c1f      	cmp	r4, #31
 8001f02:	dd0c      	ble.n	8001f1e <__aeabi_d2iz+0x42>
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <__aeabi_d2iz+0x60>)
 8001f06:	1ac3      	subs	r3, r0, r3
 8001f08:	40da      	lsrs	r2, r3
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	425c      	negs	r4, r3
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d100      	bne.n	8001f14 <__aeabi_d2iz+0x38>
 8001f12:	001c      	movs	r4, r3
 8001f14:	0020      	movs	r0, r4
 8001f16:	bd30      	pop	{r4, r5, pc}
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <__aeabi_d2iz+0x64>)
 8001f1a:	18cc      	adds	r4, r1, r3
 8001f1c:	e7fa      	b.n	8001f14 <__aeabi_d2iz+0x38>
 8001f1e:	4d09      	ldr	r5, [pc, #36]	; (8001f44 <__aeabi_d2iz+0x68>)
 8001f20:	40e0      	lsrs	r0, r4
 8001f22:	46ac      	mov	ip, r5
 8001f24:	4463      	add	r3, ip
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	4303      	orrs	r3, r0
 8001f2c:	e7ee      	b.n	8001f0c <__aeabi_d2iz+0x30>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000003fe 	.word	0x000003fe
 8001f34:	0000041d 	.word	0x0000041d
 8001f38:	00000433 	.word	0x00000433
 8001f3c:	00000413 	.word	0x00000413
 8001f40:	7fffffff 	.word	0x7fffffff
 8001f44:	fffffbed 	.word	0xfffffbed

08001f48 <__aeabi_i2d>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d02d      	beq.n	8001faa <__aeabi_i2d+0x62>
 8001f4e:	17c3      	asrs	r3, r0, #31
 8001f50:	18c5      	adds	r5, r0, r3
 8001f52:	405d      	eors	r5, r3
 8001f54:	0fc4      	lsrs	r4, r0, #31
 8001f56:	0028      	movs	r0, r5
 8001f58:	f000 f8e6 	bl	8002128 <__clzsi2>
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <__aeabi_i2d+0x6c>)
 8001f5e:	1a1b      	subs	r3, r3, r0
 8001f60:	055b      	lsls	r3, r3, #21
 8001f62:	0d5b      	lsrs	r3, r3, #21
 8001f64:	280a      	cmp	r0, #10
 8001f66:	dd15      	ble.n	8001f94 <__aeabi_i2d+0x4c>
 8001f68:	380b      	subs	r0, #11
 8001f6a:	4085      	lsls	r5, r0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	032d      	lsls	r5, r5, #12
 8001f70:	0b2d      	lsrs	r5, r5, #12
 8001f72:	2100      	movs	r1, #0
 8001f74:	0010      	movs	r0, r2
 8001f76:	032d      	lsls	r5, r5, #12
 8001f78:	0d0a      	lsrs	r2, r1, #20
 8001f7a:	0b2d      	lsrs	r5, r5, #12
 8001f7c:	0512      	lsls	r2, r2, #20
 8001f7e:	432a      	orrs	r2, r5
 8001f80:	4d0d      	ldr	r5, [pc, #52]	; (8001fb8 <__aeabi_i2d+0x70>)
 8001f82:	051b      	lsls	r3, r3, #20
 8001f84:	402a      	ands	r2, r5
 8001f86:	4313      	orrs	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	07e4      	lsls	r4, r4, #31
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	0019      	movs	r1, r3
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	0002      	movs	r2, r0
 8001f96:	0029      	movs	r1, r5
 8001f98:	3215      	adds	r2, #21
 8001f9a:	4091      	lsls	r1, r2
 8001f9c:	000a      	movs	r2, r1
 8001f9e:	210b      	movs	r1, #11
 8001fa0:	1a08      	subs	r0, r1, r0
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	032d      	lsls	r5, r5, #12
 8001fa6:	0b2d      	lsrs	r5, r5, #12
 8001fa8:	e7e3      	b.n	8001f72 <__aeabi_i2d+0x2a>
 8001faa:	2400      	movs	r4, #0
 8001fac:	2300      	movs	r3, #0
 8001fae:	2500      	movs	r5, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	e7de      	b.n	8001f72 <__aeabi_i2d+0x2a>
 8001fb4:	0000041e 	.word	0x0000041e
 8001fb8:	800fffff 	.word	0x800fffff

08001fbc <__aeabi_ui2d>:
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	1e04      	subs	r4, r0, #0
 8001fc0:	d025      	beq.n	800200e <__aeabi_ui2d+0x52>
 8001fc2:	f000 f8b1 	bl	8002128 <__clzsi2>
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <__aeabi_ui2d+0x5c>)
 8001fc8:	1a1b      	subs	r3, r3, r0
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	0d5b      	lsrs	r3, r3, #21
 8001fce:	280a      	cmp	r0, #10
 8001fd0:	dd12      	ble.n	8001ff8 <__aeabi_ui2d+0x3c>
 8001fd2:	380b      	subs	r0, #11
 8001fd4:	4084      	lsls	r4, r0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	0324      	lsls	r4, r4, #12
 8001fda:	0b24      	lsrs	r4, r4, #12
 8001fdc:	2100      	movs	r1, #0
 8001fde:	0010      	movs	r0, r2
 8001fe0:	0324      	lsls	r4, r4, #12
 8001fe2:	0d0a      	lsrs	r2, r1, #20
 8001fe4:	0b24      	lsrs	r4, r4, #12
 8001fe6:	0512      	lsls	r2, r2, #20
 8001fe8:	4322      	orrs	r2, r4
 8001fea:	4c0c      	ldr	r4, [pc, #48]	; (800201c <__aeabi_ui2d+0x60>)
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	4022      	ands	r2, r4
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	0859      	lsrs	r1, r3, #1
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	0021      	movs	r1, r4
 8001ffc:	3215      	adds	r2, #21
 8001ffe:	4091      	lsls	r1, r2
 8002000:	000a      	movs	r2, r1
 8002002:	210b      	movs	r1, #11
 8002004:	1a08      	subs	r0, r1, r0
 8002006:	40c4      	lsrs	r4, r0
 8002008:	0324      	lsls	r4, r4, #12
 800200a:	0b24      	lsrs	r4, r4, #12
 800200c:	e7e6      	b.n	8001fdc <__aeabi_ui2d+0x20>
 800200e:	2300      	movs	r3, #0
 8002010:	2400      	movs	r4, #0
 8002012:	2200      	movs	r2, #0
 8002014:	e7e2      	b.n	8001fdc <__aeabi_ui2d+0x20>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	0000041e 	.word	0x0000041e
 800201c:	800fffff 	.word	0x800fffff

08002020 <__aeabi_d2f>:
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	004c      	lsls	r4, r1, #1
 8002024:	0d64      	lsrs	r4, r4, #21
 8002026:	030b      	lsls	r3, r1, #12
 8002028:	1c62      	adds	r2, r4, #1
 800202a:	0a5b      	lsrs	r3, r3, #9
 800202c:	0f46      	lsrs	r6, r0, #29
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	0fc9      	lsrs	r1, r1, #31
 8002032:	431e      	orrs	r6, r3
 8002034:	00c5      	lsls	r5, r0, #3
 8002036:	0d52      	lsrs	r2, r2, #21
 8002038:	2a01      	cmp	r2, #1
 800203a:	dd29      	ble.n	8002090 <__aeabi_d2f+0x70>
 800203c:	4b37      	ldr	r3, [pc, #220]	; (800211c <__aeabi_d2f+0xfc>)
 800203e:	18e7      	adds	r7, r4, r3
 8002040:	2ffe      	cmp	r7, #254	; 0xfe
 8002042:	dc1c      	bgt.n	800207e <__aeabi_d2f+0x5e>
 8002044:	2f00      	cmp	r7, #0
 8002046:	dd3b      	ble.n	80020c0 <__aeabi_d2f+0xa0>
 8002048:	0180      	lsls	r0, r0, #6
 800204a:	1e43      	subs	r3, r0, #1
 800204c:	4198      	sbcs	r0, r3
 800204e:	2207      	movs	r2, #7
 8002050:	00f3      	lsls	r3, r6, #3
 8002052:	0f6d      	lsrs	r5, r5, #29
 8002054:	4303      	orrs	r3, r0
 8002056:	432b      	orrs	r3, r5
 8002058:	401a      	ands	r2, r3
 800205a:	2a00      	cmp	r2, #0
 800205c:	d004      	beq.n	8002068 <__aeabi_d2f+0x48>
 800205e:	220f      	movs	r2, #15
 8002060:	401a      	ands	r2, r3
 8002062:	2a04      	cmp	r2, #4
 8002064:	d000      	beq.n	8002068 <__aeabi_d2f+0x48>
 8002066:	3304      	adds	r3, #4
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	04d2      	lsls	r2, r2, #19
 800206c:	401a      	ands	r2, r3
 800206e:	d024      	beq.n	80020ba <__aeabi_d2f+0x9a>
 8002070:	3701      	adds	r7, #1
 8002072:	b2fa      	uxtb	r2, r7
 8002074:	2fff      	cmp	r7, #255	; 0xff
 8002076:	d002      	beq.n	800207e <__aeabi_d2f+0x5e>
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	0a58      	lsrs	r0, r3, #9
 800207c:	e001      	b.n	8002082 <__aeabi_d2f+0x62>
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	2000      	movs	r0, #0
 8002082:	0240      	lsls	r0, r0, #9
 8002084:	05d2      	lsls	r2, r2, #23
 8002086:	0a40      	lsrs	r0, r0, #9
 8002088:	07c9      	lsls	r1, r1, #31
 800208a:	4310      	orrs	r0, r2
 800208c:	4308      	orrs	r0, r1
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002090:	4335      	orrs	r5, r6
 8002092:	2c00      	cmp	r4, #0
 8002094:	d104      	bne.n	80020a0 <__aeabi_d2f+0x80>
 8002096:	2d00      	cmp	r5, #0
 8002098:	d10a      	bne.n	80020b0 <__aeabi_d2f+0x90>
 800209a:	2200      	movs	r2, #0
 800209c:	2000      	movs	r0, #0
 800209e:	e7f0      	b.n	8002082 <__aeabi_d2f+0x62>
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	d0ec      	beq.n	800207e <__aeabi_d2f+0x5e>
 80020a4:	2080      	movs	r0, #128	; 0x80
 80020a6:	03c0      	lsls	r0, r0, #15
 80020a8:	4330      	orrs	r0, r6
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	e7e9      	b.n	8002082 <__aeabi_d2f+0x62>
 80020ae:	2400      	movs	r4, #0
 80020b0:	2300      	movs	r3, #0
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	0a58      	lsrs	r0, r3, #9
 80020b6:	b2e2      	uxtb	r2, r4
 80020b8:	e7e3      	b.n	8002082 <__aeabi_d2f+0x62>
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	003c      	movs	r4, r7
 80020be:	e7f8      	b.n	80020b2 <__aeabi_d2f+0x92>
 80020c0:	003b      	movs	r3, r7
 80020c2:	3317      	adds	r3, #23
 80020c4:	dbf3      	blt.n	80020ae <__aeabi_d2f+0x8e>
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	4333      	orrs	r3, r6
 80020cc:	261e      	movs	r6, #30
 80020ce:	1bf6      	subs	r6, r6, r7
 80020d0:	2e1f      	cmp	r6, #31
 80020d2:	dd14      	ble.n	80020fe <__aeabi_d2f+0xde>
 80020d4:	2202      	movs	r2, #2
 80020d6:	4252      	negs	r2, r2
 80020d8:	1bd7      	subs	r7, r2, r7
 80020da:	001a      	movs	r2, r3
 80020dc:	40fa      	lsrs	r2, r7
 80020de:	0017      	movs	r7, r2
 80020e0:	2e20      	cmp	r6, #32
 80020e2:	d004      	beq.n	80020ee <__aeabi_d2f+0xce>
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <__aeabi_d2f+0x100>)
 80020e6:	4694      	mov	ip, r2
 80020e8:	4464      	add	r4, ip
 80020ea:	40a3      	lsls	r3, r4
 80020ec:	431d      	orrs	r5, r3
 80020ee:	002b      	movs	r3, r5
 80020f0:	1e5d      	subs	r5, r3, #1
 80020f2:	41ab      	sbcs	r3, r5
 80020f4:	2207      	movs	r2, #7
 80020f6:	433b      	orrs	r3, r7
 80020f8:	401a      	ands	r2, r3
 80020fa:	2700      	movs	r7, #0
 80020fc:	e7ad      	b.n	800205a <__aeabi_d2f+0x3a>
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <__aeabi_d2f+0x104>)
 8002100:	0028      	movs	r0, r5
 8002102:	18a2      	adds	r2, r4, r2
 8002104:	4095      	lsls	r5, r2
 8002106:	4093      	lsls	r3, r2
 8002108:	1e6c      	subs	r4, r5, #1
 800210a:	41a5      	sbcs	r5, r4
 800210c:	40f0      	lsrs	r0, r6
 800210e:	2207      	movs	r2, #7
 8002110:	432b      	orrs	r3, r5
 8002112:	4303      	orrs	r3, r0
 8002114:	401a      	ands	r2, r3
 8002116:	2700      	movs	r7, #0
 8002118:	e79f      	b.n	800205a <__aeabi_d2f+0x3a>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffffc80 	.word	0xfffffc80
 8002120:	fffffca2 	.word	0xfffffca2
 8002124:	fffffc82 	.word	0xfffffc82

08002128 <__clzsi2>:
 8002128:	211c      	movs	r1, #28
 800212a:	2301      	movs	r3, #1
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	4298      	cmp	r0, r3
 8002130:	d301      	bcc.n	8002136 <__clzsi2+0xe>
 8002132:	0c00      	lsrs	r0, r0, #16
 8002134:	3910      	subs	r1, #16
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	4298      	cmp	r0, r3
 800213a:	d301      	bcc.n	8002140 <__clzsi2+0x18>
 800213c:	0a00      	lsrs	r0, r0, #8
 800213e:	3908      	subs	r1, #8
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	4298      	cmp	r0, r3
 8002144:	d301      	bcc.n	800214a <__clzsi2+0x22>
 8002146:	0900      	lsrs	r0, r0, #4
 8002148:	3904      	subs	r1, #4
 800214a:	a202      	add	r2, pc, #8	; (adr r2, 8002154 <__clzsi2+0x2c>)
 800214c:	5c10      	ldrb	r0, [r2, r0]
 800214e:	1840      	adds	r0, r0, r1
 8002150:	4770      	bx	lr
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	02020304 	.word	0x02020304
 8002158:	01010101 	.word	0x01010101
	...

08002164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002164:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002166:	2510      	movs	r5, #16
{
 8002168:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216a:	2230      	movs	r2, #48	; 0x30
 800216c:	2100      	movs	r1, #0
 800216e:	a80a      	add	r0, sp, #40	; 0x28
 8002170:	f004 f825 	bl	80061be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	002a      	movs	r2, r5
 8002176:	2100      	movs	r1, #0
 8002178:	a801      	add	r0, sp, #4
 800217a:	f004 f820 	bl	80061be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217e:	2214      	movs	r2, #20
 8002180:	2100      	movs	r1, #0
 8002182:	a805      	add	r0, sp, #20
 8002184:	f004 f81b 	bl	80061be <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002188:	f001 fb30 	bl	80037ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800218c:	2318      	movs	r3, #24
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <SystemClock_Config+0x8c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002190:	2401      	movs	r4, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8002192:	6a11      	ldr	r1, [r2, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002194:	2602      	movs	r6, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8002196:	430b      	orrs	r3, r1
 8002198:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800219a:	2317      	movs	r3, #23
 800219c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80021a4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80021a8:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021aa:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80021ac:	035b      	lsls	r3, r3, #13
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ae:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80021b0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021b4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80021b8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ba:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021bc:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021be:	f001 fb7f 	bl	80038c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c2:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c4:	0021      	movs	r1, r4
 80021c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ca:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021cc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ce:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021d0:	f001 fdb0 	bl	8003d34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <SystemClock_Config+0x90>)
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d6:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80021d8:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021e0:	3b80      	subs	r3, #128	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80021e2:	9508      	str	r5, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e6:	f001 fe29 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80021ea:	b016      	add	sp, #88	; 0x58
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00030020 	.word	0x00030020

080021f8 <MAX31855>:

}

/* USER CODE BEGIN 4 */
double MAX31855(uint16_t PIN)
{
 80021f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t data[4];
	uint16_t temp;

	HAL_GPIO_WritePin(GPIOA, PIN, GPIO_PIN_RESET);
 80021fa:	0001      	movs	r1, r0
{
 80021fc:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, PIN, GPIO_PIN_RESET);
 80021fe:	2090      	movs	r0, #144	; 0x90
 8002200:	2200      	movs	r2, #0
 8002202:	05c0      	lsls	r0, r0, #23
 8002204:	f000 fe5c 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, data, 4, 1000);
 8002208:	23fa      	movs	r3, #250	; 0xfa
 800220a:	ac01      	add	r4, sp, #4
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	2204      	movs	r2, #4
 8002210:	0021      	movs	r1, r4
 8002212:	480f      	ldr	r0, [pc, #60]	; (8002250 <MAX31855+0x58>)
 8002214:	f002 fb60 	bl	80048d8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, PIN, GPIO_PIN_SET);
 8002218:	2090      	movs	r0, #144	; 0x90
 800221a:	2201      	movs	r2, #1
 800221c:	05c0      	lsls	r0, r0, #23
 800221e:	0029      	movs	r1, r5
 8002220:	f000 fe4e 	bl	8002ec0 <HAL_GPIO_WritePin>
 8002224:	2307      	movs	r3, #7
 8002226:	78e0      	ldrb	r0, [r4, #3]
 8002228:	4018      	ands	r0, r3

	if(data[3] & 0x07)
 800222a:	d004      	beq.n	8002236 <MAX31855+0x3e>
		return(- (data[3] & 0x07));
 800222c:	4240      	negs	r0, r0
 800222e:	f7ff fe8b 	bl	8001f48 <__aeabi_i2d>
	else
	{
		temp = (data[0] << 6) | (data[1] >> 2);
		return((double)temp / 4);
	}
}
 8002232:	b003      	add	sp, #12
 8002234:	bd30      	pop	{r4, r5, pc}
		temp = (data[0] << 6) | (data[1] >> 2);
 8002236:	7823      	ldrb	r3, [r4, #0]
 8002238:	7860      	ldrb	r0, [r4, #1]
 800223a:	019b      	lsls	r3, r3, #6
 800223c:	0880      	lsrs	r0, r0, #2
		return((double)temp / 4);
 800223e:	4318      	orrs	r0, r3
 8002240:	f7ff febc 	bl	8001fbc <__aeabi_ui2d>
 8002244:	2200      	movs	r2, #0
 8002246:	4b03      	ldr	r3, [pc, #12]	; (8002254 <MAX31855+0x5c>)
 8002248:	f7ff f872 	bl	8001330 <__aeabi_dmul>
 800224c:	e7f1      	b.n	8002232 <MAX31855+0x3a>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	20000814 	.word	0x20000814
 8002254:	3fd00000 	.word	0x3fd00000

08002258 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	interval--;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	3a01      	subs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
	if(interval == 0)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2a00      	cmp	r2, #0
 8002264:	d105      	bne.n	8002272 <HAL_RTC_AlarmAEventCallback+0x1a>
	{
		interval = int_reload;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RTC_AlarmAEventCallback+0x20>)
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	601a      	str	r2, [r3, #0]
		send_usb = 1;
 800226c:	2201      	movs	r2, #1
 800226e:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RTC_AlarmAEventCallback+0x24>)
 8002270:	701a      	strb	r2, [r3, #0]
	}
}
 8002272:	4770      	bx	lr
 8002274:	20000004 	.word	0x20000004
 8002278:	20000000 	.word	0x20000000
 800227c:	20000374 	.word	0x20000374

08002280 <USB_BootloaderInit>:

void (*SysMemBootJump) (void);

void USB_BootloaderInit()
{
 8002280:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switchToBootloader = 0x00;	//Reset the variable to prevent being stuck in the bootloader (since a device reset wont change it)
 8002282:	2400      	movs	r4, #0
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <USB_BootloaderInit+0x30>)
	volatile uint32_t addr = 0x1FFFC800;	//The STM32F070RB system memory start address
	SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));	//Point the PC to the System Memory reset vector
 8002286:	4d0b      	ldr	r5, [pc, #44]	; (80022b4 <USB_BootloaderInit+0x34>)
	switchToBootloader = 0x00;	//Reset the variable to prevent being stuck in the bootloader (since a device reset wont change it)
 8002288:	701c      	strb	r4, [r3, #0]
	volatile uint32_t addr = 0x1FFFC800;	//The STM32F070RB system memory start address
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <USB_BootloaderInit+0x38>)
 800228c:	9301      	str	r3, [sp, #4]
	SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));	//Point the PC to the System Memory reset vector
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	602b      	str	r3, [r5, #0]

	HAL_RCC_DeInit();		//Reset the system clock
 8002294:	f001 fab4 	bl	8003800 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;		//Reset the  SysTick Timer
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <USB_BootloaderInit+0x3c>)
 800229a:	601c      	str	r4, [r3, #0]
	SysTick->LOAD = 0;
 800229c:	605c      	str	r4, [r3, #4]
	SysTick->VAL  = 0;
 800229e:	609c      	str	r4, [r3, #8]

	__set_MSP(*(uint32_t *)addr);	//Set the Main Stack Pointer
 80022a0:	9b01      	ldr	r3, [sp, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f383 8808 	msr	MSP, r3

	SysMemBootJump();				//Run our virtual function defined above that sets the PC
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	4798      	blx	r3
 80022ac:	e7fe      	b.n	80022ac <USB_BootloaderInit+0x2c>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000354 	.word	0x20000354
 80022b4:	20000878 	.word	0x20000878
 80022b8:	1fffc800 	.word	0x1fffc800
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <USB_TriggerBootloader>:
	while(1);
}

void USB_TriggerBootloader()
{
	switchToBootloader = 0x11;			//Set the noinit variable to be read by startup code
 80022c0:	2211      	movs	r2, #17
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <USB_TriggerBootloader+0x18>)
 80022c4:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c6:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <USB_TriggerBootloader+0x1c>)
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <USB_TriggerBootloader+0x20>)
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	e7fd      	b.n	80022d4 <USB_TriggerBootloader+0x14>
 80022d8:	20000354 	.word	0x20000354
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0004 	.word	0x05fa0004

080022e4 <main>:
{
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(switchToBootloader == 0x11)
 80022e6:	4bed      	ldr	r3, [pc, #948]	; (800269c <main+0x3b8>)
{
 80022e8:	b0b7      	sub	sp, #220	; 0xdc
  if(switchToBootloader == 0x11)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b11      	cmp	r3, #17
 80022ee:	d101      	bne.n	80022f4 <main+0x10>
	  USB_BootloaderInit();
 80022f0:	f7ff ffc6 	bl	8002280 <USB_BootloaderInit>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	ad2c      	add	r5, sp, #176	; 0xb0
  HAL_Init();
 80022f6:	f000 fb9d 	bl	8002a34 <HAL_Init>
  SystemClock_Config();
 80022fa:	f7ff ff33 	bl	8002164 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	2214      	movs	r2, #20
 8002300:	2100      	movs	r1, #0
 8002302:	0028      	movs	r0, r5
 8002304:	f003 ff5b 	bl	80061be <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002308:	2080      	movs	r0, #128	; 0x80
 800230a:	4be5      	ldr	r3, [pc, #916]	; (80026a0 <main+0x3bc>)
 800230c:	0300      	lsls	r0, r0, #12
 800230e:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4301      	orrs	r1, r0
 8002314:	6159      	str	r1, [r3, #20]
 8002316:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231c:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	920e      	str	r2, [sp, #56]	; 0x38
 8002320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	03c0      	lsls	r0, r0, #15
 8002326:	4301      	orrs	r1, r0
 8002328:	6159      	str	r1, [r3, #20]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002330:	920f      	str	r2, [sp, #60]	; 0x3c
 8002332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	6959      	ldr	r1, [r3, #20]
 8002336:	0280      	lsls	r0, r0, #10
 8002338:	4301      	orrs	r1, r0
 800233a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin|MAX2_Pin, GPIO_PIN_RESET);
 8002344:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	9210      	str	r2, [sp, #64]	; 0x40
 8002348:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin|MAX2_Pin, GPIO_PIN_RESET);
 800234c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	430a      	orrs	r2, r1
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin|MAX2_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	400b      	ands	r3, r1
 8002358:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin|MAX2_Pin, GPIO_PIN_RESET);
 800235a:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin|MAX2_Pin, GPIO_PIN_RESET);
 800235e:	f000 fdaf 	bl	8002ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = MAX1_Pin|MAX2_Pin;
 8002364:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	0029      	movs	r1, r5
 8002368:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = MAX1_Pin|MAX2_Pin;
 800236a:	932c      	str	r3, [sp, #176]	; 0xb0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236c:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f000 fcf5 	bl	8002d60 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002376:	220c      	movs	r2, #12
 8002378:	0021      	movs	r1, r4
 800237a:	0028      	movs	r0, r5
 800237c:	f003 ff1f 	bl	80061be <memset>
  hadc.Instance = ADC1;
 8002380:	4ec8      	ldr	r6, [pc, #800]	; (80026a4 <main+0x3c0>)
 8002382:	4bc9      	ldr	r3, [pc, #804]	; (80026a8 <main+0x3c4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002384:	0030      	movs	r0, r6
  hadc.Instance = ADC1;
 8002386:	6033      	str	r3, [r6, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002388:	2304      	movs	r3, #4
 800238a:	6173      	str	r3, [r6, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800238c:	23c2      	movs	r3, #194	; 0xc2
 800238e:	33ff      	adds	r3, #255	; 0xff
 8002390:	61f3      	str	r3, [r6, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002392:	1d73      	adds	r3, r6, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002394:	6074      	str	r4, [r6, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002396:	60b4      	str	r4, [r6, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002398:	60f4      	str	r4, [r6, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800239a:	6137      	str	r7, [r6, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800239c:	7634      	strb	r4, [r6, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800239e:	7674      	strb	r4, [r6, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80023a0:	76b4      	strb	r4, [r6, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023a2:	76f4      	strb	r4, [r6, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023a4:	6234      	str	r4, [r6, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80023a6:	77dc      	strb	r4, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023a8:	62b7      	str	r7, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023aa:	f000 fb65 	bl	8002a78 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80023ae:	2310      	movs	r3, #16
 80023b0:	932c      	str	r3, [sp, #176]	; 0xb0
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	015b      	lsls	r3, r3, #5
 80023b6:	606b      	str	r3, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023b8:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023ba:	0029      	movs	r1, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023bc:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023be:	0030      	movs	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023c0:	60ab      	str	r3, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023c2:	f000 fbff 	bl	8002bc4 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 80023c6:	4eb9      	ldr	r6, [pc, #740]	; (80026ac <main+0x3c8>)
 80023c8:	4bb9      	ldr	r3, [pc, #740]	; (80026b0 <main+0x3cc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ca:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80023cc:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80023ce:	4bb9      	ldr	r3, [pc, #740]	; (80026b4 <main+0x3d0>)
  hi2c1.Init.OwnAddress1 = 0;
 80023d0:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x0000020B;
 80023d2:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d4:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d6:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023d8:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023da:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023dc:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023de:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e0:	f000 fd74 	bl	8002ecc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023e4:	0021      	movs	r1, r4
 80023e6:	0030      	movs	r0, r6
 80023e8:	f000 fdc6 	bl	8002f78 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023ec:	0021      	movs	r1, r4
 80023ee:	0030      	movs	r0, r6
 80023f0:	f000 fde8 	bl	8002fc4 <HAL_I2CEx_ConfigDigitalFilter>
  RTC_TimeTypeDef sTime = {0};
 80023f4:	2214      	movs	r2, #20
 80023f6:	0021      	movs	r1, r4
 80023f8:	a824      	add	r0, sp, #144	; 0x90
 80023fa:	f003 fee0 	bl	80061be <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80023fe:	2228      	movs	r2, #40	; 0x28
 8002400:	0021      	movs	r1, r4
 8002402:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 8002404:	941c      	str	r4, [sp, #112]	; 0x70
  RTC_AlarmTypeDef sAlarm = {0};
 8002406:	f003 feda 	bl	80061be <memset>
  hrtc.Instance = RTC;
 800240a:	4eab      	ldr	r6, [pc, #684]	; (80026b8 <main+0x3d4>)
 800240c:	4bab      	ldr	r3, [pc, #684]	; (80026bc <main+0x3d8>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800240e:	0030      	movs	r0, r6
  hrtc.Instance = RTC;
 8002410:	6033      	str	r3, [r6, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002412:	237f      	movs	r3, #127	; 0x7f
 8002414:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 255;
 8002416:	3380      	adds	r3, #128	; 0x80
 8002418:	60f3      	str	r3, [r6, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800241a:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800241c:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800241e:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002420:	61b4      	str	r4, [r6, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002422:	f001 fde9 	bl	8003ff8 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8002426:	2188      	movs	r1, #136	; 0x88
 8002428:	aa02      	add	r2, sp, #8
 800242a:	1852      	adds	r2, r2, r1
 800242c:	8014      	strh	r4, [r2, #0]
  sTime.Minutes = 0x0;
 800242e:	3102      	adds	r1, #2
 8002430:	aa02      	add	r2, sp, #8
 8002432:	1852      	adds	r2, r2, r1
 8002434:	7014      	strb	r4, [r2, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002436:	a924      	add	r1, sp, #144	; 0x90
 8002438:	003a      	movs	r2, r7
 800243a:	0030      	movs	r0, r6
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800243c:	9427      	str	r4, [sp, #156]	; 0x9c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800243e:	9428      	str	r4, [sp, #160]	; 0xa0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002440:	f001 fe3a 	bl	80040b8 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002444:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <main+0x3dc>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002446:	003a      	movs	r2, r7
 8002448:	a91c      	add	r1, sp, #112	; 0x70
 800244a:	0030      	movs	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800244c:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800244e:	f001 fea9 	bl	80041a4 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Minutes = 0x0;
 8002452:	2310      	movs	r3, #16
 8002454:	70ab      	strb	r3, [r5, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8002456:	4b9b      	ldr	r3, [pc, #620]	; (80026c4 <main+0x3e0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 8002458:	aa02      	add	r2, sp, #8
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800245a:	616b      	str	r3, [r5, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 800245c:	23a9      	movs	r3, #169	; 0xa9
 800245e:	189b      	adds	r3, r3, r2
  sAlarm.AlarmTime.Hours = 0x0;
 8002460:	802c      	strh	r4, [r5, #0]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002462:	77df      	strb	r7, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8002464:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002466:	003a      	movs	r2, r7
 8002468:	0029      	movs	r1, r5
  sAlarm.Alarm = RTC_ALARM_A;
 800246a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800246c:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 800246e:	626b      	str	r3, [r5, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002470:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002472:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002474:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002476:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002478:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800247a:	f001 fef7 	bl	800426c <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 800247e:	4892      	ldr	r0, [pc, #584]	; (80026c8 <main+0x3e4>)
 8002480:	4b92      	ldr	r3, [pc, #584]	; (80026cc <main+0x3e8>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002482:	6104      	str	r4, [r0, #16]
  hspi1.Instance = SPI1;
 8002484:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002486:	2382      	movs	r3, #130	; 0x82
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002492:	23e0      	movs	r3, #224	; 0xe0
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800249e:	3be9      	subs	r3, #233	; 0xe9
 80024a0:	3bff      	subs	r3, #255	; 0xff
 80024a2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80024a4:	3b11      	subs	r3, #17
 80024a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a8:	19db      	adds	r3, r3, r7
 80024aa:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ae:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024b4:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b6:	f002 f883 	bl	80045c0 <HAL_SPI_Init>
  MX_USB_DEVICE_Init();
 80024ba:	f003 fbd1 	bl	8005c60 <MX_USB_DEVICE_Init>
  RTC_TimeTypeDef currTime = {0};
 80024be:	2214      	movs	r2, #20
 80024c0:	0021      	movs	r1, r4
 80024c2:	a812      	add	r0, sp, #72	; 0x48
 80024c4:	f003 fe7b 	bl	80061be <memset>
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin, 1);
 80024c8:	2090      	movs	r0, #144	; 0x90
 80024ca:	003a      	movs	r2, r7
 80024cc:	0039      	movs	r1, r7
 80024ce:	05c0      	lsls	r0, r0, #23
  RTC_DateTypeDef currDate = {0};
 80024d0:	940b      	str	r4, [sp, #44]	; 0x2c
  uint32_t length = 0;
 80024d2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, MAX1_Pin, 1);
 80024d4:	f000 fcf4 	bl	8002ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, MAX2_Pin, 1);
 80024d8:	2090      	movs	r0, #144	; 0x90
 80024da:	003a      	movs	r2, r7
 80024dc:	2102      	movs	r1, #2
 80024de:	05c0      	lsls	r0, r0, #23
 80024e0:	f000 fcee 	bl	8002ec0 <HAL_GPIO_WritePin>
	  if(send_usb)
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <main+0x3ec>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d100      	bne.n	80024ee <main+0x20a>
 80024ec:	e099      	b.n	8002622 <main+0x33e>
		  t1 = MAX31855(MAX1_Pin);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff fe82 	bl	80021f8 <MAX31855>
 80024f4:	9008      	str	r0, [sp, #32]
 80024f6:	9109      	str	r1, [sp, #36]	; 0x24
		  t2 = MAX31855(MAX2_Pin);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff fe7d 	bl	80021f8 <MAX31855>
		  HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80024fe:	ad12      	add	r5, sp, #72	; 0x48
 8002500:	2200      	movs	r2, #0
		  t2 = MAX31855(MAX2_Pin);
 8002502:	0006      	movs	r6, r0
 8002504:	000f      	movs	r7, r1
		  HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002506:	486c      	ldr	r0, [pc, #432]	; (80026b8 <main+0x3d4>)
 8002508:	0029      	movs	r1, r5
		  HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800250a:	ac0b      	add	r4, sp, #44	; 0x2c
		  HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 800250c:	f001 ff4e 	bl	80043ac <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002510:	2200      	movs	r2, #0
 8002512:	0021      	movs	r1, r4
 8002514:	4868      	ldr	r0, [pc, #416]	; (80026b8 <main+0x3d4>)
 8002516:	f001 ff73 	bl	8004400 <HAL_RTC_GetDate>
		  if((t1 > 0.1) && (t2 > 0.1))
 800251a:	9808      	ldr	r0, [sp, #32]
 800251c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800251e:	4a6d      	ldr	r2, [pc, #436]	; (80026d4 <main+0x3f0>)
 8002520:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <main+0x3f4>)
 8002522:	f7fd ffad 	bl	8000480 <__aeabi_dcmpgt>
 8002526:	2800      	cmp	r0, #0
 8002528:	d037      	beq.n	800259a <main+0x2b6>
 800252a:	4a6a      	ldr	r2, [pc, #424]	; (80026d4 <main+0x3f0>)
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <main+0x3f4>)
 800252e:	0030      	movs	r0, r6
 8002530:	0039      	movs	r1, r7
 8002532:	f7fd ffa5 	bl	8000480 <__aeabi_dcmpgt>
 8002536:	2800      	cmp	r0, #0
 8002538:	d013      	beq.n	8002562 <main+0x27e>
			  sprintf(buffer,"%02d.%02d.20%02d %02d:%02d:%02d,%3.2f,%3.2f\n\r", currDate.Date, currDate.Month, currDate.Year, currTime.Hours, currTime.Minutes, currTime.Seconds, t1, t2);
 800253a:	9808      	ldr	r0, [sp, #32]
 800253c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800253e:	7863      	ldrb	r3, [r4, #1]
 8002540:	78a2      	ldrb	r2, [r4, #2]
 8002542:	9004      	str	r0, [sp, #16]
 8002544:	9105      	str	r1, [sp, #20]
 8002546:	9606      	str	r6, [sp, #24]
 8002548:	9707      	str	r7, [sp, #28]
 800254a:	78a9      	ldrb	r1, [r5, #2]
 800254c:	a82c      	add	r0, sp, #176	; 0xb0
 800254e:	9103      	str	r1, [sp, #12]
 8002550:	7869      	ldrb	r1, [r5, #1]
 8002552:	9102      	str	r1, [sp, #8]
 8002554:	7829      	ldrb	r1, [r5, #0]
 8002556:	9101      	str	r1, [sp, #4]
 8002558:	78e1      	ldrb	r1, [r4, #3]
 800255a:	9100      	str	r1, [sp, #0]
 800255c:	495f      	ldr	r1, [pc, #380]	; (80026dc <main+0x3f8>)
 800255e:	f004 fc97 	bl	8006e90 <siprintf>
		  if((t1 > 0.1) && (t2 < -0.1))
 8002562:	4a5c      	ldr	r2, [pc, #368]	; (80026d4 <main+0x3f0>)
 8002564:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <main+0x3fc>)
 8002566:	0030      	movs	r0, r6
 8002568:	0039      	movs	r1, r7
 800256a:	f7fd ff75 	bl	8000458 <__aeabi_dcmplt>
 800256e:	2800      	cmp	r0, #0
 8002570:	d013      	beq.n	800259a <main+0x2b6>
			  sprintf(buffer,"%02d.%02d.20%02d %02d:%02d:%02d,%3.2f\n\r", currDate.Date, currDate.Month, currDate.Year, currTime.Hours, currTime.Minutes, currTime.Seconds, t1);
 8002572:	9c08      	ldr	r4, [sp, #32]
 8002574:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002576:	a90b      	add	r1, sp, #44	; 0x2c
 8002578:	784b      	ldrb	r3, [r1, #1]
 800257a:	788a      	ldrb	r2, [r1, #2]
 800257c:	9404      	str	r4, [sp, #16]
 800257e:	9505      	str	r5, [sp, #20]
 8002580:	a812      	add	r0, sp, #72	; 0x48
 8002582:	7884      	ldrb	r4, [r0, #2]
 8002584:	9403      	str	r4, [sp, #12]
 8002586:	7844      	ldrb	r4, [r0, #1]
 8002588:	9402      	str	r4, [sp, #8]
 800258a:	7800      	ldrb	r0, [r0, #0]
 800258c:	9001      	str	r0, [sp, #4]
 800258e:	78c9      	ldrb	r1, [r1, #3]
 8002590:	a82c      	add	r0, sp, #176	; 0xb0
 8002592:	9100      	str	r1, [sp, #0]
 8002594:	4953      	ldr	r1, [pc, #332]	; (80026e4 <main+0x400>)
 8002596:	f004 fc7b 	bl	8006e90 <siprintf>
		  if((t1 < -0.1) && (t2 > 0.1))
 800259a:	9808      	ldr	r0, [sp, #32]
 800259c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800259e:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <main+0x3f0>)
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <main+0x3fc>)
 80025a2:	f7fd ff59 	bl	8000458 <__aeabi_dcmplt>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d031      	beq.n	800260e <main+0x32a>
 80025aa:	4a4a      	ldr	r2, [pc, #296]	; (80026d4 <main+0x3f0>)
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <main+0x3f4>)
 80025ae:	0030      	movs	r0, r6
 80025b0:	0039      	movs	r1, r7
 80025b2:	f7fd ff65 	bl	8000480 <__aeabi_dcmpgt>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d011      	beq.n	80025de <main+0x2fa>
			  sprintf(buffer,"%02d.%02d.20%02d %02d:%02d:%02d,%3.2f\n\r", currDate.Date, currDate.Month, currDate.Year, currTime.Hours, currTime.Minutes, currTime.Seconds, t2);
 80025ba:	a90b      	add	r1, sp, #44	; 0x2c
 80025bc:	784b      	ldrb	r3, [r1, #1]
 80025be:	788a      	ldrb	r2, [r1, #2]
 80025c0:	9604      	str	r6, [sp, #16]
 80025c2:	9705      	str	r7, [sp, #20]
 80025c4:	a812      	add	r0, sp, #72	; 0x48
 80025c6:	7884      	ldrb	r4, [r0, #2]
 80025c8:	9403      	str	r4, [sp, #12]
 80025ca:	7844      	ldrb	r4, [r0, #1]
 80025cc:	9402      	str	r4, [sp, #8]
 80025ce:	7800      	ldrb	r0, [r0, #0]
 80025d0:	9001      	str	r0, [sp, #4]
 80025d2:	78c9      	ldrb	r1, [r1, #3]
 80025d4:	a82c      	add	r0, sp, #176	; 0xb0
 80025d6:	9100      	str	r1, [sp, #0]
 80025d8:	4942      	ldr	r1, [pc, #264]	; (80026e4 <main+0x400>)
 80025da:	f004 fc59 	bl	8006e90 <siprintf>
		  if((t1 < -0.1) && (t2 < -0.1))
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <main+0x3f0>)
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <main+0x3fc>)
 80025e2:	0030      	movs	r0, r6
 80025e4:	0039      	movs	r1, r7
 80025e6:	f7fd ff37 	bl	8000458 <__aeabi_dcmplt>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d00f      	beq.n	800260e <main+0x32a>
			  sprintf(buffer,"%02d.%02d.20%02d %02d:%02d:%02d,No Sensors\n\r", currDate.Date, currDate.Month, currDate.Year, currTime.Hours, currTime.Minutes, currTime.Seconds);
 80025ee:	a812      	add	r0, sp, #72	; 0x48
 80025f0:	7884      	ldrb	r4, [r0, #2]
 80025f2:	a90b      	add	r1, sp, #44	; 0x2c
 80025f4:	784b      	ldrb	r3, [r1, #1]
 80025f6:	788a      	ldrb	r2, [r1, #2]
 80025f8:	9403      	str	r4, [sp, #12]
 80025fa:	7844      	ldrb	r4, [r0, #1]
 80025fc:	9402      	str	r4, [sp, #8]
 80025fe:	7800      	ldrb	r0, [r0, #0]
 8002600:	9001      	str	r0, [sp, #4]
 8002602:	78c9      	ldrb	r1, [r1, #3]
 8002604:	a82c      	add	r0, sp, #176	; 0xb0
 8002606:	9100      	str	r1, [sp, #0]
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <main+0x404>)
 800260a:	f004 fc41 	bl	8006e90 <siprintf>
		  CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 800260e:	a82c      	add	r0, sp, #176	; 0xb0
 8002610:	f7fd fd7a 	bl	8000108 <strlen>
 8002614:	b281      	uxth	r1, r0
 8002616:	a82c      	add	r0, sp, #176	; 0xb0
 8002618:	f003 fb8c 	bl	8005d34 <CDC_Transmit_FS>
		  send_usb = 0;
 800261c:	2200      	movs	r2, #0
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <main+0x3ec>)
 8002620:	701a      	strb	r2, [r3, #0]
	  if (VCP_retrieveInputData(usbrx,&length)!=0)
 8002622:	af1c      	add	r7, sp, #112	; 0x70
 8002624:	a90c      	add	r1, sp, #48	; 0x30
 8002626:	0038      	movs	r0, r7
 8002628:	f003 fb9a 	bl	8005d60 <VCP_retrieveInputData>
 800262c:	2800      	cmp	r0, #0
 800262e:	d100      	bne.n	8002632 <main+0x34e>
 8002630:	e758      	b.n	80024e4 <main+0x200>
		  sprintf((char *)usbtx, "%04X: %02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X\n\r", (int)length, usbrx[0], usbrx[1], usbrx[2], usbrx[3], usbrx[4], usbrx[5], usbrx[6], usbrx[7]);
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	783b      	ldrb	r3, [r7, #0]
 8002636:	9206      	str	r2, [sp, #24]
 8002638:	79ba      	ldrb	r2, [r7, #6]
 800263a:	492c      	ldr	r1, [pc, #176]	; (80026ec <main+0x408>)
 800263c:	9205      	str	r2, [sp, #20]
 800263e:	797a      	ldrb	r2, [r7, #5]
 8002640:	a824      	add	r0, sp, #144	; 0x90
 8002642:	9204      	str	r2, [sp, #16]
 8002644:	793a      	ldrb	r2, [r7, #4]
 8002646:	9203      	str	r2, [sp, #12]
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	9202      	str	r2, [sp, #8]
 800264c:	78ba      	ldrb	r2, [r7, #2]
 800264e:	9201      	str	r2, [sp, #4]
 8002650:	787a      	ldrb	r2, [r7, #1]
 8002652:	9200      	str	r2, [sp, #0]
 8002654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002656:	f004 fc1b 	bl	8006e90 <siprintf>
		  if((length >= 5) && (usbrx[0] != 0))
 800265a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800265c:	2c04      	cmp	r4, #4
 800265e:	d910      	bls.n	8002682 <main+0x39e>
 8002660:	783e      	ldrb	r6, [r7, #0]
 8002662:	2e00      	cmp	r6, #0
 8002664:	d00d      	beq.n	8002682 <main+0x39e>
			  RTC_TimeTypeDef sTime = {0};
 8002666:	ad17      	add	r5, sp, #92	; 0x5c
 8002668:	2100      	movs	r1, #0
 800266a:	2214      	movs	r2, #20
 800266c:	0028      	movs	r0, r5
 800266e:	f003 fda6 	bl	80061be <memset>
	  		  RTC_DateTypeDef sDate = {0};
 8002672:	2100      	movs	r1, #0
 8002674:	910d      	str	r1, [sp, #52]	; 0x34
			  switch(usbrx[0])
 8002676:	2e49      	cmp	r6, #73	; 0x49
 8002678:	d100      	bne.n	800267c <main+0x398>
 800267a:	e096      	b.n	80027aa <main+0x4c6>
 800267c:	d838      	bhi.n	80026f0 <main+0x40c>
 800267e:	2e44      	cmp	r6, #68	; 0x44
 8002680:	d069      	beq.n	8002756 <main+0x472>
		  CDC_Transmit_FS(usbtx, strlen(usbtx));
 8002682:	a824      	add	r0, sp, #144	; 0x90
 8002684:	f7fd fd40 	bl	8000108 <strlen>
 8002688:	b281      	uxth	r1, r0
 800268a:	a824      	add	r0, sp, #144	; 0x90
 800268c:	f003 fb52 	bl	8005d34 <CDC_Transmit_FS>
  		  usbtx[0]= '\0';
 8002690:	2188      	movs	r1, #136	; 0x88
 8002692:	2300      	movs	r3, #0
 8002694:	aa02      	add	r2, sp, #8
 8002696:	1852      	adds	r2, r2, r1
 8002698:	7013      	strb	r3, [r2, #0]
 800269a:	e723      	b.n	80024e4 <main+0x200>
 800269c:	20000354 	.word	0x20000354
 80026a0:	40021000 	.word	0x40021000
 80026a4:	2000087c 	.word	0x2000087c
 80026a8:	40012400 	.word	0x40012400
 80026ac:	200007a8 	.word	0x200007a8
 80026b0:	40005400 	.word	0x40005400
 80026b4:	0000020b 	.word	0x0000020b
 80026b8:	200007f4 	.word	0x200007f4
 80026bc:	40002800 	.word	0x40002800
 80026c0:	20010101 	.word	0x20010101
 80026c4:	80808080 	.word	0x80808080
 80026c8:	20000814 	.word	0x20000814
 80026cc:	40013000 	.word	0x40013000
 80026d0:	20000374 	.word	0x20000374
 80026d4:	9999999a 	.word	0x9999999a
 80026d8:	3fb99999 	.word	0x3fb99999
 80026dc:	08009e10 	.word	0x08009e10
 80026e0:	bfb99999 	.word	0xbfb99999
 80026e4:	08009e3e 	.word	0x08009e3e
 80026e8:	08009e66 	.word	0x08009e66
 80026ec:	08009e93 	.word	0x08009e93
			  switch(usbrx[0])
 80026f0:	2e54      	cmp	r6, #84	; 0x54
 80026f2:	d00f      	beq.n	8002714 <main+0x430>
 80026f4:	2e58      	cmp	r6, #88	; 0x58
 80026f6:	d1c4      	bne.n	8002682 <main+0x39e>
			  		  if((usbrx[1] == '1') && (usbrx[2] == '7') && (usbrx[3] == '0') && (usbrx[4] == '4'))
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b31      	cmp	r3, #49	; 0x31
 80026fc:	d1c1      	bne.n	8002682 <main+0x39e>
 80026fe:	78bb      	ldrb	r3, [r7, #2]
 8002700:	2b37      	cmp	r3, #55	; 0x37
 8002702:	d1be      	bne.n	8002682 <main+0x39e>
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	2b30      	cmp	r3, #48	; 0x30
 8002708:	d1bb      	bne.n	8002682 <main+0x39e>
 800270a:	793b      	ldrb	r3, [r7, #4]
 800270c:	2b34      	cmp	r3, #52	; 0x34
 800270e:	d1b8      	bne.n	8002682 <main+0x39e>
			  			  USB_TriggerBootloader();
 8002710:	f7ff fdd6 	bl	80022c0 <USB_TriggerBootloader>
					  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002714:	4c2e      	ldr	r4, [pc, #184]	; (80027d0 <main+0x4ec>)
 8002716:	0029      	movs	r1, r5
 8002718:	2201      	movs	r2, #1
 800271a:	0020      	movs	r0, r4
 800271c:	f001 fe46 	bl	80043ac <HAL_RTC_GetTime>
					  sTime.Hours = (usbrx[1] - '0') << 4 | (usbrx[2] - '0');
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	78ba      	ldrb	r2, [r7, #2]
 8002724:	3b30      	subs	r3, #48	; 0x30
 8002726:	3a30      	subs	r2, #48	; 0x30
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4313      	orrs	r3, r2
 800272c:	702b      	strb	r3, [r5, #0]
					  sTime.Minutes = (usbrx[3] - '0') << 4 | (usbrx[4] - '0');
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	793a      	ldrb	r2, [r7, #4]
 8002732:	3b30      	subs	r3, #48	; 0x30
 8002734:	3a30      	subs	r2, #48	; 0x30
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4313      	orrs	r3, r2
 800273a:	706b      	strb	r3, [r5, #1]
					  sTime.Seconds = (usbrx[5] - '0') << 4 | (usbrx[6] - '0');
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	79ba      	ldrb	r2, [r7, #6]
 8002740:	3b30      	subs	r3, #48	; 0x30
 8002742:	3a30      	subs	r2, #48	; 0x30
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4313      	orrs	r3, r2
					  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002748:	0029      	movs	r1, r5
 800274a:	2201      	movs	r2, #1
 800274c:	0020      	movs	r0, r4
					  sTime.Seconds = (usbrx[5] - '0') << 4 | (usbrx[6] - '0');
 800274e:	70ab      	strb	r3, [r5, #2]
					  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002750:	f001 fcb2 	bl	80040b8 <HAL_RTC_SetTime>
 8002754:	e795      	b.n	8002682 <main+0x39e>
			  		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8002756:	4c1e      	ldr	r4, [pc, #120]	; (80027d0 <main+0x4ec>)
 8002758:	a90d      	add	r1, sp, #52	; 0x34
 800275a:	2201      	movs	r2, #1
 800275c:	0020      	movs	r0, r4
 800275e:	f001 fe4f 	bl	8004400 <HAL_RTC_GetDate>
			  		  sDate.Year = (usbrx[1] - '0') << 4 | (usbrx[2] - '0');
 8002762:	212f      	movs	r1, #47	; 0x2f
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	78ba      	ldrb	r2, [r7, #2]
 8002768:	3b30      	subs	r3, #48	; 0x30
 800276a:	3a30      	subs	r2, #48	; 0x30
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4313      	orrs	r3, r2
 8002770:	aa02      	add	r2, sp, #8
 8002772:	1852      	adds	r2, r2, r1
 8002774:	7013      	strb	r3, [r2, #0]
			  		  sDate.Month = (usbrx[3] - '0') << 4 | (usbrx[4] - '0');
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	793a      	ldrb	r2, [r7, #4]
 800277a:	3b30      	subs	r3, #48	; 0x30
 800277c:	3a30      	subs	r2, #48	; 0x30
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	4313      	orrs	r3, r2
 8002782:	3902      	subs	r1, #2
 8002784:	aa02      	add	r2, sp, #8
 8002786:	1852      	adds	r2, r2, r1
 8002788:	7013      	strb	r3, [r2, #0]
			  		  sDate.Date = (usbrx[5] - '0') << 4 | (usbrx[6] - '0');
 800278a:	797b      	ldrb	r3, [r7, #5]
 800278c:	79ba      	ldrb	r2, [r7, #6]
 800278e:	3b30      	subs	r3, #48	; 0x30
 8002790:	3a30      	subs	r2, #48	; 0x30
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	4313      	orrs	r3, r2
 8002796:	3101      	adds	r1, #1
 8002798:	aa02      	add	r2, sp, #8
 800279a:	1852      	adds	r2, r2, r1
 800279c:	7013      	strb	r3, [r2, #0]
					  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800279e:	a90d      	add	r1, sp, #52	; 0x34
 80027a0:	2201      	movs	r2, #1
 80027a2:	0020      	movs	r0, r4
 80027a4:	f001 fcfe 	bl	80041a4 <HAL_RTC_SetDate>
 80027a8:	e76b      	b.n	8002682 <main+0x39e>
			  		  int_reload = strtol(&usbrx[1], NULL, 10);
 80027aa:	2069      	movs	r0, #105	; 0x69
 80027ac:	ab02      	add	r3, sp, #8
			  		  usbrx[length - 1] = 0;
 80027ae:	193c      	adds	r4, r7, r4
			  		  int_reload = strtol(&usbrx[1], NULL, 10);
 80027b0:	220a      	movs	r2, #10
 80027b2:	18c0      	adds	r0, r0, r3
			  		  usbrx[length - 1] = 0;
 80027b4:	3c01      	subs	r4, #1
 80027b6:	7021      	strb	r1, [r4, #0]
			  		  int_reload = strtol(&usbrx[1], NULL, 10);
 80027b8:	f005 fa6a 	bl	8007c90 <strtol>
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <main+0x4f0>)
 80027be:	6018      	str	r0, [r3, #0]
			  		  if(int_reload == 0)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d000      	beq.n	80027c8 <main+0x4e4>
 80027c6:	e75c      	b.n	8002682 <main+0x39e>
			  			  int_reload = 1;
 80027c8:	3201      	adds	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e759      	b.n	8002682 <main+0x39e>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	200007f4 	.word	0x200007f4
 80027d4:	20000000 	.word	0x20000000

080027d8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027dc:	2001      	movs	r0, #1
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_MspInit+0x2c>)
{
 80027e0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	6999      	ldr	r1, [r3, #24]
 80027e4:	4301      	orrs	r1, r0
 80027e6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	4002      	ands	r2, r0
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	400b      	ands	r3, r1
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	b002      	add	sp, #8
 8002804:	4770      	bx	lr
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_ADC_MspInit+0x24>)
 800280e:	6802      	ldr	r2, [r0, #0]
{
 8002810:	b082      	sub	sp, #8
  if(hadc->Instance==ADC1)
 8002812:	429a      	cmp	r2, r3
 8002814:	d109      	bne.n	800282a <HAL_ADC_MspInit+0x1e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_ADC_MspInit+0x28>)
 800281a:	0080      	lsls	r0, r0, #2
 800281c:	6991      	ldr	r1, [r2, #24]
 800281e:	4301      	orrs	r1, r0
 8002820:	6191      	str	r1, [r2, #24]
 8002822:	6993      	ldr	r3, [r2, #24]
 8002824:	4003      	ands	r3, r0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800282a:	b002      	add	sp, #8
 800282c:	4770      	bx	lr
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40012400 	.word	0x40012400
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002838:	b510      	push	{r4, lr}
 800283a:	0004      	movs	r4, r0
 800283c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283e:	2214      	movs	r2, #20
 8002840:	2100      	movs	r1, #0
 8002842:	a803      	add	r0, sp, #12
 8002844:	f003 fcbb 	bl	80061be <memset>
  if(hi2c->Instance==I2C1)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_I2C_MspInit+0x5c>)
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d11f      	bne.n	8002890 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	4c11      	ldr	r4, [pc, #68]	; (8002898 <HAL_I2C_MspInit+0x60>)
 8002854:	02c9      	lsls	r1, r1, #11
 8002856:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	430a      	orrs	r2, r1
 800285c:	6162      	str	r2, [r4, #20]
 800285e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002860:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	400b      	ands	r3, r1
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	3bae      	subs	r3, #174	; 0xae
 800286e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	3b11      	subs	r3, #17
 8002874:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002878:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f000 fa71 	bl	8002d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	69e2      	ldr	r2, [r4, #28]
 8002882:	0389      	lsls	r1, r1, #14
 8002884:	430a      	orrs	r2, r1
 8002886:	61e2      	str	r2, [r4, #28]
 8002888:	69e3      	ldr	r3, [r4, #28]
 800288a:	400b      	ands	r3, r1
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002890:	b008      	add	sp, #32
 8002892:	bd10      	pop	{r4, pc}
 8002894:	40005400 	.word	0x40005400
 8002898:	40021000 	.word	0x40021000
 800289c:	48000400 	.word	0x48000400

080028a0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RTC_MspInit+0x28>)
 80028a2:	6802      	ldr	r2, [r0, #0]
{
 80028a4:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10d      	bne.n	80028c6 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RTC_MspInit+0x2c>)
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	6a11      	ldr	r1, [r2, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80028b2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	0011      	movs	r1, r2
 80028bc:	f000 fa00 	bl	8002cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80028c0:	2002      	movs	r0, #2
 80028c2:	f000 fa27 	bl	8002d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028c6:	bd10      	pop	{r4, pc}
 80028c8:	40002800 	.word	0x40002800
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028d0:	b510      	push	{r4, lr}
 80028d2:	0004      	movs	r4, r0
 80028d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	2214      	movs	r2, #20
 80028d8:	2100      	movs	r1, #0
 80028da:	a803      	add	r0, sp, #12
 80028dc:	f003 fc6f 	bl	80061be <memset>
  if(hspi->Instance==SPI1)
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_SPI_MspInit+0x58>)
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d11d      	bne.n	8002924 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e8:	2080      	movs	r0, #128	; 0x80
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_SPI_MspInit+0x5c>)
 80028ec:	0140      	lsls	r0, r0, #5
 80028ee:	6999      	ldr	r1, [r3, #24]
 80028f0:	4301      	orrs	r1, r0
 80028f2:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028f6:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028fa:	4002      	ands	r2, r0
 80028fc:	9201      	str	r2, [sp, #4]
 80028fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	430a      	orrs	r2, r1
 8002906:	615a      	str	r2, [r3, #20]
 8002908:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	400b      	ands	r3, r1
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002912:	2360      	movs	r3, #96	; 0x60
 8002914:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	3b5e      	subs	r3, #94	; 0x5e
 8002918:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291c:	3301      	adds	r3, #1
 800291e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f000 fa1e 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002924:	b008      	add	sp, #32
 8002926:	bd10      	pop	{r4, pc}
 8002928:	40013000 	.word	0x40013000
 800292c:	40021000 	.word	0x40021000

08002930 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002930:	4770      	bx	lr

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	e7fe      	b.n	8002932 <HardFault_Handler>

08002934 <SVC_Handler>:
 8002934:	4770      	bx	lr

08002936 <PendSV_Handler>:
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293a:	f000 f88b 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bd10      	pop	{r4, pc}

08002940 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8002940:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002942:	4802      	ldr	r0, [pc, #8]	; (800294c <RTC_IRQHandler+0xc>)
 8002944:	f001 fb06 	bl	8003f54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002948:	bd10      	pop	{r4, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200007f4 	.word	0x200007f4

08002950 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002950:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002952:	4802      	ldr	r0, [pc, #8]	; (800295c <USB_IRQHandler+0xc>)
 8002954:	f000 fc6e 	bl	8003234 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002958:	bd10      	pop	{r4, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	2000116c 	.word	0x2000116c

08002960 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <_sbrk+0x2c>)
{
 8002962:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002964:	6819      	ldr	r1, [r3, #0]
{
 8002966:	0002      	movs	r2, r0
	if (heap_end == 0)
 8002968:	2900      	cmp	r1, #0
 800296a:	d101      	bne.n	8002970 <_sbrk+0x10>
		heap_end = &end;
 800296c:	4908      	ldr	r1, [pc, #32]	; (8002990 <_sbrk+0x30>)
 800296e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002970:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002972:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002974:	1882      	adds	r2, r0, r2
 8002976:	428a      	cmp	r2, r1
 8002978:	d906      	bls.n	8002988 <_sbrk+0x28>
	{
		errno = ENOMEM;
 800297a:	f003 fbed 	bl	8006158 <__errno>
 800297e:	230c      	movs	r3, #12
 8002980:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002982:	2001      	movs	r0, #1
 8002984:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002986:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002988:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800298a:	e7fc      	b.n	8002986 <_sbrk+0x26>
 800298c:	20000378 	.word	0x20000378
 8002990:	200013e8 	.word	0x200013e8

08002994 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002994:	4770      	bx	lr
	...

08002998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002998:	480d      	ldr	r0, [pc, #52]	; (80029d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800299a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800299c:	480d      	ldr	r0, [pc, #52]	; (80029d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800299e:	490e      	ldr	r1, [pc, #56]	; (80029d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <LoopForever+0xe>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b4:	4c0b      	ldr	r4, [pc, #44]	; (80029e4 <LoopForever+0x16>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80029c2:	f7ff ffe7 	bl	8002994 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80029c6:	f003 fbcd 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ca:	f7ff fc8b 	bl	80022e4 <main>

080029ce <LoopForever>:

LoopForever:
    b LoopForever
 80029ce:	e7fe      	b.n	80029ce <LoopForever>
  ldr   r0, =_estack
 80029d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80029dc:	0800a1d8 	.word	0x0800a1d8
  ldr r2, =_sbss
 80029e0:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80029e4:	200013e4 	.word	0x200013e4

080029e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e8:	e7fe      	b.n	80029e8 <ADC1_IRQHandler>
	...

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f0:	20fa      	movs	r0, #250	; 0xfa
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_InitTick+0x3c>)
 80029f4:	0080      	lsls	r0, r0, #2
 80029f6:	7819      	ldrb	r1, [r3, #0]
 80029f8:	f7fd fba2 	bl	8000140 <__udivsi3>
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_InitTick+0x40>)
 80029fe:	0001      	movs	r1, r0
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f7fd fb9d 	bl	8000140 <__udivsi3>
 8002a06:	f000 f991 	bl	8002d2c <HAL_SYSTICK_Config>
 8002a0a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0e:	2c00      	cmp	r4, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	2d03      	cmp	r5, #3
 8002a14:	d807      	bhi.n	8002a26 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a16:	3802      	subs	r0, #2
 8002a18:	0022      	movs	r2, r4
 8002a1a:	0029      	movs	r1, r5
 8002a1c:	f000 f950 	bl	8002cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a20:	0020      	movs	r0, r4
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_InitTick+0x44>)
 8002a24:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	20000010 	.word	0x20000010

08002a34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	2310      	movs	r3, #16
 8002a36:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_Init+0x1c>)
{
 8002a38:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	f7ff ffd3 	bl	80029ec <HAL_InitTick>
  HAL_MspInit();
 8002a46:	f7ff fec9 	bl	80027dc <HAL_MspInit>
}
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a54:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <HAL_IncTick+0x10>)
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <HAL_IncTick+0x14>)
 8002a58:	6811      	ldr	r1, [r2, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	185b      	adds	r3, r3, r1
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	4770      	bx	lr
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	200008bc 	.word	0x200008bc
 8002a68:	2000000c 	.word	0x2000000c

08002a6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <HAL_GetTick+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
}
 8002a70:	4770      	bx	lr
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	200008bc 	.word	0x200008bc

08002a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002a7e:	2c00      	cmp	r4, #0
 8002a80:	d07e      	beq.n	8002b80 <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a88:	0022      	movs	r2, r4
 8002a8a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8c:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002a90:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002a92:	f7ff febb 	bl	800280c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a98:	06db      	lsls	r3, r3, #27
 8002a9a:	d500      	bpl.n	8002a9e <HAL_ADC_Init+0x26>
 8002a9c:	e085      	b.n	8002baa <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	6898      	ldr	r0, [r3, #8]
 8002aa4:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002aa6:	d000      	beq.n	8002aaa <HAL_ADC_Init+0x32>
 8002aa8:	e07f      	b.n	8002baa <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aac:	4942      	ldr	r1, [pc, #264]	; (8002bb8 <HAL_ADC_Init+0x140>)
 8002aae:	4011      	ands	r1, r2
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab4:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	400a      	ands	r2, r1
 8002abc:	2a01      	cmp	r2, #1
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_Init+0x54>
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	4211      	tst	r1, r2
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_ADC_Init+0x6c>
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	0412      	lsls	r2, r2, #16
 8002aca:	d40b      	bmi.n	8002ae4 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002acc:	2118      	movs	r1, #24
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	68a1      	ldr	r1, [r4, #8]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	6862      	ldr	r2, [r4, #4]
 8002adc:	0089      	lsls	r1, r1, #2
 8002ade:	0889      	lsrs	r1, r1, #2
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_ADC_Init+0x144>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aec:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002aee:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af0:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002af2:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af4:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002af6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002af8:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002afa:	3a01      	subs	r2, #1
 8002afc:	1e56      	subs	r6, r2, #1
 8002afe:	41b2      	sbcs	r2, r6
 8002b00:	0316      	lsls	r6, r2, #12
 8002b02:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b04:	034f      	lsls	r7, r1, #13
 8002b06:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b08:	6922      	ldr	r2, [r4, #16]
 8002b0a:	432f      	orrs	r7, r5
 8002b0c:	2a02      	cmp	r2, #2
 8002b0e:	d100      	bne.n	8002b12 <HAL_ADC_Init+0x9a>
 8002b10:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002b12:	1d62      	adds	r2, r4, #5
 8002b14:	7fd2      	ldrb	r2, [r2, #31]
 8002b16:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b18:	433a      	orrs	r2, r7
 8002b1a:	4332      	orrs	r2, r6
 8002b1c:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b1e:	7ee0      	ldrb	r0, [r4, #27]
 8002b20:	2801      	cmp	r0, #1
 8002b22:	d104      	bne.n	8002b2e <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b24:	2900      	cmp	r1, #0
 8002b26:	d12c      	bne.n	8002b82 <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	0249      	lsls	r1, r1, #9
 8002b2c:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2e:	20c2      	movs	r0, #194	; 0xc2
 8002b30:	69e1      	ldr	r1, [r4, #28]
 8002b32:	30ff      	adds	r0, #255	; 0xff
 8002b34:	4281      	cmp	r1, r0
 8002b36:	d002      	beq.n	8002b3e <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002b38:	6a20      	ldr	r0, [r4, #32]
 8002b3a:	4301      	orrs	r1, r0
 8002b3c:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b3e:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002b40:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b42:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002b44:	4311      	orrs	r1, r2
 8002b46:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b4a:	4281      	cmp	r1, r0
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_Init+0xdc>
 8002b4e:	1e48      	subs	r0, r1, #1
 8002b50:	2806      	cmp	r0, #6
 8002b52:	d807      	bhi.n	8002b64 <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b54:	2507      	movs	r5, #7
 8002b56:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b58:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b5a:	43a8      	bics	r0, r5
 8002b5c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b5e:	6958      	ldr	r0, [r3, #20]
 8002b60:	4301      	orrs	r1, r0
 8002b62:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_ADC_Init+0x148>)
 8002b68:	400b      	ands	r3, r1
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6e:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b70:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002b74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b76:	4393      	bics	r3, r2
 8002b78:	001a      	movs	r2, r3
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b82:	2120      	movs	r1, #32
 8002b84:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002b86:	4329      	orrs	r1, r5
 8002b88:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002b8c:	4308      	orrs	r0, r1
 8002b8e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002b90:	e7cd      	b.n	8002b2e <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8002b92:	2212      	movs	r2, #18
 8002b94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002b98:	4393      	bics	r3, r2
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ba4:	4303      	orrs	r3, r0
 8002ba6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002ba8:	e7ea      	b.n	8002b80 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	2310      	movs	r3, #16
 8002bac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002bae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002bb4:	e7e4      	b.n	8002b80 <HAL_ADC_Init+0x108>
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	fffffefd 	.word	0xfffffefd
 8002bbc:	fffe0219 	.word	0xfffe0219
 8002bc0:	833fffe7 	.word	0x833fffe7

08002bc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002bc6:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc8:	0004      	movs	r4, r0
{
 8002bca:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8002bcc:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8002bce:	3434      	adds	r4, #52	; 0x34
 8002bd0:	7823      	ldrb	r3, [r4, #0]
{
 8002bd2:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d02f      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bdc:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bde:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8002be0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be2:	68bd      	ldr	r5, [r7, #8]
 8002be4:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8002be6:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be8:	4005      	ands	r5, r0
 8002bea:	d159      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0xdc>
 8002bec:	680e      	ldr	r6, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002bee:	482f      	ldr	r0, [pc, #188]	; (8002cac <HAL_ADC_ConfigChannel+0xe8>)
 8002bf0:	40b3      	lsls	r3, r6
 8002bf2:	0032      	movs	r2, r6
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	684b      	ldr	r3, [r1, #4]
 8002bf8:	3a10      	subs	r2, #16
 8002bfa:	4283      	cmp	r3, r0
 8002bfc:	d03d      	beq.n	8002c7a <HAL_ADC_ConfigChannel+0xb6>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	9801      	ldr	r0, [sp, #4]
 8002c02:	4318      	orrs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c04:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c06:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c08:	055b      	lsls	r3, r3, #21
 8002c0a:	459c      	cmp	ip, r3
 8002c0c:	d010      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x6c>
 8002c0e:	4663      	mov	r3, ip
 8002c10:	3b01      	subs	r3, #1
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d90c      	bls.n	8002c30 <HAL_ADC_ConfigChannel+0x6c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002c16:	688b      	ldr	r3, [r1, #8]
 8002c18:	2107      	movs	r1, #7
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	4008      	ands	r0, r1
 8002c1e:	4283      	cmp	r3, r0
 8002c20:	d006      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x6c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c22:	6978      	ldr	r0, [r7, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002c24:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c26:	4388      	bics	r0, r1
 8002c28:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	4303      	orrs	r3, r0
 8002c2e:	617b      	str	r3, [r7, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c30:	2a01      	cmp	r2, #1
 8002c32:	d904      	bls.n	8002c3e <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	2300      	movs	r3, #0
 8002c38:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002c3a:	b005      	add	sp, #20
 8002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c3e:	0033      	movs	r3, r6
 8002c40:	3b10      	subs	r3, #16
 8002c42:	1e58      	subs	r0, r3, #1
 8002c44:	4183      	sbcs	r3, r0
 8002c46:	2080      	movs	r0, #128	; 0x80
 8002c48:	4919      	ldr	r1, [pc, #100]	; (8002cb0 <HAL_ADC_ConfigChannel+0xec>)
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	680a      	ldr	r2, [r1, #0]
 8002c4e:	059b      	lsls	r3, r3, #22
 8002c50:	0400      	lsls	r0, r0, #16
 8002c52:	181b      	adds	r3, r3, r0
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c58:	2e10      	cmp	r6, #16
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_ADC_ConfigChannel+0xf0>)
 8002c5e:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_ADC_ConfigChannel+0xf4>)
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	f7fd fa6d 	bl	8000140 <__udivsi3>
 8002c66:	230a      	movs	r3, #10
 8002c68:	4358      	muls	r0, r3
 8002c6a:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8002c6c:	9b03      	ldr	r3, [sp, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0e0      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8002c72:	9b03      	ldr	r3, [sp, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	e7f8      	b.n	8002c6c <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7c:	9b01      	ldr	r3, [sp, #4]
 8002c7e:	4399      	bics	r1, r3
 8002c80:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c82:	2a01      	cmp	r2, #1
 8002c84:	d8d6      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c86:	1e53      	subs	r3, r2, #1
 8002c88:	419a      	sbcs	r2, r3
 8002c8a:	4253      	negs	r3, r2
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <HAL_ADC_ConfigChannel+0xec>)
 8002c90:	03d2      	lsls	r2, r2, #15
 8002c92:	4013      	ands	r3, r2
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_ADC_ConfigChannel+0xf8>)
 8002c96:	6808      	ldr	r0, [r1, #0]
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	4003      	ands	r3, r0
 8002c9c:	600b      	str	r3, [r1, #0]
 8002c9e:	e7c9      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002ca4:	4301      	orrs	r1, r0
 8002ca6:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002ca8:	0018      	movs	r0, r3
 8002caa:	e7c4      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x72>
 8002cac:	00001001 	.word	0x00001001
 8002cb0:	40012708 	.word	0x40012708
 8002cb4:	20000008 	.word	0x20000008
 8002cb8:	000f4240 	.word	0x000f4240
 8002cbc:	ff7fffff 	.word	0xff7fffff

08002cc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc0:	b530      	push	{r4, r5, lr}
 8002cc2:	25ff      	movs	r5, #255	; 0xff
 8002cc4:	2403      	movs	r4, #3
 8002cc6:	002a      	movs	r2, r5
 8002cc8:	b2c3      	uxtb	r3, r0
 8002cca:	401c      	ands	r4, r3
 8002ccc:	00e4      	lsls	r4, r4, #3
 8002cce:	40a2      	lsls	r2, r4
 8002cd0:	0189      	lsls	r1, r1, #6
 8002cd2:	4029      	ands	r1, r5
 8002cd4:	43d2      	mvns	r2, r2
 8002cd6:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	db0a      	blt.n	8002cf2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cdc:	24c0      	movs	r4, #192	; 0xc0
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_NVIC_SetPriority+0x4c>)
 8002ce0:	0880      	lsrs	r0, r0, #2
 8002ce2:	0080      	lsls	r0, r0, #2
 8002ce4:	18c0      	adds	r0, r0, r3
 8002ce6:	00a4      	lsls	r4, r4, #2
 8002ce8:	5903      	ldr	r3, [r0, r4]
 8002cea:	401a      	ands	r2, r3
 8002cec:	4311      	orrs	r1, r2
 8002cee:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002cf0:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf2:	200f      	movs	r0, #15
 8002cf4:	4003      	ands	r3, r0
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	4805      	ldr	r0, [pc, #20]	; (8002d10 <HAL_NVIC_SetPriority+0x50>)
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	181b      	adds	r3, r3, r0
 8002d00:	69d8      	ldr	r0, [r3, #28]
 8002d02:	4002      	ands	r2, r0
 8002d04:	4311      	orrs	r1, r2
 8002d06:	61d9      	str	r1, [r3, #28]
 8002d08:	e7f2      	b.n	8002cf0 <HAL_NVIC_SetPriority+0x30>
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d14:	2800      	cmp	r0, #0
 8002d16:	db05      	blt.n	8002d24 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d18:	231f      	movs	r3, #31
 8002d1a:	4018      	ands	r0, r3
 8002d1c:	3b1e      	subs	r3, #30
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	4a01      	ldr	r2, [pc, #4]	; (8002d28 <HAL_NVIC_EnableIRQ+0x14>)
 8002d22:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d24:	4770      	bx	lr
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_SYSTICK_Config+0x28>)
 8002d2e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d30:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d80d      	bhi.n	8002d52 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d36:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d3a:	4808      	ldr	r0, [pc, #32]	; (8002d5c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d3e:	6a03      	ldr	r3, [r0, #32]
 8002d40:	0609      	lsls	r1, r1, #24
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d50:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d52:	4770      	bx	lr
 8002d54:	00ffffff 	.word	0x00ffffff
 8002d58:	e000e010 	.word	0xe000e010
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	680b      	ldr	r3, [r1, #0]
{ 
 8002d64:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002d68:	2300      	movs	r3, #0
{ 
 8002d6a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6c:	9a03      	ldr	r2, [sp, #12]
 8002d6e:	40da      	lsrs	r2, r3
 8002d70:	d101      	bne.n	8002d76 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8002d72:	b007      	add	sp, #28
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	9202      	str	r2, [sp, #8]
 8002d7c:	9902      	ldr	r1, [sp, #8]
 8002d7e:	9a03      	ldr	r2, [sp, #12]
 8002d80:	400a      	ands	r2, r1
 8002d82:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8002d84:	d100      	bne.n	8002d88 <HAL_GPIO_Init+0x28>
 8002d86:	e08c      	b.n	8002ea2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d88:	9a01      	ldr	r2, [sp, #4]
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	6852      	ldr	r2, [r2, #4]
 8002d8e:	0016      	movs	r6, r2
 8002d90:	438e      	bics	r6, r1
 8002d92:	2e02      	cmp	r6, #2
 8002d94:	d10e      	bne.n	8002db4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d96:	2507      	movs	r5, #7
 8002d98:	401d      	ands	r5, r3
 8002d9a:	00ad      	lsls	r5, r5, #2
 8002d9c:	3901      	subs	r1, #1
 8002d9e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8002da0:	08dc      	lsrs	r4, r3, #3
 8002da2:	00a4      	lsls	r4, r4, #2
 8002da4:	1904      	adds	r4, r0, r4
 8002da6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002daa:	9901      	ldr	r1, [sp, #4]
 8002dac:	6909      	ldr	r1, [r1, #16]
 8002dae:	40a9      	lsls	r1, r5
 8002db0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002db2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002db4:	2403      	movs	r4, #3
 8002db6:	005f      	lsls	r7, r3, #1
 8002db8:	40bc      	lsls	r4, r7
 8002dba:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002dbc:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dbe:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dc0:	4025      	ands	r5, r4
 8002dc2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dc4:	2503      	movs	r5, #3
 8002dc6:	4015      	ands	r5, r2
 8002dc8:	40bd      	lsls	r5, r7
 8002dca:	4661      	mov	r1, ip
 8002dcc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002dce:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd0:	2e01      	cmp	r6, #1
 8002dd2:	d80f      	bhi.n	8002df4 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8002dd6:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd8:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dda:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ddc:	40bd      	lsls	r5, r7
 8002dde:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002de0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002de2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de4:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002de6:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de8:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dea:	2101      	movs	r1, #1
 8002dec:	400d      	ands	r5, r1
 8002dee:	409d      	lsls	r5, r3
 8002df0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002df2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002df4:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002df6:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002df8:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dfa:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dfc:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dfe:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e00:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e02:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002e04:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e06:	420a      	tst	r2, r1
 8002e08:	d04b      	beq.n	8002ea2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4c26      	ldr	r4, [pc, #152]	; (8002ea8 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e10:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e12:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e14:	430d      	orrs	r5, r1
 8002e16:	61a5      	str	r5, [r4, #24]
 8002e18:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e1a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1c:	400c      	ands	r4, r1
 8002e1e:	9405      	str	r4, [sp, #20]
 8002e20:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e22:	240f      	movs	r4, #15
 8002e24:	4921      	ldr	r1, [pc, #132]	; (8002eac <HAL_GPIO_Init+0x14c>)
 8002e26:	00ad      	lsls	r5, r5, #2
 8002e28:	00b6      	lsls	r6, r6, #2
 8002e2a:	186d      	adds	r5, r5, r1
 8002e2c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e2e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e30:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e32:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e34:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e36:	2400      	movs	r4, #0
 8002e38:	4288      	cmp	r0, r1
 8002e3a:	d00c      	beq.n	8002e56 <HAL_GPIO_Init+0xf6>
 8002e3c:	491c      	ldr	r1, [pc, #112]	; (8002eb0 <HAL_GPIO_Init+0x150>)
 8002e3e:	3401      	adds	r4, #1
 8002e40:	4288      	cmp	r0, r1
 8002e42:	d008      	beq.n	8002e56 <HAL_GPIO_Init+0xf6>
 8002e44:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <HAL_GPIO_Init+0x154>)
 8002e46:	3401      	adds	r4, #1
 8002e48:	4288      	cmp	r0, r1
 8002e4a:	d004      	beq.n	8002e56 <HAL_GPIO_Init+0xf6>
 8002e4c:	491a      	ldr	r1, [pc, #104]	; (8002eb8 <HAL_GPIO_Init+0x158>)
 8002e4e:	3403      	adds	r4, #3
 8002e50:	4288      	cmp	r0, r1
 8002e52:	d100      	bne.n	8002e56 <HAL_GPIO_Init+0xf6>
 8002e54:	3c02      	subs	r4, #2
 8002e56:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002e58:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e5a:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002e5c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002e60:	4c16      	ldr	r4, [pc, #88]	; (8002ebc <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8002e62:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8002e64:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8002e66:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e68:	03d1      	lsls	r1, r2, #15
 8002e6a:	d401      	bmi.n	8002e70 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8002e6c:	003e      	movs	r6, r7
 8002e6e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002e70:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002e72:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8002e74:	9e00      	ldr	r6, [sp, #0]
 8002e76:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e78:	0391      	lsls	r1, r2, #14
 8002e7a:	d401      	bmi.n	8002e80 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002e7c:	003e      	movs	r6, r7
 8002e7e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002e80:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002e82:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8002e84:	9e00      	ldr	r6, [sp, #0]
 8002e86:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e88:	02d1      	lsls	r1, r2, #11
 8002e8a:	d401      	bmi.n	8002e90 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8002e8c:	003e      	movs	r6, r7
 8002e8e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002e90:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002e92:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8002e94:	9f00      	ldr	r7, [sp, #0]
 8002e96:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e98:	0292      	lsls	r2, r2, #10
 8002e9a:	d401      	bmi.n	8002ea0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8002e9c:	402e      	ands	r6, r5
 8002e9e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002ea0:	60e7      	str	r7, [r4, #12]
    position++;
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	e762      	b.n	8002d6c <HAL_GPIO_Init+0xc>
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	48000400 	.word	0x48000400
 8002eb4:	48000800 	.word	0x48000800
 8002eb8:	48000c00 	.word	0x48000c00
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec0:	2a00      	cmp	r2, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002eca:	e7fc      	b.n	8002ec6 <HAL_GPIO_WritePin+0x6>

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	d03f      	beq.n	8002f56 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed6:	0025      	movs	r5, r4
 8002ed8:	3541      	adds	r5, #65	; 0x41
 8002eda:	782b      	ldrb	r3, [r5, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee2:	0022      	movs	r2, r4
 8002ee4:	3240      	adds	r2, #64	; 0x40
 8002ee6:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ee8:	0020      	movs	r0, r4
 8002eea:	f7ff fca5 	bl	8002838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eee:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002ef4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68a6      	ldr	r6, [r4, #8]
 8002efc:	438a      	bics	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f00:	6861      	ldr	r1, [r4, #4]
 8002f02:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <HAL_I2C_Init+0xa0>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <HAL_I2C_Init+0xa4>)
 8002f0c:	4011      	ands	r1, r2
 8002f0e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f10:	2801      	cmp	r0, #1
 8002f12:	d121      	bne.n	8002f58 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0209      	lsls	r1, r1, #8
 8002f18:	4331      	orrs	r1, r6
 8002f1a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f1c:	6858      	ldr	r0, [r3, #4]
 8002f1e:	4915      	ldr	r1, [pc, #84]	; (8002f74 <HAL_I2C_Init+0xa8>)
 8002f20:	4301      	orrs	r1, r0
 8002f22:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f24:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f26:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f28:	400a      	ands	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f2c:	6961      	ldr	r1, [r4, #20]
 8002f2e:	6922      	ldr	r2, [r4, #16]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	69a1      	ldr	r1, [r4, #24]
 8002f34:	0209      	lsls	r1, r1, #8
 8002f36:	430a      	orrs	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f3a:	6a21      	ldr	r1, [r4, #32]
 8002f3c:	69e2      	ldr	r2, [r4, #28]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002f42:	2201      	movs	r2, #1
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f50:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	3442      	adds	r4, #66	; 0x42
 8002f54:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f58:	2184      	movs	r1, #132	; 0x84
 8002f5a:	0209      	lsls	r1, r1, #8
 8002f5c:	4331      	orrs	r1, r6
 8002f5e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f60:	2802      	cmp	r0, #2
 8002f62:	d1db      	bne.n	8002f1c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0109      	lsls	r1, r1, #4
 8002f68:	6059      	str	r1, [r3, #4]
 8002f6a:	e7d7      	b.n	8002f1c <HAL_I2C_Init+0x50>
 8002f6c:	f0ffffff 	.word	0xf0ffffff
 8002f70:	ffff7fff 	.word	0xffff7fff
 8002f74:	02008000 	.word	0x02008000

08002f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	0004      	movs	r4, r0
 8002f7c:	3441      	adds	r4, #65	; 0x41
 8002f7e:	7822      	ldrb	r2, [r4, #0]
{
 8002f80:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f86:	2a20      	cmp	r2, #32
 8002f88:	d118      	bne.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8002f8a:	001d      	movs	r5, r3
 8002f8c:	3540      	adds	r5, #64	; 0x40
 8002f8e:	782e      	ldrb	r6, [r5, #0]
 8002f90:	2e01      	cmp	r6, #1
 8002f92:	d013      	beq.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002f94:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f96:	3022      	adds	r0, #34	; 0x22
 8002f98:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002f9a:	681e      	ldr	r6, [r3, #0]
 8002f9c:	3823      	subs	r0, #35	; 0x23
 8002f9e:	4386      	bics	r6, r0
 8002fa0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa2:	681e      	ldr	r6, [r3, #0]
 8002fa4:	4f06      	ldr	r7, [pc, #24]	; (8002fc0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002fa6:	403e      	ands	r6, r7
 8002fa8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002faa:	681e      	ldr	r6, [r3, #0]
 8002fac:	4331      	orrs	r1, r6
 8002fae:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	4308      	orrs	r0, r1
 8002fb4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002fb6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002fba:	7028      	strb	r0, [r5, #0]
  }
}
 8002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	ffffefff 	.word	0xffffefff

08002fc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	0005      	movs	r5, r0
 8002fc8:	3541      	adds	r5, #65	; 0x41
 8002fca:	782a      	ldrb	r2, [r5, #0]
{
 8002fcc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	2a20      	cmp	r2, #32
 8002fd4:	d117      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002fd6:	001c      	movs	r4, r3
 8002fd8:	3440      	adds	r4, #64	; 0x40
 8002fda:	7826      	ldrb	r6, [r4, #0]
 8002fdc:	2e01      	cmp	r6, #1
 8002fde:	d012      	beq.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002fe0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe2:	3022      	adds	r0, #34	; 0x22
 8002fe4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002fe6:	681e      	ldr	r6, [r3, #0]
 8002fe8:	3823      	subs	r0, #35	; 0x23
 8002fea:	4386      	bics	r6, r0
 8002fec:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002fee:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002ff0:	4f05      	ldr	r7, [pc, #20]	; (8003008 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002ff2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002ff4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002ff6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002ff8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	4308      	orrs	r0, r1
 8002ffe:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003000:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003004:	7020      	strb	r0, [r4, #0]
  }
}
 8003006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003008:	fffff0ff 	.word	0xfffff0ff

0800300c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	0004      	movs	r4, r0
 8003010:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003012:	2501      	movs	r5, #1
  if (hpcd == NULL)
 8003014:	2800      	cmp	r0, #0
 8003016:	d031      	beq.n	800307c <HAL_PCD_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003018:	4d2c      	ldr	r5, [pc, #176]	; (80030cc <HAL_PCD_Init+0xc0>)
 800301a:	5d43      	ldrb	r3, [r0, r5]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003022:	228a      	movs	r2, #138	; 0x8a
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003028:	f002 ff3c 	bl	8005ea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800302c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800302e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003030:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 8003032:	f001 fd13 	bl	8004a5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003036:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003038:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800303a:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303c:	6861      	ldr	r1, [r4, #4]
 800303e:	428b      	cmp	r3, r1
 8003040:	d31f      	bcc.n	8003082 <HAL_PCD_Init+0x76>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003042:	2300      	movs	r3, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003044:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003046:	4299      	cmp	r1, r3
 8003048:	d82c      	bhi.n	80030a4 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800304a:	0023      	movs	r3, r4
 800304c:	466a      	mov	r2, sp
 800304e:	3310      	adds	r3, #16
 8003050:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003052:	c243      	stmia	r2!, {r0, r1, r6}
 8003054:	cb03      	ldmia	r3!, {r0, r1}
 8003056:	c203      	stmia	r2!, {r0, r1}
 8003058:	68a2      	ldr	r2, [r4, #8]
 800305a:	68e3      	ldr	r3, [r4, #12]
 800305c:	6861      	ldr	r1, [r4, #4]
 800305e:	6820      	ldr	r0, [r4, #0]
 8003060:	f001 fd06 	bl	8004a70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	1d62      	adds	r2, r4, #5
 8003068:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 800306a:	2201      	movs	r2, #1
 800306c:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  
  return HAL_OK;
 800306e:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8003070:	69e3      	ldr	r3, [r4, #28]
 8003072:	4293      	cmp	r3, r2
 8003074:	d102      	bne.n	800307c <HAL_PCD_Init+0x70>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003076:	0020      	movs	r0, r4
 8003078:	f000 fba2 	bl	80037c0 <HAL_PCDEx_ActivateLPM>
}
 800307c:	0028      	movs	r0, r5
 800307e:	b007      	add	sp, #28
 8003080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	18a2      	adds	r2, r4, r2
 8003086:	0017      	movs	r7, r2
 8003088:	3729      	adds	r7, #41	; 0x29
 800308a:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 800308c:	3f01      	subs	r7, #1
 800308e:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003090:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003092:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003094:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003096:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309c:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 800309e:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e7cc      	b.n	800303e <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	18a2      	adds	r2, r4, r2
 80030a8:	0016      	movs	r6, r2
 80030aa:	362a      	adds	r6, #42	; 0x2a
 80030ac:	36ff      	adds	r6, #255	; 0xff
 80030ae:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b0:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 80030b2:	3e01      	subs	r6, #1
 80030b4:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030b6:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b8:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ba:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030bc:	001a      	movs	r2, r3
 80030be:	320a      	adds	r2, #10
 80030c0:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c2:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030c4:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	e7bd      	b.n	8003046 <HAL_PCD_Init+0x3a>
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	00000229 	.word	0x00000229

080030d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80030d2:	258a      	movs	r5, #138	; 0x8a
 80030d4:	00ad      	lsls	r5, r5, #2
 80030d6:	5d43      	ldrb	r3, [r0, r5]
{
 80030d8:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80030da:	2002      	movs	r0, #2
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d009      	beq.n	80030f4 <HAL_PCD_Start+0x24>
 80030e0:	2301      	movs	r3, #1
  (void)USB_DevConnect(hpcd->Instance);
 80030e2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80030e4:	5563      	strb	r3, [r4, r5]
  (void)USB_DevConnect(hpcd->Instance);
 80030e6:	f001 ff18 	bl	8004f1a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f001 fcac 	bl	8004a48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80030f0:	2000      	movs	r0, #0
 80030f2:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 80030f4:	bd70      	pop	{r4, r5, r6, pc}

080030f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80030f8:	258a      	movs	r5, #138	; 0x8a
 80030fa:	00ad      	lsls	r5, r5, #2
 80030fc:	5d43      	ldrb	r3, [r0, r5]
{
 80030fe:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003100:	2002      	movs	r0, #2
 8003102:	2b01      	cmp	r3, #1
 8003104:	d008      	beq.n	8003118 <HAL_PCD_SetAddress+0x22>
 8003106:	2301      	movs	r3, #1
 8003108:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 800310a:	1d63      	adds	r3, r4, #5
 800310c:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f001 fefc 	bl	8004f0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003114:	2000      	movs	r0, #0
 8003116:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003118:	bd70      	pop	{r4, r5, r6, pc}

0800311a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800311a:	b570      	push	{r4, r5, r6, lr}
 800311c:	2607      	movs	r6, #7
 800311e:	0004      	movs	r4, r0
 8003120:	400e      	ands	r6, r1
 8003122:	0170      	lsls	r0, r6, #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003124:	b249      	sxtb	r1, r1
 8003126:	1825      	adds	r5, r4, r0
 8003128:	2900      	cmp	r1, #0
 800312a:	da1e      	bge.n	800316a <HAL_PCD_EP_Open+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312c:	0001      	movs	r1, r0
    ep->is_in = 1U;
 800312e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003130:	3128      	adds	r1, #40	; 0x28
 8003132:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003134:	3529      	adds	r5, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8003136:	7028      	strb	r0, [r5, #0]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8003138:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800313a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313c:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 800313e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003140:	2a00      	cmp	r2, #0
 8003142:	d000      	beq.n	8003146 <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003144:	81ce      	strh	r6, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003146:	2b02      	cmp	r3, #2
 8003148:	d101      	bne.n	800314e <HAL_PCD_EP_Open+0x34>
  {
    ep->data_pid_start = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800314e:	258a      	movs	r5, #138	; 0x8a
 8003150:	00ad      	lsls	r5, r5, #2
 8003152:	5d63      	ldrb	r3, [r4, r5]
 8003154:	2002      	movs	r0, #2
 8003156:	2b01      	cmp	r3, #1
 8003158:	d006      	beq.n	8003168 <HAL_PCD_EP_Open+0x4e>
 800315a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800315c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800315e:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003160:	f001 fc9c 	bl	8004a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003164:	2000      	movs	r0, #0
 8003166:	5560      	strb	r0, [r4, r5]

  return ret;
}
 8003168:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316a:	0001      	movs	r1, r0
 800316c:	3129      	adds	r1, #41	; 0x29
 800316e:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8003170:	352a      	adds	r5, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003172:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003174:	35ff      	adds	r5, #255	; 0xff
 8003176:	2000      	movs	r0, #0
 8003178:	e7dd      	b.n	8003136 <HAL_PCD_EP_Open+0x1c>

0800317a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317a:	b570      	push	{r4, r5, r6, lr}
 800317c:	0004      	movs	r4, r0
 800317e:	2007      	movs	r0, #7
 8003180:	4008      	ands	r0, r1
 8003182:	0143      	lsls	r3, r0, #5
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003184:	b249      	sxtb	r1, r1
 8003186:	18e2      	adds	r2, r4, r3
 8003188:	2900      	cmp	r1, #0
 800318a:	da13      	bge.n	80031b4 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	3328      	adds	r3, #40	; 0x28
 800318e:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8003194:	258a      	movs	r5, #138	; 0x8a
    ep->is_in = 0U;
 8003196:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 8003198:	00ad      	lsls	r5, r5, #2
  ep->num   = ep_addr & EP_ADDR_MSK;
 800319a:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 800319c:	5d63      	ldrb	r3, [r4, r5]
 800319e:	2002      	movs	r0, #2
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d006      	beq.n	80031b2 <HAL_PCD_EP_Close+0x38>
 80031a4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031a6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80031a8:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031aa:	f001 fdb9 	bl	8004d20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ae:	2000      	movs	r0, #0
 80031b0:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	3329      	adds	r3, #41	; 0x29
 80031b6:	33ff      	adds	r3, #255	; 0xff
    ep->is_in = 0U;
 80031b8:	322a      	adds	r2, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80031bc:	32ff      	adds	r2, #255	; 0xff
 80031be:	2300      	movs	r3, #0
 80031c0:	e7e8      	b.n	8003194 <HAL_PCD_EP_Close+0x1a>

080031c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c4:	2407      	movs	r4, #7
 80031c6:	4021      	ands	r1, r4
 80031c8:	014c      	lsls	r4, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ca:	1906      	adds	r6, r0, r4
 80031cc:	0037      	movs	r7, r6
 80031ce:	37fc      	adds	r7, #252	; 0xfc
  ep->xfer_len = len;
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
  ep->xfer_count = 0U;
  ep->is_in = 0U;
 80031d2:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 80031d4:	2500      	movs	r5, #0
  ep->is_in = 0U;
 80031d6:	332a      	adds	r3, #42	; 0x2a
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d8:	3629      	adds	r6, #41	; 0x29
  ep->is_in = 0U;
 80031da:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_count = 0U;
 80031de:	64bd      	str	r5, [r7, #72]	; 0x48
  ep->xfer_buff = pBuf;
 80031e0:	643a      	str	r2, [r7, #64]	; 0x40
  ep->is_in = 0U;
 80031e2:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e4:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	0021      	movs	r1, r4
 80031e8:	3129      	adds	r1, #41	; 0x29
 80031ea:	31ff      	adds	r1, #255	; 0xff
 80031ec:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	f001 feb6 	bl	8004f60 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80031f4:	0028      	movs	r0, r5
 80031f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031f8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031f8:	2307      	movs	r3, #7
 80031fa:	4019      	ands	r1, r3
 80031fc:	310a      	adds	r1, #10
 80031fe:	0149      	lsls	r1, r1, #5
 8003200:	1840      	adds	r0, r0, r1
 8003202:	6840      	ldr	r0, [r0, #4]
}
 8003204:	4770      	bx	lr

08003206 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	2407      	movs	r4, #7
 800320a:	4021      	ands	r1, r4
 800320c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8003210:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8003212:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8003214:	0023      	movs	r3, r4
  ep->xfer_buff = pBuf;
 8003216:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8003218:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800321a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800321c:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800321e:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 8003220:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003224:	0029      	movs	r1, r5
 8003226:	3128      	adds	r1, #40	; 0x28
 8003228:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	f001 fe98 	bl	8004f60 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003230:	0030      	movs	r0, r6
 8003232:	bd70      	pop	{r4, r5, r6, pc}

08003234 <HAL_PCD_IRQHandler>:
{
 8003234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003236:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003238:	6800      	ldr	r0, [r0, #0]
 800323a:	f001 fe76 	bl	8004f2a <USB_ReadInterrupts>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800323e:	2780      	movs	r7, #128	; 0x80
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003240:	0403      	lsls	r3, r0, #16
 8003242:	d500      	bpl.n	8003246 <HAL_PCD_IRQHandler+0x12>
 8003244:	e0d9      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	f001 fe6f 	bl	8004f2a <USB_ReadInterrupts>
 800324c:	0543      	lsls	r3, r0, #21
 800324e:	d50c      	bpl.n	800326a <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	49ac      	ldr	r1, [pc, #688]	; (8003504 <HAL_PCD_IRQHandler+0x2d0>)
 8003254:	3306      	adds	r3, #6
 8003256:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003258:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800325a:	400a      	ands	r2, r1
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800325e:	f002 fe62 	bl	8005f26 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003262:	2100      	movs	r1, #0
 8003264:	0020      	movs	r0, r4
 8003266:	f7ff ff46 	bl	80030f6 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f001 fe5d 	bl	8004f2a <USB_ReadInterrupts>
 8003270:	0443      	lsls	r3, r0, #17
 8003272:	d505      	bpl.n	8003280 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	49a4      	ldr	r1, [pc, #656]	; (8003508 <HAL_PCD_IRQHandler+0x2d4>)
 8003278:	3306      	adds	r3, #6
 800327a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800327c:	400a      	ands	r2, r1
 800327e:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	f001 fe52 	bl	8004f2a <USB_ReadInterrupts>
 8003286:	0483      	lsls	r3, r0, #18
 8003288:	d505      	bpl.n	8003296 <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	499f      	ldr	r1, [pc, #636]	; (800350c <HAL_PCD_IRQHandler+0x2d8>)
 800328e:	3306      	adds	r3, #6
 8003290:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003292:	400a      	ands	r2, r1
 8003294:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	f001 fe47 	bl	8004f2a <USB_ReadInterrupts>
 800329c:	04c3      	lsls	r3, r0, #19
 800329e:	d51c      	bpl.n	80032da <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80032a0:	2104      	movs	r1, #4
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	3302      	adds	r3, #2
 80032a6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80032a8:	438a      	bics	r2, r1
 80032aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032ac:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80032ae:	1849      	adds	r1, r1, r1
 80032b0:	438a      	bics	r2, r1
 80032b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80032b4:	2398      	movs	r3, #152	; 0x98
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	5ce2      	ldrb	r2, [r4, r3]
 80032ba:	2a01      	cmp	r2, #1
 80032bc:	d104      	bne.n	80032c8 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80032be:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032c0:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80032c2:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032c4:	f000 fa90 	bl	80037e8 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80032c8:	0020      	movs	r0, r4
 80032ca:	f002 fe4f 	bl	8005f6c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	498f      	ldr	r1, [pc, #572]	; (8003510 <HAL_PCD_IRQHandler+0x2dc>)
 80032d2:	3306      	adds	r3, #6
 80032d4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80032d6:	400a      	ands	r2, r1
 80032d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f001 fe25 	bl	8004f2a <USB_ReadInterrupts>
 80032e0:	0503      	lsls	r3, r0, #20
 80032e2:	d515      	bpl.n	8003310 <HAL_PCD_IRQHandler+0xdc>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80032e4:	2208      	movs	r2, #8
 80032e6:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032e8:	4d8a      	ldr	r5, [pc, #552]	; (8003514 <HAL_PCD_IRQHandler+0x2e0>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80032ea:	1c83      	adds	r3, r0, #2
 80032ec:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80032ee:	430a      	orrs	r2, r1
 80032f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032f2:	1d81      	adds	r1, r0, #6
 80032f4:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80032f6:	402a      	ands	r2, r5
 80032f8:	87ca      	strh	r2, [r1, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80032fa:	2204      	movs	r2, #4
 80032fc:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80032fe:	430a      	orrs	r2, r1
 8003300:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003302:	f001 fe12 	bl	8004f2a <USB_ReadInterrupts>
 8003306:	04c3      	lsls	r3, r0, #19
 8003308:	d402      	bmi.n	8003310 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_SuspendCallback(hpcd);
 800330a:	0020      	movs	r0, r4
 800330c:	f002 fe1c 	bl	8005f48 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	f001 fe0a 	bl	8004f2a <USB_ReadInterrupts>
 8003316:	2580      	movs	r5, #128	; 0x80
 8003318:	4228      	tst	r0, r5
 800331a:	d020      	beq.n	800335e <HAL_PCD_IRQHandler+0x12a>
    if (hpcd->LPM_State == LPM_L0)
 800331c:	2098      	movs	r0, #152	; 0x98
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800331e:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8003320:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003322:	1d99      	adds	r1, r3, #6
 8003324:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8003326:	43aa      	bics	r2, r5
 8003328:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 800332a:	5c22      	ldrb	r2, [r4, r0]
 800332c:	2a00      	cmp	r2, #0
 800332e:	d000      	beq.n	8003332 <HAL_PCD_IRQHandler+0xfe>
 8003330:	e1bb      	b.n	80036aa <HAL_PCD_IRQHandler+0x476>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003332:	2104      	movs	r1, #4
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003338:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800333a:	4329      	orrs	r1, r5
 800333c:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800333e:	2108      	movs	r1, #8
 8003340:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 8003342:	4329      	orrs	r1, r5
 8003344:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8003346:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003348:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800334a:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800334c:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800334e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	4013      	ands	r3, r2
 8003354:	2299      	movs	r2, #153	; 0x99
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800335a:	f000 fa45 	bl	80037e8 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	f001 fde3 	bl	8004f2a <USB_ReadInterrupts>
 8003364:	0583      	lsls	r3, r0, #22
 8003366:	d508      	bpl.n	800337a <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	496b      	ldr	r1, [pc, #428]	; (8003518 <HAL_PCD_IRQHandler+0x2e4>)
 800336c:	3306      	adds	r3, #6
 800336e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003370:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003372:	400a      	ands	r2, r1
 8003374:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003376:	f002 fdcf 	bl	8005f18 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	f001 fdd5 	bl	8004f2a <USB_ReadInterrupts>
 8003380:	05c3      	lsls	r3, r0, #23
 8003382:	d505      	bpl.n	8003390 <HAL_PCD_IRQHandler+0x15c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	4965      	ldr	r1, [pc, #404]	; (800351c <HAL_PCD_IRQHandler+0x2e8>)
 8003388:	3306      	adds	r3, #6
 800338a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800338c:	400a      	ands	r2, r1
 800338e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8003390:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003392:	260f      	movs	r6, #15
    wIstr = hpcd->Instance->ISTR;
 8003394:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8003396:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003398:	400e      	ands	r6, r1
    if (epindex == 0U)
 800339a:	d000      	beq.n	800339e <HAL_PCD_IRQHandler+0x16a>
 800339c:	e0d0      	b.n	8003540 <HAL_PCD_IRQHandler+0x30c>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800339e:	2310      	movs	r3, #16
 80033a0:	4019      	ands	r1, r3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d12f      	bne.n	8003408 <HAL_PCD_IRQHandler+0x1d4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a8:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_PCD_IRQHandler+0x2ec>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4313      	orrs	r3, r2
 80033b2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033b4:	0003      	movs	r3, r0
 80033b6:	3350      	adds	r3, #80	; 0x50
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	0023      	movs	r3, r4
 80033bc:	3328      	adds	r3, #40	; 0x28
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	18c0      	adds	r0, r0, r3
 80033c4:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_PCD_IRQHandler+0x2f0>)
 80033c6:	1880      	adds	r0, r0, r2
 80033c8:	18c0      	adds	r0, r0, r3
 80033ca:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 80033cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ce:	059b      	lsls	r3, r3, #22
 80033d0:	0d9b      	lsrs	r3, r3, #22
 80033d2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033d8:	0020      	movs	r0, r4
 80033da:	f002 fd93 	bl	8005f04 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033de:	1d63      	adds	r3, r4, #5
 80033e0:	7fda      	ldrb	r2, [r3, #31]
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	d009      	beq.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
 80033e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d106      	bne.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	7fd9      	ldrb	r1, [r3, #31]
 80033f0:	4311      	orrs	r1, r2
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	324c      	adds	r2, #76	; 0x4c
 80033f6:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 80033f8:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1d82      	adds	r2, r0, #6
 80033fe:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8003400:	b21b      	sxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	dbc5      	blt.n	8003392 <HAL_PCD_IRQHandler+0x15e>
 8003406:	e71e      	b.n	8003246 <HAL_PCD_IRQHandler+0x12>
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003408:	2680      	movs	r6, #128	; 0x80
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800340a:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800340c:	0136      	lsls	r6, r6, #4
 800340e:	401e      	ands	r6, r3
 8003410:	d021      	beq.n	8003456 <HAL_PCD_IRQHandler+0x222>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003412:	0003      	movs	r3, r0
 8003414:	3350      	adds	r3, #80	; 0x50
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	2394      	movs	r3, #148	; 0x94
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800341e:	218c      	movs	r1, #140	; 0x8c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	18c3      	adds	r3, r0, r3
 8003424:	189b      	adds	r3, r3, r2
 8003426:	4a40      	ldr	r2, [pc, #256]	; (8003528 <HAL_PCD_IRQHandler+0x2f4>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003428:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342a:	189b      	adds	r3, r3, r2
 800342c:	0022      	movs	r2, r4
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	3229      	adds	r2, #41	; 0x29
 8003432:	059b      	lsls	r3, r3, #22
 8003434:	0d9b      	lsrs	r3, r3, #22
 8003436:	32ff      	adds	r2, #255	; 0xff
 8003438:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800343a:	1861      	adds	r1, r4, r1
 800343c:	88d2      	ldrh	r2, [r2, #6]
 800343e:	f001 fe77 	bl	8005130 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	4939      	ldr	r1, [pc, #228]	; (800352c <HAL_PCD_IRQHandler+0x2f8>)
 8003446:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003448:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800344a:	400b      	ands	r3, r1
 800344c:	433b      	orrs	r3, r7
 800344e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003450:	f002 fd44 	bl	8005edc <HAL_PCD_SetupStageCallback>
 8003454:	e7d1      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003456:	b21b      	sxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	dace      	bge.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800345c:	8803      	ldrh	r3, [r0, #0]
 800345e:	4a33      	ldr	r2, [pc, #204]	; (800352c <HAL_PCD_IRQHandler+0x2f8>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003460:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003462:	4013      	ands	r3, r2
 8003464:	433b      	orrs	r3, r7
 8003466:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003468:	0003      	movs	r3, r0
 800346a:	3350      	adds	r3, #80	; 0x50
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	2394      	movs	r3, #148	; 0x94
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	5ce3      	ldrb	r3, [r4, r3]
 8003474:	3529      	adds	r5, #41	; 0x29
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	18c3      	adds	r3, r0, r3
 800347a:	189b      	adds	r3, r3, r2
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <HAL_PCD_IRQHandler+0x2f4>)
 800347e:	35ff      	adds	r5, #255	; 0xff
 8003480:	189b      	adds	r3, r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	0d9b      	lsrs	r3, r3, #22
 8003488:	61eb      	str	r3, [r5, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800348a:	d00d      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x274>
 800348c:	6969      	ldr	r1, [r5, #20]
 800348e:	2900      	cmp	r1, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003492:	88ea      	ldrh	r2, [r5, #6]
 8003494:	f001 fe4c 	bl	8005130 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003498:	696b      	ldr	r3, [r5, #20]
 800349a:	69ea      	ldr	r2, [r5, #28]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800349c:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034a2:	0020      	movs	r0, r4
 80034a4:	f002 fd23 	bl	8005eee <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034a8:	6821      	ldr	r1, [r4, #0]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <HAL_PCD_IRQHandler+0x2f4>)
 80034ac:	000b      	movs	r3, r1
 80034ae:	3350      	adds	r3, #80	; 0x50
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	188a      	adds	r2, r1, r2
 80034b4:	18d2      	adds	r2, r2, r3
 80034b6:	692b      	ldr	r3, [r5, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <HAL_PCD_IRQHandler+0x2a8>
 80034bc:	8813      	ldrh	r3, [r2, #0]
 80034be:	481c      	ldr	r0, [pc, #112]	; (8003530 <HAL_PCD_IRQHandler+0x2fc>)
 80034c0:	4018      	ands	r0, r3
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_PCD_IRQHandler+0x300>)
 80034c4:	4303      	orrs	r3, r0
 80034c6:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034c8:	880b      	ldrh	r3, [r1, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_PCD_IRQHandler+0x304>)
 80034cc:	401a      	ands	r2, r3
 80034ce:	23c0      	movs	r3, #192	; 0xc0
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	4053      	eors	r3, r2
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_PCD_IRQHandler+0x308>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	800b      	strh	r3, [r1, #0]
 80034da:	e78e      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034dc:	2b3e      	cmp	r3, #62	; 0x3e
 80034de:	d806      	bhi.n	80034ee <HAL_PCD_IRQHandler+0x2ba>
 80034e0:	2501      	movs	r5, #1
 80034e2:	0858      	lsrs	r0, r3, #1
 80034e4:	402b      	ands	r3, r5
 80034e6:	18c0      	adds	r0, r0, r3
 80034e8:	0280      	lsls	r0, r0, #10
 80034ea:	8010      	strh	r0, [r2, #0]
 80034ec:	e7ec      	b.n	80034c8 <HAL_PCD_IRQHandler+0x294>
 80034ee:	251f      	movs	r5, #31
 80034f0:	0958      	lsrs	r0, r3, #5
 80034f2:	402b      	ands	r3, r5
 80034f4:	425d      	negs	r5, r3
 80034f6:	416b      	adcs	r3, r5
 80034f8:	1ac0      	subs	r0, r0, r3
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_PCD_IRQHandler+0x300>)
 80034fc:	0280      	lsls	r0, r0, #10
 80034fe:	4318      	orrs	r0, r3
 8003500:	e7f3      	b.n	80034ea <HAL_PCD_IRQHandler+0x2b6>
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	fffffbff 	.word	0xfffffbff
 8003508:	ffffbfff 	.word	0xffffbfff
 800350c:	ffffdfff 	.word	0xffffdfff
 8003510:	ffffefff 	.word	0xffffefff
 8003514:	fffff7ff 	.word	0xfffff7ff
 8003518:	fffffdff 	.word	0xfffffdff
 800351c:	fffffeff 	.word	0xfffffeff
 8003520:	ffff8f0f 	.word	0xffff8f0f
 8003524:	00000402 	.word	0x00000402
 8003528:	00000406 	.word	0x00000406
 800352c:	00000f8f 	.word	0x00000f8f
 8003530:	ffff83ff 	.word	0xffff83ff
 8003534:	ffff8000 	.word	0xffff8000
 8003538:	ffffbf8f 	.word	0xffffbf8f
 800353c:	00008080 	.word	0x00008080
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003540:	00b3      	lsls	r3, r6, #2
 8003542:	18c2      	adds	r2, r0, r3
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	8813      	ldrh	r3, [r2, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	9300      	str	r3, [sp, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800354c:	466b      	mov	r3, sp
 800354e:	2100      	movs	r1, #0
 8003550:	5e5b      	ldrsh	r3, [r3, r1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da3c      	bge.n	80035d0 <HAL_PCD_IRQHandler+0x39c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003556:	8813      	ldrh	r3, [r2, #0]
 8003558:	4956      	ldr	r1, [pc, #344]	; (80036b4 <HAL_PCD_IRQHandler+0x480>)
 800355a:	0005      	movs	r5, r0
 800355c:	400b      	ands	r3, r1
 800355e:	433b      	orrs	r3, r7
 8003560:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8003562:	0173      	lsls	r3, r6, #5
 8003564:	18e3      	adds	r3, r4, r3
 8003566:	001a      	movs	r2, r3
 8003568:	3235      	adds	r2, #53	; 0x35
 800356a:	32ff      	adds	r2, #255	; 0xff
 800356c:	7811      	ldrb	r1, [r2, #0]
 800356e:	3550      	adds	r5, #80	; 0x50
 8003570:	3a0c      	subs	r2, #12
 8003572:	2900      	cmp	r1, #0
 8003574:	d156      	bne.n	8003624 <HAL_PCD_IRQHandler+0x3f0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	8829      	ldrh	r1, [r5, #0]
 800357a:	00d2      	lsls	r2, r2, #3
 800357c:	1852      	adds	r2, r2, r1
 800357e:	494e      	ldr	r1, [pc, #312]	; (80036b8 <HAL_PCD_IRQHandler+0x484>)
 8003580:	1812      	adds	r2, r2, r0
 8003582:	1852      	adds	r2, r2, r1
 8003584:	8815      	ldrh	r5, [r2, #0]
 8003586:	05ad      	lsls	r5, r5, #22
 8003588:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 800358a:	d008      	beq.n	800359e <HAL_PCD_IRQHandler+0x36a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800358c:	001a      	movs	r2, r3
 800358e:	33fc      	adds	r3, #252	; 0xfc
 8003590:	0019      	movs	r1, r3
 8003592:	32fe      	adds	r2, #254	; 0xfe
 8003594:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003596:	002b      	movs	r3, r5
 8003598:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800359a:	f001 fdc9 	bl	8005130 <USB_ReadPMA>
 800359e:	0171      	lsls	r1, r6, #5
 80035a0:	1863      	adds	r3, r4, r1
        ep->xfer_count += count;
 80035a2:	0018      	movs	r0, r3
 80035a4:	30fc      	adds	r0, #252	; 0xfc
 80035a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	1952      	adds	r2, r2, r5
 80035ac:	6482      	str	r2, [r0, #72]	; 0x48
        ep->xfer_buff += count;
 80035ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
        ep->xfer_buff += count;
 80035b2:	1952      	adds	r2, r2, r5
 80035b4:	6402      	str	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035b6:	469c      	mov	ip, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x38e>
 80035bc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80035be:	4285      	cmp	r5, r0
 80035c0:	d267      	bcs.n	8003692 <HAL_PCD_IRQHandler+0x45e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035c2:	1861      	adds	r1, r4, r1
 80035c4:	3129      	adds	r1, #41	; 0x29
 80035c6:	31ff      	adds	r1, #255	; 0xff
 80035c8:	7809      	ldrb	r1, [r1, #0]
 80035ca:	0020      	movs	r0, r4
 80035cc:	f002 fc8f 	bl	8005eee <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035d0:	9b00      	ldr	r3, [sp, #0]
 80035d2:	423b      	tst	r3, r7
 80035d4:	d100      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x3a4>
 80035d6:	e710      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
 80035d8:	6823      	ldr	r3, [r4, #0]
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035da:	00b2      	lsls	r2, r6, #2
 80035dc:	1899      	adds	r1, r3, r2
 80035de:	880a      	ldrh	r2, [r1, #0]
 80035e0:	4836      	ldr	r0, [pc, #216]	; (80036bc <HAL_PCD_IRQHandler+0x488>)

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035e2:	0176      	lsls	r6, r6, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035e4:	4002      	ands	r2, r0
 80035e6:	2080      	movs	r0, #128	; 0x80
 80035e8:	0200      	lsls	r0, r0, #8
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035ea:	19a6      	adds	r6, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035ec:	4302      	orrs	r2, r0
 80035ee:	800a      	strh	r2, [r1, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035f0:	0031      	movs	r1, r6
 80035f2:	001a      	movs	r2, r3
 80035f4:	3128      	adds	r1, #40	; 0x28
 80035f6:	7808      	ldrb	r0, [r1, #0]
 80035f8:	3250      	adds	r2, #80	; 0x50
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	00c0      	lsls	r0, r0, #3
 80035fe:	181b      	adds	r3, r3, r0
 8003600:	189b      	adds	r3, r3, r2
 8003602:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <HAL_PCD_IRQHandler+0x48c>)
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003604:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003606:	189b      	adds	r3, r3, r2
 8003608:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800360a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800360c:	0592      	lsls	r2, r2, #22
 800360e:	0d92      	lsrs	r2, r2, #22
 8003610:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003612:	189a      	adds	r2, r3, r2
        if (ep->xfer_len == 0U)
 8003614:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8003616:	63f2      	str	r2, [r6, #60]	; 0x3c
 8003618:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 800361a:	2b00      	cmp	r3, #0
 800361c:	d142      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x470>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800361e:	f002 fc71 	bl	8005f04 <HAL_PCD_DataInStageCallback>
 8003622:	e6ea      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	0091      	lsls	r1, r2, #2
 8003628:	1841      	adds	r1, r0, r1
 800362a:	8809      	ldrh	r1, [r1, #0]
 800362c:	468c      	mov	ip, r1
 800362e:	00d1      	lsls	r1, r2, #3
 8003630:	4662      	mov	r2, ip
 8003632:	0452      	lsls	r2, r2, #17
 8003634:	d520      	bpl.n	8003678 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003636:	882a      	ldrh	r2, [r5, #0]
 8003638:	1882      	adds	r2, r0, r2
 800363a:	1852      	adds	r2, r2, r1
 800363c:	4920      	ldr	r1, [pc, #128]	; (80036c0 <HAL_PCD_IRQHandler+0x48c>)
 800363e:	1852      	adds	r2, r2, r1
 8003640:	8815      	ldrh	r5, [r2, #0]
 8003642:	05ad      	lsls	r5, r5, #22
 8003644:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8003646:	d008      	beq.n	800365a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003648:	001a      	movs	r2, r3
 800364a:	32fe      	adds	r2, #254	; 0xfe
 800364c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800364e:	33fc      	adds	r3, #252	; 0xfc
 8003650:	0019      	movs	r1, r3
 8003652:	002b      	movs	r3, r5
 8003654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003656:	f001 fd6b 	bl	8005130 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800365a:	0173      	lsls	r3, r6, #5
 800365c:	18e3      	adds	r3, r4, r3
 800365e:	3329      	adds	r3, #41	; 0x29
 8003660:	33ff      	adds	r3, #255	; 0xff
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	189a      	adds	r2, r3, r2
 800366a:	8813      	ldrh	r3, [r2, #0]
 800366c:	4915      	ldr	r1, [pc, #84]	; (80036c4 <HAL_PCD_IRQHandler+0x490>)
 800366e:	400b      	ands	r3, r1
 8003670:	4915      	ldr	r1, [pc, #84]	; (80036c8 <HAL_PCD_IRQHandler+0x494>)
 8003672:	430b      	orrs	r3, r1
 8003674:	8013      	strh	r3, [r2, #0]
 8003676:	e792      	b.n	800359e <HAL_PCD_IRQHandler+0x36a>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003678:	882a      	ldrh	r2, [r5, #0]
 800367a:	1882      	adds	r2, r0, r2
 800367c:	1852      	adds	r2, r2, r1
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_PCD_IRQHandler+0x484>)
 8003680:	1852      	adds	r2, r2, r1
 8003682:	8815      	ldrh	r5, [r2, #0]
 8003684:	05ad      	lsls	r5, r5, #22
 8003686:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8003688:	d0e7      	beq.n	800365a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800368a:	001a      	movs	r2, r3
 800368c:	32fe      	adds	r2, #254	; 0xfe
 800368e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8003690:	e7dd      	b.n	800364e <HAL_PCD_IRQHandler+0x41a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	0020      	movs	r0, r4
 8003696:	3329      	adds	r3, #41	; 0x29
 8003698:	33ff      	adds	r3, #255	; 0xff
 800369a:	7819      	ldrb	r1, [r3, #0]
 800369c:	4663      	mov	r3, ip
 800369e:	f7ff fd90 	bl	80031c2 <HAL_PCD_EP_Receive>
 80036a2:	e795      	b.n	80035d0 <HAL_PCD_IRQHandler+0x39c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80036a4:	f7ff fdaf 	bl	8003206 <HAL_PCD_EP_Transmit>
 80036a8:	e6a7      	b.n	80033fa <HAL_PCD_IRQHandler+0x1c6>
      HAL_PCD_SuspendCallback(hpcd);
 80036aa:	0020      	movs	r0, r4
 80036ac:	f002 fc4c 	bl	8005f48 <HAL_PCD_SuspendCallback>
 80036b0:	e655      	b.n	800335e <HAL_PCD_IRQHandler+0x12a>
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	00000f8f 	.word	0x00000f8f
 80036b8:	00000406 	.word	0x00000406
 80036bc:	ffff8f0f 	.word	0xffff8f0f
 80036c0:	00000402 	.word	0x00000402
 80036c4:	ffff8f8f 	.word	0xffff8f8f
 80036c8:	000080c0 	.word	0x000080c0

080036cc <HAL_PCD_EP_SetStall>:
{
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0004      	movs	r4, r0
 80036d0:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	400d      	ands	r5, r1
    return HAL_ERROR;
 80036d6:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036d8:	429d      	cmp	r5, r3
 80036da:	d820      	bhi.n	800371e <HAL_PCD_EP_SetStall+0x52>
  if ((0x80U & ep_addr) == 0x80U)
 80036dc:	b24b      	sxtb	r3, r1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da1e      	bge.n	8003720 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	016b      	lsls	r3, r5, #5
 80036e4:	0019      	movs	r1, r3
    ep->is_in = 1U;
 80036e6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 80036ea:	3329      	adds	r3, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ec:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80036ee:	7018      	strb	r0, [r3, #0]
  ep->is_stall = 1U;
 80036f0:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80036f2:	268a      	movs	r6, #138	; 0x8a
  ep->is_stall = 1U;
 80036f4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80036f8:	00b6      	lsls	r6, r6, #2
 80036fa:	5da2      	ldrb	r2, [r4, r6]
 80036fc:	2002      	movs	r0, #2
 80036fe:	429a      	cmp	r2, r3
 8003700:	d00d      	beq.n	800371e <HAL_PCD_EP_SetStall+0x52>
 8003702:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	f001 fba1 	bl	8004e4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370a:	2d00      	cmp	r5, #0
 800370c:	d105      	bne.n	800371a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800370e:	238c      	movs	r3, #140	; 0x8c
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	18e1      	adds	r1, r4, r3
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	f001 fc0c 	bl	8004f32 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800371a:	2000      	movs	r0, #0
 800371c:	55a0      	strb	r0, [r4, r6]
}
 800371e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003720:	014b      	lsls	r3, r1, #5
 8003722:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003724:	2200      	movs	r2, #0
 8003726:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8003728:	3129      	adds	r1, #41	; 0x29
    ep->is_in = 0U;
 800372a:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr];
 800372c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800372e:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8003730:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e7dc      	b.n	80036f0 <HAL_PCD_EP_SetStall+0x24>

08003736 <HAL_PCD_EP_ClrStall>:
{
 8003736:	b570      	push	{r4, r5, r6, lr}
 8003738:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800373a:	230f      	movs	r3, #15
 800373c:	6862      	ldr	r2, [r4, #4]
 800373e:	400b      	ands	r3, r1
    return HAL_ERROR;
 8003740:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003742:	4293      	cmp	r3, r2
 8003744:	d81a      	bhi.n	800377c <HAL_PCD_EP_ClrStall+0x46>
 8003746:	2507      	movs	r5, #7
 8003748:	400d      	ands	r5, r1
 800374a:	016b      	lsls	r3, r5, #5
  if ((0x80U & ep_addr) == 0x80U)
 800374c:	b249      	sxtb	r1, r1
 800374e:	18e2      	adds	r2, r4, r3
 8003750:	2900      	cmp	r1, #0
 8003752:	da14      	bge.n	800377e <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003754:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8003756:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003758:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800375a:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 0U;
 800375e:	2600      	movs	r6, #0
  __HAL_LOCK(hpcd);
 8003760:	258a      	movs	r5, #138	; 0x8a
  ep->is_stall = 0U;
 8003762:	708e      	strb	r6, [r1, #2]
  __HAL_LOCK(hpcd);
 8003764:	00ad      	lsls	r5, r5, #2
 8003766:	5d63      	ldrb	r3, [r4, r5]
 8003768:	2002      	movs	r0, #2
 800376a:	2b01      	cmp	r3, #1
 800376c:	d006      	beq.n	800377c <HAL_PCD_EP_ClrStall+0x46>
 800376e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003770:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003772:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003774:	f001 fb88 	bl	8004e88 <USB_EPClearStall>
  return HAL_OK;
 8003778:	0030      	movs	r0, r6
  __HAL_UNLOCK(hpcd);
 800377a:	5566      	strb	r6, [r4, r5]
}
 800377c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	3329      	adds	r3, #41	; 0x29
 8003780:	33ff      	adds	r3, #255	; 0xff
 8003782:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	322a      	adds	r2, #42	; 0x2a
 8003788:	32ff      	adds	r2, #255	; 0xff
 800378a:	7013      	strb	r3, [r2, #0]
 800378c:	e7e6      	b.n	800375c <HAL_PCD_EP_ClrStall+0x26>

0800378e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800378e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003790:	060c      	lsls	r4, r1, #24
 8003792:	d50b      	bpl.n	80037ac <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003794:	2407      	movs	r4, #7
 8003796:	4021      	ands	r1, r4
 8003798:	0149      	lsls	r1, r1, #5
 800379a:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800379c:	1841      	adds	r1, r0, r1
 800379e:	b298      	uxth	r0, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037a4:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037a6:	80c8      	strh	r0, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80037a8:	2000      	movs	r0, #0
 80037aa:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80037ac:	0149      	lsls	r1, r1, #5
 80037ae:	3129      	adds	r1, #41	; 0x29
 80037b0:	31ff      	adds	r1, #255	; 0xff
 80037b2:	e7f3      	b.n	800379c <HAL_PCDEx_PMAConfig+0xe>
    ep->doublebuffer = 1U;
 80037b4:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037b6:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80037b8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037ba:	8108      	strh	r0, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037bc:	814b      	strh	r3, [r1, #10]
 80037be:	e7f3      	b.n	80037a8 <HAL_PCDEx_PMAConfig+0x1a>

080037c0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80037c0:	6803      	ldr	r3, [r0, #0]
{
 80037c2:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 80037c4:	209a      	movs	r0, #154	; 0x9a
 80037c6:	2201      	movs	r2, #1
{
 80037c8:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80037ca:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80037cc:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 80037ce:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 80037d0:	2000      	movs	r0, #0
 80037d2:	00a4      	lsls	r4, r4, #2
 80037d4:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037d6:	3354      	adds	r3, #84	; 0x54
 80037d8:	8819      	ldrh	r1, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037de:	2202      	movs	r2, #2
 80037e0:	8819      	ldrh	r1, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_PWR_EnableBkUpAccess+0x10>)
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6013      	str	r3, [r2, #0]
}
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40007000 	.word	0x40007000

08003800 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003802:	f7ff f933 	bl	8002a6c <HAL_GetTick>
  
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003806:	2381      	movs	r3, #129	; 0x81
  tickstart = HAL_GetTick();
 8003808:	0005      	movs	r5, r0

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800380a:	2602      	movs	r6, #2
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 800380c:	4c24      	ldr	r4, [pc, #144]	; (80038a0 <HAL_RCC_DeInit+0xa0>)
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	6023      	str	r3, [r4, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	4233      	tst	r3, r6
 8003818:	d02a      	beq.n	8003870 <HAL_RCC_DeInit+0x70>

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);

  /* Wait till HSI as SYSCLK status is enabled */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800381a:	260c      	movs	r6, #12
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_RCC_DeInit+0xa4>)
 8003820:	4013      	ands	r3, r2
 8003822:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	4233      	tst	r3, r6
 8003828:	d12a      	bne.n	8003880 <HAL_RCC_DeInit+0x80>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_RCC_DeInit+0xa8>)
 800382c:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <HAL_RCC_DeInit+0xac>)
 800382e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_RCC_DeInit+0xb0>)
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f7ff f8da 	bl	80029ec <HAL_InitTick>
 8003838:	1e05      	subs	r5, r0, #0
 800383a:	d12e      	bne.n	800389a <HAL_RCC_DeInit+0x9a>
  {
    return HAL_ERROR;
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_RCC_DeInit+0xb4>)

  /* Get start tick */
  tickstart = HAL_GetTick();
  
  /* Wait till PLLRDY is cleared */
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003840:	2680      	movs	r6, #128	; 0x80
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003842:	4013      	ands	r3, r2
 8003844:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_RCC_DeInit+0xb8>)
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800384a:	04b6      	lsls	r6, r6, #18
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800384c:	4013      	ands	r3, r2
 800384e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003850:	f7ff f90c 	bl	8002a6c <HAL_GetTick>
 8003854:	0007      	movs	r7, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	4033      	ands	r3, r6
 800385a:	d118      	bne.n	800388e <HAL_RCC_DeInit+0x8e>
      return HAL_TIMEOUT;
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800385c:	6063      	str	r3, [r4, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800385e:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8003860:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003862:	60a3      	str	r3, [r4, #8]

  /* Clear all reset flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003868:	045b      	lsls	r3, r3, #17
 800386a:	4313      	orrs	r3, r2
 800386c:	6263      	str	r3, [r4, #36]	; 0x24

  return HAL_OK;
 800386e:	e005      	b.n	800387c <HAL_RCC_DeInit+0x7c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7ff f8fc 	bl	8002a6c <HAL_GetTick>
 8003874:	1b40      	subs	r0, r0, r5
 8003876:	2802      	cmp	r0, #2
 8003878:	d9cc      	bls.n	8003814 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
 800387a:	2503      	movs	r5, #3
}
 800387c:	0028      	movs	r0, r5
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7ff f8f4 	bl	8002a6c <HAL_GetTick>
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCC_DeInit+0xbc>)
 8003886:	1b40      	subs	r0, r0, r5
 8003888:	4298      	cmp	r0, r3
 800388a:	d9cb      	bls.n	8003824 <HAL_RCC_DeInit+0x24>
 800388c:	e7f5      	b.n	800387a <HAL_RCC_DeInit+0x7a>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7ff f8ed 	bl	8002a6c <HAL_GetTick>
 8003892:	1bc0      	subs	r0, r0, r7
 8003894:	2802      	cmp	r0, #2
 8003896:	d9de      	bls.n	8003856 <HAL_RCC_DeInit+0x56>
 8003898:	e7ef      	b.n	800387a <HAL_RCC_DeInit+0x7a>
    return HAL_ERROR;
 800389a:	2501      	movs	r5, #1
 800389c:	e7ee      	b.n	800387c <HAL_RCC_DeInit+0x7c>
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	40021000 	.word	0x40021000
 80038a4:	f0fff80c 	.word	0xf0fff80c
 80038a8:	20000008 	.word	0x20000008
 80038ac:	007a1200 	.word	0x007a1200
 80038b0:	20000010 	.word	0x20000010
 80038b4:	fef6ffff 	.word	0xfef6ffff
 80038b8:	fffbffff 	.word	0xfffbffff
 80038bc:	00001388 	.word	0x00001388

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	0004      	movs	r4, r0
 80038c4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80038cc:	b005      	add	sp, #20
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d0:	6803      	ldr	r3, [r0, #0]
 80038d2:	07db      	lsls	r3, r3, #31
 80038d4:	d42f      	bmi.n	8003936 <HAL_RCC_OscConfig+0x76>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	079b      	lsls	r3, r3, #30
 80038da:	d500      	bpl.n	80038de <HAL_RCC_OscConfig+0x1e>
 80038dc:	e083      	b.n	80039e6 <HAL_RCC_OscConfig+0x126>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	d500      	bpl.n	80038e6 <HAL_RCC_OscConfig+0x26>
 80038e4:	e0c4      	b.n	8003a70 <HAL_RCC_OscConfig+0x1b0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	075b      	lsls	r3, r3, #29
 80038ea:	d500      	bpl.n	80038ee <HAL_RCC_OscConfig+0x2e>
 80038ec:	e0e7      	b.n	8003abe <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	06db      	lsls	r3, r3, #27
 80038f2:	d51a      	bpl.n	800392a <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038f4:	6962      	ldr	r2, [r4, #20]
 80038f6:	4dba      	ldr	r5, [pc, #744]	; (8003be0 <HAL_RCC_OscConfig+0x320>)
 80038f8:	2304      	movs	r3, #4
 80038fa:	2a01      	cmp	r2, #1
 80038fc:	d000      	beq.n	8003900 <HAL_RCC_OscConfig+0x40>
 80038fe:	e153      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003900:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003902:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003904:	430b      	orrs	r3, r1
 8003906:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003908:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800390a:	431a      	orrs	r2, r3
 800390c:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800390e:	f7ff f8ad 	bl	8002a6c <HAL_GetTick>
 8003912:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003914:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003916:	4233      	tst	r3, r6
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x5c>
 800391a:	e13e      	b.n	8003b9a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800391c:	21f8      	movs	r1, #248	; 0xf8
 800391e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003920:	69a3      	ldr	r3, [r4, #24]
 8003922:	438a      	bics	r2, r1
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4313      	orrs	r3, r2
 8003928:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392a:	6a23      	ldr	r3, [r4, #32]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d000      	beq.n	8003932 <HAL_RCC_OscConfig+0x72>
 8003930:	e162      	b.n	8003bf8 <HAL_RCC_OscConfig+0x338>
  return HAL_OK;
 8003932:	2000      	movs	r0, #0
 8003934:	e7ca      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003936:	210c      	movs	r1, #12
 8003938:	4da9      	ldr	r5, [pc, #676]	; (8003be0 <HAL_RCC_OscConfig+0x320>)
 800393a:	686a      	ldr	r2, [r5, #4]
 800393c:	400a      	ands	r2, r1
 800393e:	2a04      	cmp	r2, #4
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003942:	686b      	ldr	r3, [r5, #4]
 8003944:	400b      	ands	r3, r1
 8003946:	2b08      	cmp	r3, #8
 8003948:	d10e      	bne.n	8003968 <HAL_RCC_OscConfig+0xa8>
 800394a:	22c0      	movs	r2, #192	; 0xc0
 800394c:	686b      	ldr	r3, [r5, #4]
 800394e:	0252      	lsls	r2, r2, #9
 8003950:	4013      	ands	r3, r2
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	0252      	lsls	r2, r2, #9
 8003956:	4293      	cmp	r3, r2
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	039b      	lsls	r3, r3, #14
 800395e:	d5ba      	bpl.n	80038d6 <HAL_RCC_OscConfig+0x16>
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1b7      	bne.n	80038d6 <HAL_RCC_OscConfig+0x16>
 8003966:	e7b0      	b.n	80038ca <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d113      	bne.n	8003996 <HAL_RCC_OscConfig+0xd6>
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	682a      	ldr	r2, [r5, #0]
 8003972:	025b      	lsls	r3, r3, #9
 8003974:	4313      	orrs	r3, r2
 8003976:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003978:	f7ff f878 	bl	8002a6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800397e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003980:	02b6      	lsls	r6, r6, #10
 8003982:	682b      	ldr	r3, [r5, #0]
 8003984:	4233      	tst	r3, r6
 8003986:	d1a6      	bne.n	80038d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7ff f870 	bl	8002a6c <HAL_GetTick>
 800398c:	1bc0      	subs	r0, r0, r7
 800398e:	2864      	cmp	r0, #100	; 0x64
 8003990:	d9f7      	bls.n	8003982 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8003992:	2003      	movs	r0, #3
 8003994:	e79a      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003996:	2b00      	cmp	r3, #0
 8003998:	d115      	bne.n	80039c6 <HAL_RCC_OscConfig+0x106>
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	4a91      	ldr	r2, [pc, #580]	; (8003be4 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	4013      	ands	r3, r2
 80039a2:	602b      	str	r3, [r5, #0]
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	4a90      	ldr	r2, [pc, #576]	; (8003be8 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	4013      	ands	r3, r2
 80039ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039ae:	f7ff f85d 	bl	8002a6c <HAL_GetTick>
 80039b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	4233      	tst	r3, r6
 80039b8:	d08d      	beq.n	80038d6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ba:	f7ff f857 	bl	8002a6c <HAL_GetTick>
 80039be:	1bc0      	subs	r0, r0, r7
 80039c0:	2864      	cmp	r0, #100	; 0x64
 80039c2:	d9f7      	bls.n	80039b4 <HAL_RCC_OscConfig+0xf4>
 80039c4:	e7e5      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x116>
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	682a      	ldr	r2, [r5, #0]
 80039ce:	02db      	lsls	r3, r3, #11
 80039d0:	4313      	orrs	r3, r2
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	e7cb      	b.n	800396e <HAL_RCC_OscConfig+0xae>
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	4a82      	ldr	r2, [pc, #520]	; (8003be4 <HAL_RCC_OscConfig+0x324>)
 80039da:	4013      	ands	r3, r2
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	4a81      	ldr	r2, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x328>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	e7c7      	b.n	8003976 <HAL_RCC_OscConfig+0xb6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039e6:	220c      	movs	r2, #12
 80039e8:	4d7d      	ldr	r5, [pc, #500]	; (8003be0 <HAL_RCC_OscConfig+0x320>)
 80039ea:	686b      	ldr	r3, [r5, #4]
 80039ec:	4213      	tst	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x148>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039f0:	686b      	ldr	r3, [r5, #4]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d116      	bne.n	8003a26 <HAL_RCC_OscConfig+0x166>
 80039f8:	22c0      	movs	r2, #192	; 0xc0
 80039fa:	686b      	ldr	r3, [r5, #4]
 80039fc:	0252      	lsls	r2, r2, #9
 80039fe:	4013      	ands	r3, r2
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0212      	lsls	r2, r2, #8
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10e      	bne.n	8003a26 <HAL_RCC_OscConfig+0x166>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	079b      	lsls	r3, r3, #30
 8003a0c:	d503      	bpl.n	8003a16 <HAL_RCC_OscConfig+0x156>
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d000      	beq.n	8003a16 <HAL_RCC_OscConfig+0x156>
 8003a14:	e759      	b.n	80038ca <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	21f8      	movs	r1, #248	; 0xf8
 8003a18:	682a      	ldr	r2, [r5, #0]
 8003a1a:	6923      	ldr	r3, [r4, #16]
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	e75b      	b.n	80038de <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a26:	68e2      	ldr	r2, [r4, #12]
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	d00f      	beq.n	8003a4e <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_ENABLE();
 8003a2e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8003a32:	4313      	orrs	r3, r2
 8003a34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a36:	f7ff f819 	bl	8002a6c <HAL_GetTick>
 8003a3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	4233      	tst	r3, r6
 8003a40:	d1e9      	bne.n	8003a16 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7ff f813 	bl	8002a6c <HAL_GetTick>
 8003a46:	1bc0      	subs	r0, r0, r7
 8003a48:	2802      	cmp	r0, #2
 8003a4a:	d9f7      	bls.n	8003a3c <HAL_RCC_OscConfig+0x17c>
 8003a4c:	e7a1      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_HSI_DISABLE();
 8003a4e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a50:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8003a52:	439a      	bics	r2, r3
 8003a54:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003a56:	f7ff f809 	bl	8002a6c <HAL_GetTick>
 8003a5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	4233      	tst	r3, r6
 8003a60:	d100      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1a4>
 8003a62:	e73c      	b.n	80038de <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7ff f802 	bl	8002a6c <HAL_GetTick>
 8003a68:	1bc0      	subs	r0, r0, r7
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d9f6      	bls.n	8003a5c <HAL_RCC_OscConfig+0x19c>
 8003a6e:	e790      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a70:	69e2      	ldr	r2, [r4, #28]
 8003a72:	2301      	movs	r3, #1
 8003a74:	4d5a      	ldr	r5, [pc, #360]	; (8003be0 <HAL_RCC_OscConfig+0x320>)
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003a82:	f7fe fff3 	bl	8002a6c <HAL_GetTick>
 8003a86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a8a:	4233      	tst	r3, r6
 8003a8c:	d000      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1d0>
 8003a8e:	e72a      	b.n	80038e6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe ffec 	bl	8002a6c <HAL_GetTick>
 8003a94:	1bc0      	subs	r0, r0, r7
 8003a96:	2802      	cmp	r0, #2
 8003a98:	d9f6      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1c8>
 8003a9a:	e77a      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8003aa0:	439a      	bics	r2, r3
 8003aa2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003aa4:	f7fe ffe2 	bl	8002a6c <HAL_GetTick>
 8003aa8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003aac:	4233      	tst	r3, r6
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x1f2>
 8003ab0:	e719      	b.n	80038e6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab2:	f7fe ffdb 	bl	8002a6c <HAL_GetTick>
 8003ab6:	1bc0      	subs	r0, r0, r7
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d9f6      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1ea>
 8003abc:	e769      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abe:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4d47      	ldr	r5, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x320>)
 8003ac4:	0552      	lsls	r2, r2, #21
 8003ac6:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003ac8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4213      	tst	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	69eb      	ldr	r3, [r5, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61eb      	str	r3, [r5, #28]
 8003ad4:	69eb      	ldr	r3, [r5, #28]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	9303      	str	r3, [sp, #12]
 8003ada:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003adc:	2301      	movs	r3, #1
 8003ade:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	2780      	movs	r7, #128	; 0x80
 8003ae2:	4e42      	ldr	r6, [pc, #264]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	007f      	lsls	r7, r7, #1
 8003ae6:	6833      	ldr	r3, [r6, #0]
 8003ae8:	423b      	tst	r3, r7
 8003aea:	d006      	beq.n	8003afa <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aec:	68a3      	ldr	r3, [r4, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d113      	bne.n	8003b1a <HAL_RCC_OscConfig+0x25a>
 8003af2:	6a2a      	ldr	r2, [r5, #32]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	622b      	str	r3, [r5, #32]
 8003af8:	e030      	b.n	8003b5c <HAL_RCC_OscConfig+0x29c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	6833      	ldr	r3, [r6, #0]
 8003afc:	433b      	orrs	r3, r7
 8003afe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b00:	f7fe ffb4 	bl	8002a6c <HAL_GetTick>
 8003b04:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	6833      	ldr	r3, [r6, #0]
 8003b08:	423b      	tst	r3, r7
 8003b0a:	d1ef      	bne.n	8003aec <HAL_RCC_OscConfig+0x22c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe ffae 	bl	8002a6c <HAL_GetTick>
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	1ac0      	subs	r0, r0, r3
 8003b14:	2864      	cmp	r0, #100	; 0x64
 8003b16:	d9f6      	bls.n	8003b06 <HAL_RCC_OscConfig+0x246>
 8003b18:	e73b      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
 8003b1a:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d114      	bne.n	8003b4a <HAL_RCC_OscConfig+0x28a>
 8003b20:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b24:	4393      	bics	r3, r2
 8003b26:	622b      	str	r3, [r5, #32]
 8003b28:	6a2b      	ldr	r3, [r5, #32]
 8003b2a:	3203      	adds	r2, #3
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003b30:	f7fe ff9c 	bl	8002a6c <HAL_GetTick>
 8003b34:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	6a2b      	ldr	r3, [r5, #32]
 8003b38:	423b      	tst	r3, r7
 8003b3a:	d025      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fe ff96 	bl	8002a6c <HAL_GetTick>
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x330>)
 8003b42:	1b80      	subs	r0, r0, r6
 8003b44:	4298      	cmp	r0, r3
 8003b46:	d9f6      	bls.n	8003b36 <HAL_RCC_OscConfig+0x276>
 8003b48:	e723      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d10b      	bne.n	8003b66 <HAL_RCC_OscConfig+0x2a6>
 8003b4e:	6a29      	ldr	r1, [r5, #32]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	430b      	orrs	r3, r1
 8003b54:	622b      	str	r3, [r5, #32]
 8003b56:	6a2b      	ldr	r3, [r5, #32]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8003b5c:	f7fe ff86 	bl	8002a6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003b62:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00d      	b.n	8003b82 <HAL_RCC_OscConfig+0x2c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b66:	6a2b      	ldr	r3, [r5, #32]
 8003b68:	4393      	bics	r3, r2
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	622b      	str	r3, [r5, #32]
 8003b6e:	6a2b      	ldr	r3, [r5, #32]
 8003b70:	4393      	bics	r3, r2
 8003b72:	e7c0      	b.n	8003af6 <HAL_RCC_OscConfig+0x236>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe ff7a 	bl	8002a6c <HAL_GetTick>
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x330>)
 8003b7a:	1b80      	subs	r0, r0, r6
 8003b7c:	4298      	cmp	r0, r3
 8003b7e:	d900      	bls.n	8003b82 <HAL_RCC_OscConfig+0x2c2>
 8003b80:	e707      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	6a2b      	ldr	r3, [r5, #32]
 8003b84:	423b      	tst	r3, r7
 8003b86:	d0f5      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8003b88:	9b00      	ldr	r3, [sp, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d000      	beq.n	8003b90 <HAL_RCC_OscConfig+0x2d0>
 8003b8e:	e6ae      	b.n	80038ee <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	69eb      	ldr	r3, [r5, #28]
 8003b92:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x334>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	61eb      	str	r3, [r5, #28]
 8003b98:	e6a9      	b.n	80038ee <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b9a:	f7fe ff67 	bl	8002a6c <HAL_GetTick>
 8003b9e:	1bc0      	subs	r0, r0, r7
 8003ba0:	2802      	cmp	r0, #2
 8003ba2:	d800      	bhi.n	8003ba6 <HAL_RCC_OscConfig+0x2e6>
 8003ba4:	e6b6      	b.n	8003914 <HAL_RCC_OscConfig+0x54>
 8003ba6:	e6f4      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ba8:	3205      	adds	r2, #5
 8003baa:	d103      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003bac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003bae:	439a      	bics	r2, r3
 8003bb0:	636a      	str	r2, [r5, #52]	; 0x34
 8003bb2:	e6b3      	b.n	800391c <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bb4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bb6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bb8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003bba:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bbc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003bbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003bc4:	f7fe ff52 	bl	8002a6c <HAL_GetTick>
 8003bc8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003bcc:	4233      	tst	r3, r6
 8003bce:	d100      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x312>
 8003bd0:	e6ab      	b.n	800392a <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bd2:	f7fe ff4b 	bl	8002a6c <HAL_GetTick>
 8003bd6:	1bc0      	subs	r0, r0, r7
 8003bd8:	2802      	cmp	r0, #2
 8003bda:	d9f6      	bls.n	8003bca <HAL_RCC_OscConfig+0x30a>
 8003bdc:	e6d9      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40021000 	.word	0x40021000
 8003be4:	fffeffff 	.word	0xfffeffff
 8003be8:	fffbffff 	.word	0xfffbffff
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	00001388 	.word	0x00001388
 8003bf4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	200c      	movs	r0, #12
 8003bfa:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <HAL_RCC_OscConfig+0x410>)
 8003bfc:	6851      	ldr	r1, [r2, #4]
 8003bfe:	0015      	movs	r5, r2
 8003c00:	4001      	ands	r1, r0
 8003c02:	2908      	cmp	r1, #8
 8003c04:	d047      	beq.n	8003c96 <HAL_RCC_OscConfig+0x3d6>
 8003c06:	4a33      	ldr	r2, [pc, #204]	; (8003cd4 <HAL_RCC_OscConfig+0x414>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d132      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4013      	ands	r3, r2
 8003c12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c14:	f7fe ff2a 	bl	8002a6c <HAL_GetTick>
 8003c18:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1a:	04b6      	lsls	r6, r6, #18
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	4233      	tst	r3, r6
 8003c20:	d121      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c22:	220f      	movs	r2, #15
 8003c24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c26:	4393      	bics	r3, r2
 8003c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003c2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c32:	686a      	ldr	r2, [r5, #4]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	4928      	ldr	r1, [pc, #160]	; (8003cd8 <HAL_RCC_OscConfig+0x418>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c38:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	682a      	ldr	r2, [r5, #0]
 8003c44:	045b      	lsls	r3, r3, #17
 8003c46:	4313      	orrs	r3, r2
 8003c48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c4a:	f7fe ff0f 	bl	8002a6c <HAL_GetTick>
 8003c4e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c50:	04a4      	lsls	r4, r4, #18
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	4223      	tst	r3, r4
 8003c56:	d000      	beq.n	8003c5a <HAL_RCC_OscConfig+0x39a>
 8003c58:	e66b      	b.n	8003932 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe ff07 	bl	8002a6c <HAL_GetTick>
 8003c5e:	1b80      	subs	r0, r0, r6
 8003c60:	2802      	cmp	r0, #2
 8003c62:	d9f6      	bls.n	8003c52 <HAL_RCC_OscConfig+0x392>
 8003c64:	e695      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fe ff01 	bl	8002a6c <HAL_GetTick>
 8003c6a:	1bc0      	subs	r0, r0, r7
 8003c6c:	2802      	cmp	r0, #2
 8003c6e:	d9d5      	bls.n	8003c1c <HAL_RCC_OscConfig+0x35c>
 8003c70:	e68f      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_PLL_DISABLE();
 8003c72:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c74:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4013      	ands	r3, r2
 8003c78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c7a:	f7fe fef7 	bl	8002a6c <HAL_GetTick>
 8003c7e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c80:	04a4      	lsls	r4, r4, #18
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	4223      	tst	r3, r4
 8003c86:	d100      	bne.n	8003c8a <HAL_RCC_OscConfig+0x3ca>
 8003c88:	e653      	b.n	8003932 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fe feef 	bl	8002a6c <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	2802      	cmp	r0, #2
 8003c92:	d9f6      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3c2>
 8003c94:	e67d      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
        return HAL_ERROR;
 8003c96:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d100      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3de>
 8003c9c:	e616      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8003ca0:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ca4:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8003ca6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca8:	4019      	ands	r1, r3
        return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cac:	42a9      	cmp	r1, r5
 8003cae:	d000      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x3f2>
 8003cb0:	e60c      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cb2:	210f      	movs	r1, #15
 8003cb4:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003cb8:	428a      	cmp	r2, r1
 8003cba:	d000      	beq.n	8003cbe <HAL_RCC_OscConfig+0x3fe>
 8003cbc:	e606      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003cbe:	20f0      	movs	r0, #240	; 0xf0
 8003cc0:	0380      	lsls	r0, r0, #14
 8003cc2:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cc6:	1a1b      	subs	r3, r3, r0
 8003cc8:	1e58      	subs	r0, r3, #1
 8003cca:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8003ccc:	b2d8      	uxtb	r0, r3
 8003cce:	e5fd      	b.n	80038cc <HAL_RCC_OscConfig+0xc>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	feffffff 	.word	0xfeffffff
 8003cd8:	ffc27fff 	.word	0xffc27fff

08003cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003cde:	4d12      	ldr	r5, [pc, #72]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8003ce0:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	0029      	movs	r1, r5
 8003ce6:	4668      	mov	r0, sp
 8003ce8:	f002 fa60 	bl	80061ac <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003cec:	0029      	movs	r1, r5
 8003cee:	ac04      	add	r4, sp, #16
 8003cf0:	3110      	adds	r1, #16
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f002 fa59 	bl	80061ac <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cfa:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003cfc:	490b      	ldr	r1, [pc, #44]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x50>)
 8003cfe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003d00:	401a      	ands	r2, r3
 8003d02:	2a08      	cmp	r2, #8
 8003d04:	d10d      	bne.n	8003d22 <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d06:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d08:	210f      	movs	r1, #15
 8003d0a:	4668      	mov	r0, sp
 8003d0c:	0c9b      	lsrs	r3, r3, #18
 8003d0e:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d10:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d12:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d14:	5ca1      	ldrb	r1, [r4, r2]
 8003d16:	4806      	ldr	r0, [pc, #24]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x54>)
 8003d18:	f7fc fa12 	bl	8000140 <__udivsi3>
 8003d1c:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d1e:	b009      	add	sp, #36	; 0x24
 8003d20:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8003d22:	4803      	ldr	r0, [pc, #12]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8003d24:	e7fb      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x42>
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	08009d70 	.word	0x08009d70
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_ClockConfig>:
{
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	0005      	movs	r5, r0
 8003d38:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003d3e:	2001      	movs	r0, #1
}
 8003d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d42:	2201      	movs	r2, #1
 8003d44:	4c37      	ldr	r4, [pc, #220]	; (8003e24 <HAL_RCC_ClockConfig+0xf0>)
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d31c      	bcc.n	8003d88 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4e:	6829      	ldr	r1, [r5, #0]
 8003d50:	078b      	lsls	r3, r1, #30
 8003d52:	d422      	bmi.n	8003d9a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d54:	07cb      	lsls	r3, r1, #31
 8003d56:	d42f      	bmi.n	8003db8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d58:	2301      	movs	r3, #1
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	42ba      	cmp	r2, r7
 8003d60:	d851      	bhi.n	8003e06 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	4c30      	ldr	r4, [pc, #192]	; (8003e28 <HAL_RCC_ClockConfig+0xf4>)
 8003d66:	075b      	lsls	r3, r3, #29
 8003d68:	d454      	bmi.n	8003e14 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d6a:	f7ff ffb7 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <HAL_RCC_ClockConfig+0xf8>)
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	0f1b      	lsrs	r3, r3, #28
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	40d8      	lsrs	r0, r3
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_ClockConfig+0xfc>)
 8003d7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fe fe34 	bl	80029ec <HAL_InitTick>
  return HAL_OK;
 8003d84:	2000      	movs	r0, #0
 8003d86:	e7db      	b.n	8003d40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	4013      	ands	r3, r2
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d1d2      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xa>
 8003d98:	e7d9      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1a>
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	074b      	lsls	r3, r1, #29
 8003d9e:	d504      	bpl.n	8003daa <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003da0:	23e0      	movs	r3, #224	; 0xe0
 8003da2:	6850      	ldr	r0, [r2, #4]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4303      	orrs	r3, r0
 8003da8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003daa:	20f0      	movs	r0, #240	; 0xf0
 8003dac:	6853      	ldr	r3, [r2, #4]
 8003dae:	4383      	bics	r3, r0
 8003db0:	68a8      	ldr	r0, [r5, #8]
 8003db2:	4303      	orrs	r3, r0
 8003db4:	6053      	str	r3, [r2, #4]
 8003db6:	e7cd      	b.n	8003d54 <HAL_RCC_ClockConfig+0x20>
 8003db8:	4e1b      	ldr	r6, [pc, #108]	; (8003e28 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	2a01      	cmp	r2, #1
 8003dc0:	d119      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	039b      	lsls	r3, r3, #14
 8003dc4:	d5bb      	bpl.n	8003d3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	6873      	ldr	r3, [r6, #4]
 8003dca:	438b      	bics	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003dd0:	f7fe fe4c 	bl	8002a6c <HAL_GetTick>
 8003dd4:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	6872      	ldr	r2, [r6, #4]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	686b      	ldr	r3, [r5, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d0b9      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fe fe42 	bl	8002a6c <HAL_GetTick>
 8003de8:	9b01      	ldr	r3, [sp, #4]
 8003dea:	1ac0      	subs	r0, r0, r3
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_RCC_ClockConfig+0x100>)
 8003dee:	4298      	cmp	r0, r3
 8003df0:	d9f1      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8003df2:	2003      	movs	r0, #3
 8003df4:	e7a4      	b.n	8003d40 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	2a02      	cmp	r2, #2
 8003df8:	d102      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	019b      	lsls	r3, r3, #6
 8003dfc:	d4e3      	bmi.n	8003dc6 <HAL_RCC_ClockConfig+0x92>
 8003dfe:	e79e      	b.n	8003d3e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	079b      	lsls	r3, r3, #30
 8003e02:	d4e0      	bmi.n	8003dc6 <HAL_RCC_ClockConfig+0x92>
 8003e04:	e79b      	b.n	8003d3e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	439a      	bics	r2, r3
 8003e0a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	421a      	tst	r2, r3
 8003e10:	d0a7      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x2e>
 8003e12:	e794      	b.n	8003d3e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCC_ClockConfig+0x104>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ea      	ldr	r2, [r5, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	6063      	str	r3, [r4, #4]
 8003e20:	e7a3      	b.n	8003d6a <HAL_RCC_ClockConfig+0x36>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08009ec3 	.word	0x08009ec3
 8003e30:	20000008 	.word	0x20000008
 8003e34:	00001388 	.word	0x00001388
 8003e38:	fffff8ff 	.word	0xfffff8ff

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3e:	6803      	ldr	r3, [r0, #0]
{
 8003e40:	b085      	sub	sp, #20
 8003e42:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e44:	03db      	lsls	r3, r3, #15
 8003e46:	d528      	bpl.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e48:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4c:	4c3b      	ldr	r4, [pc, #236]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003e52:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4213      	tst	r3, r2
 8003e56:	d108      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e58:	69e3      	ldr	r3, [r4, #28]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61e3      	str	r3, [r4, #28]
 8003e5e:	69e3      	ldr	r3, [r4, #28]
 8003e60:	4013      	ands	r3, r2
 8003e62:	9303      	str	r3, [sp, #12]
 8003e64:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	2780      	movs	r7, #128	; 0x80
 8003e6c:	4e34      	ldr	r6, [pc, #208]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003e6e:	007f      	lsls	r7, r7, #1
 8003e70:	6833      	ldr	r3, [r6, #0]
 8003e72:	423b      	tst	r3, r7
 8003e74:	d02f      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e76:	22c0      	movs	r2, #192	; 0xc0
 8003e78:	6a23      	ldr	r3, [r4, #32]
 8003e7a:	0092      	lsls	r2, r2, #2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	4e31      	ldr	r6, [pc, #196]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e80:	d13b      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e82:	6a23      	ldr	r3, [r4, #32]
 8003e84:	401e      	ands	r6, r3
 8003e86:	686b      	ldr	r3, [r5, #4]
 8003e88:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e8a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d103      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	69e3      	ldr	r3, [r4, #28]
 8003e94:	4a2c      	ldr	r2, [pc, #176]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9a:	682a      	ldr	r2, [r5, #0]
 8003e9c:	07d3      	lsls	r3, r2, #31
 8003e9e:	d506      	bpl.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	4926      	ldr	r1, [pc, #152]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003ea4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003ea6:	4383      	bics	r3, r0
 8003ea8:	68a8      	ldr	r0, [r5, #8]
 8003eaa:	4303      	orrs	r3, r0
 8003eac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eae:	0693      	lsls	r3, r2, #26
 8003eb0:	d506      	bpl.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb2:	2010      	movs	r0, #16
 8003eb4:	4921      	ldr	r1, [pc, #132]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003eb6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003eb8:	4383      	bics	r3, r0
 8003eba:	68e8      	ldr	r0, [r5, #12]
 8003ebc:	4303      	orrs	r3, r0
 8003ebe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003ec0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ec2:	0393      	lsls	r3, r2, #14
 8003ec4:	d517      	bpl.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003eca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ecc:	438b      	bics	r3, r1
 8003ece:	6929      	ldr	r1, [r5, #16]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed4:	e00f      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed6:	6833      	ldr	r3, [r6, #0]
 8003ed8:	433b      	orrs	r3, r7
 8003eda:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003edc:	f7fe fdc6 	bl	8002a6c <HAL_GetTick>
 8003ee0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	6833      	ldr	r3, [r6, #0]
 8003ee4:	423b      	tst	r3, r7
 8003ee6:	d1c6      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee8:	f7fe fdc0 	bl	8002a6c <HAL_GetTick>
 8003eec:	9b01      	ldr	r3, [sp, #4]
 8003eee:	1ac0      	subs	r0, r0, r3
 8003ef0:	2864      	cmp	r0, #100	; 0x64
 8003ef2:	d9f6      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8003ef4:	2003      	movs	r0, #3
}
 8003ef6:	b005      	add	sp, #20
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003efa:	6869      	ldr	r1, [r5, #4]
 8003efc:	400a      	ands	r2, r1
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d0bf      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f02:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f04:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f08:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	4303      	orrs	r3, r0
 8003f0e:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f10:	6a23      	ldr	r3, [r4, #32]
 8003f12:	480e      	ldr	r0, [pc, #56]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f14:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f16:	4003      	ands	r3, r0
 8003f18:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003f1a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f1c:	07d3      	lsls	r3, r2, #31
 8003f1e:	d5b0      	bpl.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8003f20:	f7fe fda4 	bl	8002a6c <HAL_GetTick>
 8003f24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	2202      	movs	r2, #2
 8003f28:	6a23      	ldr	r3, [r4, #32]
 8003f2a:	4213      	tst	r3, r2
 8003f2c:	d1a9      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe fd9d 	bl	8002a6c <HAL_GetTick>
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003f34:	1bc0      	subs	r0, r0, r7
 8003f36:	4298      	cmp	r0, r3
 8003f38:	d9f5      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003f3a:	e7db      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40007000 	.word	0x40007000
 8003f44:	fffffcff 	.word	0xfffffcff
 8003f48:	efffffff 	.word	0xefffffff
 8003f4c:	fffeffff 	.word	0xfffeffff
 8003f50:	00001388 	.word	0x00001388

08003f54 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003f54:	6803      	ldr	r3, [r0, #0]
{
 8003f56:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003f58:	689a      	ldr	r2, [r3, #8]
{
 8003f5a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003f5c:	04d2      	lsls	r2, r2, #19
 8003f5e:	d50a      	bpl.n	8003f76 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	05db      	lsls	r3, r3, #23
 8003f64:	d507      	bpl.n	8003f76 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003f66:	f7fe f977 	bl	8002258 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RTC_AlarmIRQHandler+0x30>)
 8003f6e:	68ca      	ldr	r2, [r1, #12]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RTC_AlarmIRQHandler+0x34>)
 8003f7a:	0292      	lsls	r2, r2, #10
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	7763      	strb	r3, [r4, #29]
}
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	fffffe7f 	.word	0xfffffe7f
 8003f88:	40010400 	.word	0x40010400

08003f8c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f8c:	21a0      	movs	r1, #160	; 0xa0
 8003f8e:	6802      	ldr	r2, [r0, #0]
{
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f92:	68d3      	ldr	r3, [r2, #12]
{
 8003f94:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f96:	438b      	bics	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003f9a:	f7fe fd67 	bl	8002a6c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f9e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8003fa0:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003fa2:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fa4:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	422b      	tst	r3, r5
 8003fac:	d001      	beq.n	8003fb2 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003fae:	2000      	movs	r0, #0
}
 8003fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fb2:	f7fe fd5b 	bl	8002a6c <HAL_GetTick>
 8003fb6:	1b80      	subs	r0, r0, r6
 8003fb8:	42b8      	cmp	r0, r7
 8003fba:	d9f4      	bls.n	8003fa6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8003fbc:	2003      	movs	r0, #3
 8003fbe:	e7f7      	b.n	8003fb0 <HAL_RTC_WaitForSynchro+0x24>

08003fc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fc2:	2440      	movs	r4, #64	; 0x40
 8003fc4:	6803      	ldr	r3, [r0, #0]
{
 8003fc6:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	4222      	tst	r2, r4
 8003fcc:	d001      	beq.n	8003fd2 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003fce:	2000      	movs	r0, #0
}
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4252      	negs	r2, r2
 8003fd6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003fd8:	f7fe fd48 	bl	8002a6c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fdc:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8003fde:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fe0:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4223      	tst	r3, r4
 8003fe8:	d1f1      	bne.n	8003fce <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fea:	f7fe fd3f 	bl	8002a6c <HAL_GetTick>
 8003fee:	1b80      	subs	r0, r0, r6
 8003ff0:	42b8      	cmp	r0, r7
 8003ff2:	d9f6      	bls.n	8003fe2 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	e7eb      	b.n	8003fd0 <RTC_EnterInitMode+0x10>

08003ff8 <HAL_RTC_Init>:
{
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ffc:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d018      	beq.n	8004034 <HAL_RTC_Init+0x3c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004002:	7f43      	ldrb	r3, [r0, #29]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800400a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800400c:	f7fe fc48 	bl	80028a0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004010:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004012:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004014:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004016:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004018:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401a:	625a      	str	r2, [r3, #36]	; 0x24
 800401c:	3a77      	subs	r2, #119	; 0x77
 800401e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004020:	f7ff ffce 	bl	8003fc0 <RTC_EnterInitMode>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	1e05      	subs	r5, r0, #0
 8004028:	d006      	beq.n	8004038 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800402e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004030:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004032:	7763      	strb	r3, [r4, #29]
}
 8004034:	0028      	movs	r0, r5
 8004036:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	4917      	ldr	r1, [pc, #92]	; (8004098 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800403c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800403e:	400a      	ands	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004042:	6862      	ldr	r2, [r4, #4]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	4302      	orrs	r2, r0
 8004048:	6960      	ldr	r0, [r4, #20]
 800404a:	4302      	orrs	r2, r0
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004050:	68e2      	ldr	r2, [r4, #12]
 8004052:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004054:	68a2      	ldr	r2, [r4, #8]
 8004056:	6919      	ldr	r1, [r3, #16]
 8004058:	0412      	lsls	r2, r2, #16
 800405a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800405c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800405e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	438a      	bics	r2, r1
 8004064:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	069b      	lsls	r3, r3, #26
 800406a:	d406      	bmi.n	800407a <HAL_RTC_Init+0x82>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800406c:	0020      	movs	r0, r4
 800406e:	f7ff ff8d 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 8004072:	2800      	cmp	r0, #0
 8004074:	d001      	beq.n	800407a <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	e7d7      	b.n	800402a <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <HAL_RTC_Init+0xa4>)
 800407e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004080:	400a      	ands	r2, r1
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	69a1      	ldr	r1, [r4, #24]
 8004088:	430a      	orrs	r2, r1
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004090:	2301      	movs	r3, #1
 8004092:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8004094:	e7ce      	b.n	8004034 <HAL_RTC_Init+0x3c>
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	ff8fffbf 	.word	0xff8fffbf
 800409c:	fffbffff 	.word	0xfffbffff

080040a0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80040a0:	2300      	movs	r3, #0

  while (Value >= 10U)
 80040a2:	2809      	cmp	r0, #9
 80040a4:	d803      	bhi.n	80040ae <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4318      	orrs	r0, r3
 80040aa:	b2c0      	uxtb	r0, r0
}
 80040ac:	4770      	bx	lr
    Value -= 10U;
 80040ae:	380a      	subs	r0, #10
    bcdhigh++;
 80040b0:	3301      	adds	r3, #1
    Value -= 10U;
 80040b2:	b2c0      	uxtb	r0, r0
 80040b4:	e7f5      	b.n	80040a2 <RTC_ByteToBcd2+0x2>
	...

080040b8 <HAL_RTC_SetTime>:
{
 80040b8:	2302      	movs	r3, #2
 80040ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040bc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80040be:	7f01      	ldrb	r1, [r0, #28]
{
 80040c0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80040c2:	001e      	movs	r6, r3
 80040c4:	2901      	cmp	r1, #1
 80040c6:	d033      	beq.n	8004130 <HAL_RTC_SetTime+0x78>
 80040c8:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ca:	7743      	strb	r3, [r0, #29]
  __HAL_LOCK(hrtc);
 80040cc:	7701      	strb	r1, [r0, #28]
 80040ce:	6806      	ldr	r6, [r0, #0]
 80040d0:	78ab      	ldrb	r3, [r5, #2]
 80040d2:	313f      	adds	r1, #63	; 0x3f
 80040d4:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040d6:	68b3      	ldr	r3, [r6, #8]
 80040d8:	7828      	ldrb	r0, [r5, #0]
 80040da:	786f      	ldrb	r7, [r5, #1]
 80040dc:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d128      	bne.n	8004134 <HAL_RTC_SetTime+0x7c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d100      	bne.n	80040e8 <HAL_RTC_SetTime+0x30>
      sTime->TimeFormat = 0x00U;
 80040e6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040e8:	f7ff ffda 	bl	80040a0 <RTC_ByteToBcd2>
 80040ec:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80040ee:	0038      	movs	r0, r7
 80040f0:	f7ff ffd6 	bl	80040a0 <RTC_ByteToBcd2>
 80040f4:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80040f6:	9800      	ldr	r0, [sp, #0]
 80040f8:	f7ff ffd2 	bl	80040a0 <RTC_ByteToBcd2>
 80040fc:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80040fe:	78e8      	ldrb	r0, [r5, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004100:	023f      	lsls	r7, r7, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004102:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004104:	4318      	orrs	r0, r3
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410c:	23ca      	movs	r3, #202	; 0xca
 800410e:	6273      	str	r3, [r6, #36]	; 0x24
 8004110:	3b77      	subs	r3, #119	; 0x77
 8004112:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004114:	4307      	orrs	r7, r0
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004116:	0020      	movs	r0, r4
 8004118:	f7ff ff52 	bl	8003fc0 <RTC_EnterInitMode>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	1e06      	subs	r6, r0, #0
 8004120:	d013      	beq.n	800414a <HAL_RTC_SetTime+0x92>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004122:	22ff      	movs	r2, #255	; 0xff
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004126:	2304      	movs	r3, #4
 8004128:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800412a:	2300      	movs	r3, #0
 800412c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800412e:	2601      	movs	r6, #1
}
 8004130:	0030      	movs	r0, r6
 8004132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004134:	2b00      	cmp	r3, #0
 8004136:	d100      	bne.n	800413a <HAL_RTC_SetTime+0x82>
      sTime->TimeFormat = 0x00U;
 8004138:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800413a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800413c:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800413e:	4307      	orrs	r7, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004140:	9b00      	ldr	r3, [sp, #0]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004142:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004144:	431f      	orrs	r7, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004146:	0400      	lsls	r0, r0, #16
 8004148:	e7e0      	b.n	800410c <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800414a:	4814      	ldr	r0, [pc, #80]	; (800419c <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800414c:	4914      	ldr	r1, [pc, #80]	; (80041a0 <HAL_RTC_SetTime+0xe8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800414e:	4007      	ands	r7, r0
 8004150:	601f      	str	r7, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004152:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004154:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004156:	400a      	ands	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800415a:	68ea      	ldr	r2, [r5, #12]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	4302      	orrs	r2, r0
 8004160:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004162:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004164:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	438a      	bics	r2, r1
 800416a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	069b      	lsls	r3, r3, #26
 8004170:	d40b      	bmi.n	800418a <HAL_RTC_SetTime+0xd2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004172:	0020      	movs	r0, r4
 8004174:	f7ff ff0a 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 8004178:	2800      	cmp	r0, #0
 800417a:	d006      	beq.n	800418a <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004182:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004184:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004186:	7763      	strb	r3, [r4, #29]
 8004188:	e7d1      	b.n	800412e <HAL_RTC_SetTime+0x76>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004190:	2301      	movs	r3, #1
 8004192:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004194:	2300      	movs	r3, #0
 8004196:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8004198:	e7ca      	b.n	8004130 <HAL_RTC_SetTime+0x78>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	007f7f7f 	.word	0x007f7f7f
 80041a0:	fffbffff 	.word	0xfffbffff

080041a4 <HAL_RTC_SetDate>:
{
 80041a4:	2302      	movs	r3, #2
 80041a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041a8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80041aa:	7f01      	ldrb	r1, [r0, #28]
{
 80041ac:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80041ae:	001c      	movs	r4, r3
 80041b0:	2901      	cmp	r1, #1
 80041b2:	d032      	beq.n	800421a <HAL_RTC_SetDate+0x76>
 80041b4:	2101      	movs	r1, #1
 80041b6:	7834      	ldrb	r4, [r6, #0]
 80041b8:	7701      	strb	r1, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ba:	7743      	strb	r3, [r0, #29]
 80041bc:	0361      	lsls	r1, r4, #13
 80041be:	78f0      	ldrb	r0, [r6, #3]
 80041c0:	7873      	ldrb	r3, [r6, #1]
 80041c2:	78b7      	ldrb	r7, [r6, #2]
 80041c4:	9101      	str	r1, [sp, #4]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d147      	bne.n	800425a <HAL_RTC_SetDate+0xb6>
 80041ca:	3210      	adds	r2, #16
 80041cc:	4213      	tst	r3, r2
 80041ce:	d002      	beq.n	80041d6 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041d0:	4393      	bics	r3, r2
 80041d2:	330a      	adds	r3, #10
 80041d4:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80041d6:	f7ff ff63 	bl	80040a0 <RTC_ByteToBcd2>
 80041da:	0004      	movs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80041dc:	7870      	ldrb	r0, [r6, #1]
 80041de:	f7ff ff5f 	bl	80040a0 <RTC_ByteToBcd2>
 80041e2:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80041e4:	0038      	movs	r0, r7
 80041e6:	f7ff ff5b 	bl	80040a0 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80041ea:	9b01      	ldr	r3, [sp, #4]
 80041ec:	0424      	lsls	r4, r4, #16
 80041ee:	4318      	orrs	r0, r3
 80041f0:	4304      	orrs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80041f2:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80041f4:	4326      	orrs	r6, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041f6:	22ca      	movs	r2, #202	; 0xca
 80041f8:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041fa:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
 80041fe:	3a77      	subs	r2, #119	; 0x77
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004202:	f7ff fedd 	bl	8003fc0 <RTC_EnterInitMode>
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	1e04      	subs	r4, r0, #0
 800420a:	d008      	beq.n	800421e <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004210:	2304      	movs	r3, #4
 8004212:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004214:	2300      	movs	r3, #0
 8004216:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8004218:	2401      	movs	r4, #1
}
 800421a:	0020      	movs	r0, r4
 800421c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800421e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004220:	4f11      	ldr	r7, [pc, #68]	; (8004268 <HAL_RTC_SetDate+0xc4>)
 8004222:	403e      	ands	r6, r7
 8004224:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	438a      	bics	r2, r1
 800422a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	069b      	lsls	r3, r3, #26
 8004230:	d40b      	bmi.n	800424a <HAL_RTC_SetDate+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004232:	0028      	movs	r0, r5
 8004234:	f7ff feaa 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 8004238:	2800      	cmp	r0, #0
 800423a:	d006      	beq.n	800424a <HAL_RTC_SetDate+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	682b      	ldr	r3, [r5, #0]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004242:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004244:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004246:	776b      	strb	r3, [r5, #29]
 8004248:	e7e6      	b.n	8004218 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800424a:	22ff      	movs	r2, #255	; 0xff
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004250:	2301      	movs	r3, #1
 8004252:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004254:	2300      	movs	r3, #0
 8004256:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8004258:	e7df      	b.n	800421a <HAL_RTC_SetDate+0x76>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800425a:	9a01      	ldr	r2, [sp, #4]
 800425c:	0400      	lsls	r0, r0, #16
 800425e:	4310      	orrs	r0, r2
 8004260:	4307      	orrs	r7, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004262:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004264:	433e      	orrs	r6, r7
 8004266:	e7c6      	b.n	80041f6 <HAL_RTC_SetDate+0x52>
 8004268:	00ffff3f 	.word	0x00ffff3f

0800426c <HAL_RTC_SetAlarm_IT>:
{
 800426c:	2302      	movs	r3, #2
 800426e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004270:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004272:	7f01      	ldrb	r1, [r0, #28]
{
 8004274:	0005      	movs	r5, r0
 8004276:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004278:	0018      	movs	r0, r3
 800427a:	2901      	cmp	r1, #1
 800427c:	d100      	bne.n	8004280 <HAL_RTC_SetAlarm_IT+0x14>
 800427e:	e084      	b.n	800438a <HAL_RTC_SetAlarm_IT+0x11e>
 8004280:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004282:	776b      	strb	r3, [r5, #29]
  __HAL_LOCK(hrtc);
 8004284:	7729      	strb	r1, [r5, #28]
 8004286:	7863      	ldrb	r3, [r4, #1]
 8004288:	682e      	ldr	r6, [r5, #0]
 800428a:	9301      	str	r3, [sp, #4]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800428c:	68b3      	ldr	r3, [r6, #8]
 800428e:	313f      	adds	r1, #63	; 0x3f
 8004290:	7820      	ldrb	r0, [r4, #0]
 8004292:	78a7      	ldrb	r7, [r4, #2]
 8004294:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004296:	2a00      	cmp	r2, #0
 8004298:	d157      	bne.n	800434a <HAL_RTC_SetAlarm_IT+0xde>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800429a:	2b00      	cmp	r3, #0
 800429c:	d100      	bne.n	80042a0 <HAL_RTC_SetAlarm_IT+0x34>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800429e:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042a0:	f7ff fefe 	bl	80040a0 <RTC_ByteToBcd2>
 80042a4:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80042a6:	9801      	ldr	r0, [sp, #4]
 80042a8:	f7ff fefa 	bl	80040a0 <RTC_ByteToBcd2>
 80042ac:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80042ae:	0038      	movs	r0, r7
 80042b0:	f7ff fef6 	bl	80040a0 <RTC_ByteToBcd2>
 80042b4:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80042b6:	1c63      	adds	r3, r4, #1
 80042b8:	7fd8      	ldrb	r0, [r3, #31]
 80042ba:	f7ff fef1 	bl	80040a0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042be:	6962      	ldr	r2, [r4, #20]
 80042c0:	69e3      	ldr	r3, [r4, #28]
 80042c2:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80042c4:	78e2      	ldrb	r2, [r4, #3]
 80042c6:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042c8:	4313      	orrs	r3, r2
 80042ca:	431f      	orrs	r7, r3
 80042cc:	9b02      	ldr	r3, [sp, #8]
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042d6:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042d8:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042da:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <HAL_RTC_SetAlarm_IT+0x124>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80042e0:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042e2:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e4:	23ca      	movs	r3, #202	; 0xca
 80042e6:	6273      	str	r3, [r6, #36]	; 0x24
 80042e8:	3b77      	subs	r3, #119	; 0x77
 80042ea:	6273      	str	r3, [r6, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042ec:	68b3      	ldr	r3, [r6, #8]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80042ee:	4307      	orrs	r7, r0
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042f0:	4013      	ands	r3, r2
 80042f2:	60b3      	str	r3, [r6, #8]
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042f4:	68f2      	ldr	r2, [r6, #12]
 80042f6:	4b27      	ldr	r3, [pc, #156]	; (8004394 <HAL_RTC_SetAlarm_IT+0x128>)
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60f3      	str	r3, [r6, #12]
  tickstart = HAL_GetTick();
 80042fe:	f7fe fbb5 	bl	8002a6c <HAL_GetTick>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004302:	2601      	movs	r6, #1
  tickstart = HAL_GetTick();
 8004304:	9003      	str	r0, [sp, #12]
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	68dc      	ldr	r4, [r3, #12]
 800430a:	4034      	ands	r4, r6
 800430c:	d02f      	beq.n	800436e <HAL_RTC_SetAlarm_IT+0x102>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800430e:	9902      	ldr	r1, [sp, #8]
 8004310:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004312:	61df      	str	r7, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004314:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004318:	2280      	movs	r2, #128	; 0x80
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	0052      	lsls	r2, r2, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	0152      	lsls	r2, r2, #5
 8004328:	430a      	orrs	r2, r1
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800432a:	2180      	movs	r1, #128	; 0x80
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800432c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800432e:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <HAL_RTC_SetAlarm_IT+0x12c>)
 8004330:	0289      	lsls	r1, r1, #10
 8004332:	6810      	ldr	r0, [r2, #0]
 8004334:	4308      	orrs	r0, r1
 8004336:	6010      	str	r0, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004338:	6890      	ldr	r0, [r2, #8]
 800433a:	4301      	orrs	r1, r0
 800433c:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(hrtc);
 800433e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004344:	776e      	strb	r6, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8004346:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8004348:	e01f      	b.n	800438a <HAL_RTC_SetAlarm_IT+0x11e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800434a:	2b00      	cmp	r3, #0
 800434c:	d100      	bne.n	8004350 <HAL_RTC_SetAlarm_IT+0xe4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800434e:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004350:	69e3      	ldr	r3, [r4, #28]
 8004352:	6962      	ldr	r2, [r4, #20]
 8004354:	0400      	lsls	r0, r0, #16
 8004356:	4313      	orrs	r3, r2
 8004358:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800435a:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800435c:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800435e:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004360:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004362:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004364:	1c63      	adds	r3, r4, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004366:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004368:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800436a:	7fd8      	ldrb	r0, [r3, #31]
 800436c:	e7b4      	b.n	80042d8 <HAL_RTC_SetAlarm_IT+0x6c>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800436e:	f7fe fb7d 	bl	8002a6c <HAL_GetTick>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	1ac0      	subs	r0, r0, r3
 8004376:	23fa      	movs	r3, #250	; 0xfa
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4298      	cmp	r0, r3
 800437c:	d9c3      	bls.n	8004306 <HAL_RTC_SetAlarm_IT+0x9a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800437e:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004380:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004382:	682b      	ldr	r3, [r5, #0]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004386:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8004388:	772c      	strb	r4, [r5, #28]
}
 800438a:	b005      	add	sp, #20
 800438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	fffffeff 	.word	0xfffffeff
 8004394:	fffffe7f 	.word	0xfffffe7f
 8004398:	40010400 	.word	0x40010400

0800439c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800439c:	230a      	movs	r3, #10
 800439e:	0902      	lsrs	r2, r0, #4
 80043a0:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 80043a2:	220f      	movs	r2, #15
 80043a4:	4010      	ands	r0, r2
 80043a6:	1818      	adds	r0, r3, r0
 80043a8:	b2c0      	uxtb	r0, r0
}
 80043aa:	4770      	bx	lr

080043ac <HAL_RTC_GetTime>:
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80043b0:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80043b2:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80043b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80043b6:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043b8:	690b      	ldr	r3, [r1, #16]
 80043ba:	045b      	lsls	r3, r3, #17
 80043bc:	0c5b      	lsrs	r3, r3, #17
 80043be:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80043c0:	680b      	ldr	r3, [r1, #0]
 80043c2:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RTC_GetTime+0x50>)
 80043c4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80043c6:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80043c8:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80043ca:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80043cc:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80043ce:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80043d0:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80043d2:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80043d4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80043d6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80043d8:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80043da:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d10a      	bne.n	80043f6 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80043e0:	f7ff ffdc 	bl	800439c <RTC_Bcd2ToByte>
 80043e4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043e6:	0030      	movs	r0, r6
 80043e8:	f7ff ffd8 	bl	800439c <RTC_Bcd2ToByte>
 80043ec:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043ee:	0028      	movs	r0, r5
 80043f0:	f7ff ffd4 	bl	800439c <RTC_Bcd2ToByte>
 80043f4:	70a0      	strb	r0, [r4, #2]
}
 80043f6:	2000      	movs	r0, #0
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	007f7f7f 	.word	0x007f7f7f

08004400 <HAL_RTC_GetDate>:
{
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004404:	6803      	ldr	r3, [r0, #0]
 8004406:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RTC_GetDate+0x40>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800440c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800440e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004410:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004412:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004414:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004416:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004418:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800441a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800441c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800441e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004420:	2a00      	cmp	r2, #0
 8004422:	d10a      	bne.n	800443a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004424:	f7ff ffba 	bl	800439c <RTC_Bcd2ToByte>
 8004428:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800442a:	0028      	movs	r0, r5
 800442c:	f7ff ffb6 	bl	800439c <RTC_Bcd2ToByte>
 8004430:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004432:	0030      	movs	r0, r6
 8004434:	f7ff ffb2 	bl	800439c <RTC_Bcd2ToByte>
 8004438:	70a0      	strb	r0, [r4, #2]
}
 800443a:	2000      	movs	r0, #0
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	00ffff3f 	.word	0x00ffff3f

08004444 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004444:	21e0      	movs	r1, #224	; 0xe0
 8004446:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004448:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	438a      	bics	r2, r1
 800444e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004450:	2282      	movs	r2, #130	; 0x82
 8004452:	6841      	ldr	r1, [r0, #4]
 8004454:	0052      	lsls	r2, r2, #1
 8004456:	4291      	cmp	r1, r2
 8004458:	d10c      	bne.n	8004474 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	6882      	ldr	r2, [r0, #8]
 800445e:	0209      	lsls	r1, r1, #8
 8004460:	428a      	cmp	r2, r1
 8004462:	d003      	beq.n	800446c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	00c9      	lsls	r1, r1, #3
 8004468:	428a      	cmp	r2, r1
 800446a:	d103      	bne.n	8004474 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	438a      	bics	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004478:	0189      	lsls	r1, r1, #6
 800447a:	428a      	cmp	r2, r1
 800447c:	d106      	bne.n	800448c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	4c07      	ldr	r4, [pc, #28]	; (80044a0 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8004482:	4021      	ands	r1, r4
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800448c:	0003      	movs	r3, r0
 800448e:	2201      	movs	r2, #1
 8004490:	335d      	adds	r3, #93	; 0x5d
 8004492:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	305c      	adds	r0, #92	; 0x5c
 8004498:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 800449a:	2003      	movs	r0, #3
 800449c:	bd10      	pop	{r4, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	ffffdfff 	.word	0xffffdfff

080044a4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	0004      	movs	r4, r0
 80044a8:	000d      	movs	r5, r1
 80044aa:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ac:	2680      	movs	r6, #128	; 0x80
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6898      	ldr	r0, [r3, #8]
 80044b2:	4030      	ands	r0, r6
 80044b4:	d009      	beq.n	80044ca <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	1c6a      	adds	r2, r5, #1
 80044b8:	d0fa      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044ba:	f7fe fad7 	bl	8002a6c <HAL_GetTick>
 80044be:	1bc0      	subs	r0, r0, r7
 80044c0:	4285      	cmp	r5, r0
 80044c2:	d8f4      	bhi.n	80044ae <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 80044c4:	0020      	movs	r0, r4
 80044c6:	f7ff ffbd 	bl	8004444 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044cc <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044ce:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80044d0:	0005      	movs	r5, r0
 80044d2:	000c      	movs	r4, r1
 80044d4:	0016      	movs	r6, r2
 80044d6:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044d8:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80044da:	682b      	ldr	r3, [r5, #0]
 80044dc:	6898      	ldr	r0, [r3, #8]
 80044de:	4020      	ands	r0, r4
 80044e0:	d00d      	beq.n	80044fe <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044e2:	42bc      	cmp	r4, r7
 80044e4:	d100      	bne.n	80044e8 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80044e6:	7b1a      	ldrb	r2, [r3, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044e8:	1c72      	adds	r2, r6, #1
 80044ea:	d0f7      	beq.n	80044dc <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044ec:	f7fe fabe 	bl	8002a6c <HAL_GetTick>
 80044f0:	9b01      	ldr	r3, [sp, #4]
 80044f2:	1ac0      	subs	r0, r0, r3
 80044f4:	4286      	cmp	r6, r0
 80044f6:	d8f0      	bhi.n	80044da <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 80044f8:	0028      	movs	r0, r5
 80044fa:	f7ff ffa3 	bl	8004444 <SPI_WaitFifoStateUntilTimeout.part.1>
      }
    }
  }

  return HAL_OK;
}
 80044fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08004500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004502:	2382      	movs	r3, #130	; 0x82
{
 8004504:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004506:	6842      	ldr	r2, [r0, #4]
{
 8004508:	0004      	movs	r4, r0
 800450a:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	429a      	cmp	r2, r3
 8004510:	d10d      	bne.n	800452e <SPI_EndRxTransaction+0x2e>
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	6883      	ldr	r3, [r0, #8]
 8004516:	0212      	lsls	r2, r2, #8
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	00d2      	lsls	r2, r2, #3
 8004520:	4293      	cmp	r3, r2
 8004522:	d104      	bne.n	800452e <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	6813      	ldr	r3, [r2, #0]
 800452a:	438b      	bics	r3, r1
 800452c:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800452e:	003a      	movs	r2, r7
 8004530:	0031      	movs	r1, r6
 8004532:	0020      	movs	r0, r4
 8004534:	f7ff ffb6 	bl	80044a4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8004538:	1e05      	subs	r5, r0, #0
 800453a:	d005      	beq.n	8004548 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	2320      	movs	r3, #32
 800453e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004540:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004542:	4313      	orrs	r3, r2
 8004544:	6623      	str	r3, [r4, #96]	; 0x60
 8004546:	e016      	b.n	8004576 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	2382      	movs	r3, #130	; 0x82
 800454a:	6862      	ldr	r2, [r4, #4]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	d111      	bne.n	8004576 <SPI_EndRxTransaction+0x76>
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	0212      	lsls	r2, r2, #8
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	00d2      	lsls	r2, r2, #3
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <SPI_EndRxTransaction+0x76>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004564:	21c0      	movs	r1, #192	; 0xc0
 8004566:	003b      	movs	r3, r7
 8004568:	0032      	movs	r2, r6
 800456a:	00c9      	lsls	r1, r1, #3
 800456c:	0020      	movs	r0, r4
 800456e:	f7ff ffad 	bl	80044cc <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8004572:	2800      	cmp	r0, #0
 8004574:	d1e2      	bne.n	800453c <SPI_EndRxTransaction+0x3c>
}
 8004576:	0028      	movs	r0, r5
 8004578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800457a <SPI_EndRxTxTransaction>:
{
 800457a:	b570      	push	{r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800457c:	0013      	movs	r3, r2
{
 800457e:	000d      	movs	r5, r1
 8004580:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004582:	000a      	movs	r2, r1
 8004584:	21c0      	movs	r1, #192	; 0xc0
 8004586:	0149      	lsls	r1, r1, #5
{
 8004588:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800458a:	f7ff ff9f 	bl	80044cc <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800458e:	2800      	cmp	r0, #0
 8004590:	d005      	beq.n	800459e <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004592:	2320      	movs	r3, #32
 8004594:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004596:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004598:	4313      	orrs	r3, r2
 800459a:	6623      	str	r3, [r4, #96]	; 0x60
 800459c:	e00f      	b.n	80045be <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800459e:	0032      	movs	r2, r6
 80045a0:	0029      	movs	r1, r5
 80045a2:	0020      	movs	r0, r4
 80045a4:	f7ff ff7e 	bl	80044a4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d1f2      	bne.n	8004592 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045ac:	21c0      	movs	r1, #192	; 0xc0
 80045ae:	0033      	movs	r3, r6
 80045b0:	002a      	movs	r2, r5
 80045b2:	00c9      	lsls	r1, r1, #3
 80045b4:	0020      	movs	r0, r4
 80045b6:	f7ff ff89 	bl	80044cc <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d1e9      	bne.n	8004592 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 80045be:	bd70      	pop	{r4, r5, r6, pc}

080045c0 <HAL_SPI_Init>:
{
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	d04e      	beq.n	8004668 <HAL_SPI_Init+0xa8>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ca:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80045cc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d0:	355d      	adds	r5, #93	; 0x5d
 80045d2:	782b      	ldrb	r3, [r5, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80045da:	0022      	movs	r2, r4
 80045dc:	325c      	adds	r2, #92	; 0x5c
 80045de:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80045e0:	0020      	movs	r0, r4
 80045e2:	f7fe f975 	bl	80028d0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80045e6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80045ec:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80045ee:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f0:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80045f2:	438b      	bics	r3, r1
 80045f4:	21e0      	movs	r1, #224	; 0xe0
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	00c9      	lsls	r1, r1, #3
 80045fa:	2300      	movs	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045fc:	4288      	cmp	r0, r1
 80045fe:	d834      	bhi.n	800466a <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004600:	2680      	movs	r6, #128	; 0x80
 8004602:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004604:	4288      	cmp	r0, r1
 8004606:	d101      	bne.n	800460c <HAL_SPI_Init+0x4c>
 8004608:	e001      	b.n	800460e <HAL_SPI_Init+0x4e>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800460a:	001e      	movs	r6, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800460e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <HAL_SPI_Init+0x5e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004614:	3302      	adds	r3, #2
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004616:	4288      	cmp	r0, r1
 8004618:	d800      	bhi.n	800461c <HAL_SPI_Init+0x5c>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800461a:	2301      	movs	r3, #1
 800461c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800461e:	68a7      	ldr	r7, [r4, #8]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	69a1      	ldr	r1, [r4, #24]
 8004624:	433b      	orrs	r3, r7
 8004626:	6927      	ldr	r7, [r4, #16]
 8004628:	433b      	orrs	r3, r7
 800462a:	6967      	ldr	r7, [r4, #20]
 800462c:	433b      	orrs	r3, r7
 800462e:	69e7      	ldr	r7, [r4, #28]
 8004630:	433b      	orrs	r3, r7
 8004632:	6a27      	ldr	r7, [r4, #32]
 8004634:	433b      	orrs	r3, r7
 8004636:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004638:	433b      	orrs	r3, r7
 800463a:	2780      	movs	r7, #128	; 0x80
 800463c:	00bf      	lsls	r7, r7, #2
 800463e:	400f      	ands	r7, r1
 8004640:	433b      	orrs	r3, r7
 8004642:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004646:	0c09      	lsrs	r1, r1, #16
 8004648:	4318      	orrs	r0, r3
 800464a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800464c:	4318      	orrs	r0, r3
 800464e:	2304      	movs	r3, #4
 8004650:	4019      	ands	r1, r3
 8004652:	4301      	orrs	r1, r0
 8004654:	430e      	orrs	r6, r1
 8004656:	6056      	str	r6, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004658:	69d3      	ldr	r3, [r2, #28]
 800465a:	4907      	ldr	r1, [pc, #28]	; (8004678 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465e:	400b      	ands	r3, r1
 8004660:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004662:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004664:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004666:	702b      	strb	r3, [r5, #0]
}
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800466a:	26f0      	movs	r6, #240	; 0xf0
 800466c:	0136      	lsls	r6, r6, #4
 800466e:	42b0      	cmp	r0, r6
 8004670:	d1cb      	bne.n	800460a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004672:	001e      	movs	r6, r3
 8004674:	e7cb      	b.n	800460e <HAL_SPI_Init+0x4e>
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	fffff7ff 	.word	0xfffff7ff

0800467c <HAL_SPI_TransmitReceive>:
{
 800467c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800467e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004680:	0003      	movs	r3, r0
 8004682:	335c      	adds	r3, #92	; 0x5c
{
 8004684:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8004686:	781a      	ldrb	r2, [r3, #0]
{
 8004688:	0004      	movs	r4, r0
 800468a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800468c:	2002      	movs	r0, #2
 800468e:	2a01      	cmp	r2, #1
 8004690:	d100      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x18>
 8004692:	e0aa      	b.n	80047ea <HAL_SPI_TransmitReceive+0x16e>
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004698:	f7fe f9e8 	bl	8002a6c <HAL_GetTick>
  tmp_state           = hspi->State;
 800469c:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800469e:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80046a0:	335d      	adds	r3, #93	; 0x5d
 80046a2:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80046a4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80046a6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d00c      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x4a>
 80046ac:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 80046ae:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046b0:	0052      	lsls	r2, r2, #1
 80046b2:	4291      	cmp	r1, r2
 80046b4:	d000      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0x3c>
 80046b6:	e091      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046b8:	68a2      	ldr	r2, [r4, #8]
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d000      	beq.n	80046c0 <HAL_SPI_TransmitReceive+0x44>
 80046be:	e08d      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d000      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x4a>
 80046c4:	e08a      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
    errorcode = HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	d100      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x52>
 80046cc:	e086      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	d100      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x58>
 80046d2:	e083      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	d100      	bne.n	80046da <HAL_SPI_TransmitReceive+0x5e>
 80046d8:	e080      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046da:	0023      	movs	r3, r4
 80046dc:	335d      	adds	r3, #93	; 0x5d
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	2a04      	cmp	r2, #4
 80046e2:	d001      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046e4:	2205      	movs	r2, #5
 80046e6:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 80046e8:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ea:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 80046ec:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046f0:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80046f2:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046f4:	1da2      	adds	r2, r4, #6
 80046f6:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046f8:	22e0      	movs	r2, #224	; 0xe0
 80046fa:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80046fc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046fe:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004700:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004702:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004704:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8004706:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004708:	00d2      	lsls	r2, r2, #3
 800470a:	4290      	cmp	r0, r2
 800470c:	d801      	bhi.n	8004712 <HAL_SPI_TransmitReceive+0x96>
 800470e:	2e01      	cmp	r6, #1
 8004710:	d930      	bls.n	8004774 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4f6f      	ldr	r7, [pc, #444]	; (80048d4 <HAL_SPI_TransmitReceive+0x258>)
 8004716:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004718:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	681f      	ldr	r7, [r3, #0]
 800471e:	4217      	tst	r7, r2
 8004720:	d102      	bne.n	8004728 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8004722:	681f      	ldr	r7, [r3, #0]
 8004724:	433a      	orrs	r2, r7
 8004726:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004728:	22e0      	movs	r2, #224	; 0xe0
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	4290      	cmp	r0, r2
 800472e:	d95d      	bls.n	80047ec <HAL_SPI_TransmitReceive+0x170>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004730:	2900      	cmp	r1, #0
 8004732:	d001      	beq.n	8004738 <HAL_SPI_TransmitReceive+0xbc>
 8004734:	2e01      	cmp	r6, #1
 8004736:	d107      	bne.n	8004748 <HAL_SPI_TransmitReceive+0xcc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004738:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800473e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004740:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004742:	3b01      	subs	r3, #1
 8004744:	b29b      	uxth	r3, r3
 8004746:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004748:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800474a:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474c:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004750:	2b00      	cmp	r3, #0
 8004752:	d114      	bne.n	800477e <HAL_SPI_TransmitReceive+0x102>
 8004754:	0023      	movs	r3, r4
 8004756:	3308      	adds	r3, #8
 8004758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475e:	9a01      	ldr	r2, [sp, #4]
 8004760:	9908      	ldr	r1, [sp, #32]
 8004762:	0020      	movs	r0, r4
 8004764:	f7ff ff09 	bl	800457a <SPI_EndRxTxTransaction>
 8004768:	2800      	cmp	r0, #0
 800476a:	d037      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800476c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800476e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004770:	6623      	str	r3, [r4, #96]	; 0x60
 8004772:	e033      	b.n	80047dc <HAL_SPI_TransmitReceive+0x160>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	685f      	ldr	r7, [r3, #4]
 8004778:	0152      	lsls	r2, r2, #5
 800477a:	433a      	orrs	r2, r7
 800477c:	e7cc      	b.n	8004718 <HAL_SPI_TransmitReceive+0x9c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800477e:	6821      	ldr	r1, [r4, #0]
 8004780:	688b      	ldr	r3, [r1, #8]
 8004782:	423b      	tst	r3, r7
 8004784:	d00e      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x128>
 8004786:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x128>
 800478c:	2d01      	cmp	r5, #1
 800478e:	d109      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 0U;
 8004790:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004794:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004796:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004798:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800479a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800479c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a4:	688b      	ldr	r3, [r1, #8]
 80047a6:	4233      	tst	r3, r6
 80047a8:	d00e      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x14c>
 80047aa:	0022      	movs	r2, r4
 80047ac:	3208      	adds	r2, #8
 80047ae:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x14c>
        txallowed = 1U;
 80047b4:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b6:	68c9      	ldr	r1, [r1, #12]
 80047b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ba:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047bc:	3302      	adds	r3, #2
 80047be:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80047c0:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c8:	f7fe f950 	bl	8002a6c <HAL_GetTick>
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	1ac0      	subs	r0, r0, r3
 80047d0:	9b08      	ldr	r3, [sp, #32]
 80047d2:	4283      	cmp	r3, r0
 80047d4:	d8bb      	bhi.n	800474e <HAL_SPI_TransmitReceive+0xd2>
 80047d6:	3301      	adds	r3, #1
 80047d8:	d0b9      	beq.n	800474e <HAL_SPI_TransmitReceive+0xd2>
        errorcode = HAL_TIMEOUT;
 80047da:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80047dc:	0023      	movs	r3, r4
 80047de:	2201      	movs	r2, #1
 80047e0:	335d      	adds	r3, #93	; 0x5d
 80047e2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80047e4:	2300      	movs	r3, #0
 80047e6:	345c      	adds	r4, #92	; 0x5c
 80047e8:	7023      	strb	r3, [r4, #0]
}
 80047ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ec:	2900      	cmp	r1, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x178>
 80047f0:	2e01      	cmp	r6, #1
 80047f2:	d10a      	bne.n	800480a <HAL_SPI_TransmitReceive+0x18e>
      if (hspi->TxXferCount > 1U)
 80047f4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	d951      	bls.n	800489e <HAL_SPI_TransmitReceive+0x222>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fa:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fc:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fe:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004800:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004802:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004804:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004806:	b29b      	uxth	r3, r3
 8004808:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800480a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x1a6>
 8004816:	0023      	movs	r3, r4
 8004818:	3308      	adds	r3, #8
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	2b00      	cmp	r3, #0
 800481e:	d100      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x1a6>
 8004820:	e79d      	b.n	800475e <HAL_SPI_TransmitReceive+0xe2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	6893      	ldr	r3, [r2, #8]
 8004826:	423b      	tst	r3, r7
 8004828:	d011      	beq.n	800484e <HAL_SPI_TransmitReceive+0x1d2>
 800482a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <HAL_SPI_TransmitReceive+0x1d2>
 8004830:	2d01      	cmp	r5, #1
 8004832:	d10c      	bne.n	800484e <HAL_SPI_TransmitReceive+0x1d2>
        if (hspi->TxXferCount > 1U)
 8004834:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004838:	2901      	cmp	r1, #1
 800483a:	d938      	bls.n	80048ae <HAL_SPI_TransmitReceive+0x232>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483c:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004840:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004844:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004846:	3b02      	subs	r3, #2
        txallowed = 0U;
 8004848:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 800484a:	b29b      	uxth	r3, r3
 800484c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800484e:	6821      	ldr	r1, [r4, #0]
 8004850:	688b      	ldr	r3, [r1, #8]
 8004852:	4233      	tst	r3, r6
 8004854:	d019      	beq.n	800488a <HAL_SPI_TransmitReceive+0x20e>
 8004856:	0023      	movs	r3, r4
 8004858:	3308      	adds	r3, #8
 800485a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800485c:	2a00      	cmp	r2, #0
 800485e:	d014      	beq.n	800488a <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 8004860:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8004862:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004864:	2801      	cmp	r0, #1
 8004866:	d92a      	bls.n	80048be <HAL_SPI_TransmitReceive+0x242>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004868:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 800486a:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800486c:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800486e:	3202      	adds	r2, #2
 8004870:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004872:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004874:	3a02      	subs	r2, #2
 8004876:	b292      	uxth	r2, r2
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 800487a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487c:	2b01      	cmp	r3, #1
 800487e:	d804      	bhi.n	800488a <HAL_SPI_TransmitReceive+0x20e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	684a      	ldr	r2, [r1, #4]
 8004884:	015b      	lsls	r3, r3, #5
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800488a:	f7fe f8ef 	bl	8002a6c <HAL_GetTick>
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	1ac0      	subs	r0, r0, r3
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	4283      	cmp	r3, r0
 8004896:	d8bb      	bhi.n	8004810 <HAL_SPI_TransmitReceive+0x194>
 8004898:	3301      	adds	r3, #1
 800489a:	d0b9      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x194>
 800489c:	e79d      	b.n	80047da <HAL_SPI_TransmitReceive+0x15e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800489e:	782a      	ldrb	r2, [r5, #0]
 80048a0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80048a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048a4:	3301      	adds	r3, #1
 80048a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80048a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048aa:	3b01      	subs	r3, #1
 80048ac:	e7ab      	b.n	8004806 <HAL_SPI_TransmitReceive+0x18a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80048b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048b4:	3301      	adds	r3, #1
 80048b6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80048b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048ba:	3b01      	subs	r3, #1
 80048bc:	e7c4      	b.n	8004848 <HAL_SPI_TransmitReceive+0x1cc>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048be:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 80048c0:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048c2:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80048c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048c6:	3201      	adds	r2, #1
 80048c8:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80048ca:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80048cc:	3a01      	subs	r2, #1
 80048ce:	b292      	uxth	r2, r2
 80048d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d2:	e7da      	b.n	800488a <HAL_SPI_TransmitReceive+0x20e>
 80048d4:	ffffefff 	.word	0xffffefff

080048d8 <HAL_SPI_Receive>:
{
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048dc:	2382      	movs	r3, #130	; 0x82
{
 80048de:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048e0:	6842      	ldr	r2, [r0, #4]
{
 80048e2:	b087      	sub	sp, #28
 80048e4:	0004      	movs	r4, r0
 80048e6:	000f      	movs	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d10d      	bne.n	800490a <HAL_SPI_Receive+0x32>
 80048ee:	6883      	ldr	r3, [r0, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048f4:	0003      	movs	r3, r0
 80048f6:	2204      	movs	r2, #4
 80048f8:	335d      	adds	r3, #93	; 0x5d
 80048fa:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048fc:	9500      	str	r5, [sp, #0]
 80048fe:	0033      	movs	r3, r6
 8004900:	000a      	movs	r2, r1
 8004902:	f7ff febb 	bl	800467c <HAL_SPI_TransmitReceive>
}
 8004906:	b007      	add	sp, #28
 8004908:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800490a:	0023      	movs	r3, r4
 800490c:	335c      	adds	r3, #92	; 0x5c
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2002      	movs	r0, #2
 8004914:	2b01      	cmp	r3, #1
 8004916:	d0f6      	beq.n	8004906 <HAL_SPI_Receive+0x2e>
 8004918:	2301      	movs	r3, #1
 800491a:	9a04      	ldr	r2, [sp, #16]
 800491c:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800491e:	f7fe f8a5 	bl	8002a6c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004922:	0023      	movs	r3, r4
 8004924:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8004926:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004928:	9305      	str	r3, [sp, #20]
 800492a:	781b      	ldrb	r3, [r3, #0]
    errorcode = HAL_BUSY;
 800492c:	2002      	movs	r0, #2
  if (hspi->State != HAL_SPI_STATE_READY)
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d160      	bne.n	80049f6 <HAL_SPI_Receive+0x11e>
    errorcode = HAL_ERROR;
 8004934:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 8004936:	2f00      	cmp	r7, #0
 8004938:	d05d      	beq.n	80049f6 <HAL_SPI_Receive+0x11e>
 800493a:	2e00      	cmp	r6, #0
 800493c:	d05b      	beq.n	80049f6 <HAL_SPI_Receive+0x11e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800493e:	9a05      	ldr	r2, [sp, #20]
 8004940:	3303      	adds	r3, #3
 8004942:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 8004946:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004948:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800494a:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800494c:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 800494e:	8796      	strh	r6, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004950:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004952:	22e0      	movs	r2, #224	; 0xe0
 8004954:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004956:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004958:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800495a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800495c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800495e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004960:	00d2      	lsls	r2, r2, #3
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	4291      	cmp	r1, r2
 8004966:	d929      	bls.n	80049bc <HAL_SPI_Receive+0xe4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4835      	ldr	r0, [pc, #212]	; (8004a40 <HAL_SPI_Receive+0x168>)
 800496c:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800496e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	68a0      	ldr	r0, [r4, #8]
 8004974:	0212      	lsls	r2, r2, #8
 8004976:	4290      	cmp	r0, r2
 8004978:	d103      	bne.n	8004982 <HAL_SPI_Receive+0xaa>
    SPI_1LINE_RX(hspi);
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4831      	ldr	r0, [pc, #196]	; (8004a44 <HAL_SPI_Receive+0x16c>)
 800497e:	4002      	ands	r2, r0
 8004980:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	4210      	tst	r0, r2
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4302      	orrs	r2, r0
 800498e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004990:	23e0      	movs	r3, #224	; 0xe0
 8004992:	0026      	movs	r6, r4
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	3608      	adds	r6, #8
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004998:	2701      	movs	r7, #1
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800499a:	4299      	cmp	r1, r3
 800499c:	d83f      	bhi.n	8004a1e <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 800499e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d110      	bne.n	80049c6 <HAL_SPI_Receive+0xee>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a4:	9a03      	ldr	r2, [sp, #12]
 80049a6:	0029      	movs	r1, r5
 80049a8:	0020      	movs	r0, r4
 80049aa:	f7ff fda9 	bl	8004500 <SPI_EndRxTransaction>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d142      	bne.n	8004a38 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80049b4:	1e43      	subs	r3, r0, #1
 80049b6:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80049b8:	b2c0      	uxtb	r0, r0
error :
 80049ba:	e01c      	b.n	80049f6 <HAL_SPI_Receive+0x11e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	6858      	ldr	r0, [r3, #4]
 80049c0:	0152      	lsls	r2, r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	e7d3      	b.n	800496e <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	423a      	tst	r2, r7
 80049cc:	d00a      	beq.n	80049e4 <HAL_SPI_Receive+0x10c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049ce:	7b1b      	ldrb	r3, [r3, #12]
 80049d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049d2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d6:	3301      	adds	r3, #1
 80049d8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80049da:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	87f3      	strh	r3, [r6, #62]	; 0x3e
 80049e2:	e7dc      	b.n	800499e <HAL_SPI_Receive+0xc6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e4:	f7fe f842 	bl	8002a6c <HAL_GetTick>
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	1ac0      	subs	r0, r0, r3
 80049ec:	42a8      	cmp	r0, r5
 80049ee:	d3d6      	bcc.n	800499e <HAL_SPI_Receive+0xc6>
 80049f0:	1c6b      	adds	r3, r5, #1
 80049f2:	d0d4      	beq.n	800499e <HAL_SPI_Receive+0xc6>
          errorcode = HAL_TIMEOUT;
 80049f4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80049f6:	2301      	movs	r3, #1
 80049f8:	9a05      	ldr	r2, [sp, #20]
 80049fa:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80049fc:	2300      	movs	r3, #0
 80049fe:	9a04      	ldr	r2, [sp, #16]
 8004a00:	7013      	strb	r3, [r2, #0]
  return errorcode;
 8004a02:	e780      	b.n	8004906 <HAL_SPI_Receive+0x2e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	423a      	tst	r2, r7
 8004a0a:	d00c      	beq.n	8004a26 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a12:	3302      	adds	r3, #2
 8004a14:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004a16:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	87f3      	strh	r3, [r6, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004a1e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ef      	bne.n	8004a04 <HAL_SPI_Receive+0x12c>
 8004a24:	e7be      	b.n	80049a4 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a26:	f7fe f821 	bl	8002a6c <HAL_GetTick>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	1ac0      	subs	r0, r0, r3
 8004a2e:	42a8      	cmp	r0, r5
 8004a30:	d3f5      	bcc.n	8004a1e <HAL_SPI_Receive+0x146>
 8004a32:	1c6b      	adds	r3, r5, #1
 8004a34:	d0f3      	beq.n	8004a1e <HAL_SPI_Receive+0x146>
 8004a36:	e7dd      	b.n	80049f4 <HAL_SPI_Receive+0x11c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	6623      	str	r3, [r4, #96]	; 0x60
 8004a3c:	e7b9      	b.n	80049b2 <HAL_SPI_Receive+0xda>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	ffffefff 	.word	0xffffefff
 8004a44:	ffffbfff 	.word	0xffffbfff

08004a48 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004a48:	3002      	adds	r0, #2
 8004a4a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004a4c:	4a02      	ldr	r2, [pc, #8]	; (8004a58 <USB_EnableGlobalInt+0x10>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	0000bf80 	.word	0x0000bf80

08004a5c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004a5c:	3002      	adds	r0, #2
 8004a5e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004a60:	4a02      	ldr	r2, [pc, #8]	; (8004a6c <USB_DisableGlobalInt+0x10>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004a66:	2000      	movs	r0, #0
 8004a68:	4770      	bx	lr
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	0000407f 	.word	0x0000407f

08004a70 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a70:	b084      	sub	sp, #16
 8004a72:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004a74:	2301      	movs	r3, #1
{
 8004a76:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004a78:	2200      	movs	r2, #0
{
 8004a7a:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 8004a7c:	1c81      	adds	r1, r0, #2
 8004a7e:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004a80:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a82:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 8004a84:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 8004a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a88:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 8004a8a:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <USB_DevInit+0x28>)
 8004a8e:	4303      	orrs	r3, r0
 8004a90:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004a92:	0010      	movs	r0, r2
 8004a94:	b004      	add	sp, #16
 8004a96:	4770      	bx	lr
 8004a98:	0000bf80 	.word	0x0000bf80

08004a9c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a9e:	780d      	ldrb	r5, [r1, #0]
 8004aa0:	4a91      	ldr	r2, [pc, #580]	; (8004ce8 <USB_ActivateEndpoint+0x24c>)
 8004aa2:	00ad      	lsls	r5, r5, #2
 8004aa4:	1945      	adds	r5, r0, r5
 8004aa6:	882c      	ldrh	r4, [r5, #0]
{
 8004aa8:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aaa:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004aac:	2201      	movs	r2, #1
  switch (ep->type)
 8004aae:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 8004ab0:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 8004ab2:	2803      	cmp	r0, #3
 8004ab4:	d808      	bhi.n	8004ac8 <USB_ActivateEndpoint+0x2c>
 8004ab6:	f7fb fb2f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004aba:	4b02      	.short	0x4b02
 8004abc:	4805      	.short	0x4805
      wEpRegVal |= USB_EP_CONTROL;
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	0092      	lsls	r2, r2, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ac2:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	001e      	movs	r6, r3
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004aca:	4a88      	ldr	r2, [pc, #544]	; (8004cec <USB_ActivateEndpoint+0x250>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004acc:	4f88      	ldr	r7, [pc, #544]	; (8004cf0 <USB_ActivateEndpoint+0x254>)
  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004ace:	4314      	orrs	r4, r2
 8004ad0:	b2a4      	uxth	r4, r4
 8004ad2:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ad4:	780d      	ldrb	r5, [r1, #0]
 8004ad6:	3650      	adds	r6, #80	; 0x50
 8004ad8:	00ac      	lsls	r4, r5, #2
 8004ada:	191c      	adds	r4, r3, r4
 8004adc:	8820      	ldrh	r0, [r4, #0]
 8004ade:	4038      	ands	r0, r7
 8004ae0:	4328      	orrs	r0, r5
 8004ae2:	4310      	orrs	r0, r2
 8004ae4:	b280      	uxth	r0, r0
 8004ae6:	8020      	strh	r0, [r4, #0]

  if (ep->doublebuffer == 0U)
 8004ae8:	7b0d      	ldrb	r5, [r1, #12]
 8004aea:	7808      	ldrb	r0, [r1, #0]
 8004aec:	003c      	movs	r4, r7
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	d000      	beq.n	8004af4 <USB_ActivateEndpoint+0x58>
 8004af2:	e06f      	b.n	8004bd4 <USB_ActivateEndpoint+0x138>
 8004af4:	00c0      	lsls	r0, r0, #3
 8004af6:	18c0      	adds	r0, r0, r3
 8004af8:	88cd      	ldrh	r5, [r1, #6]
 8004afa:	9001      	str	r0, [sp, #4]
  {
    if (ep->is_in != 0U)
 8004afc:	7848      	ldrb	r0, [r1, #1]
 8004afe:	086d      	lsrs	r5, r5, #1
 8004b00:	006d      	lsls	r5, r5, #1
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d029      	beq.n	8004b5a <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b06:	8834      	ldrh	r4, [r6, #0]
 8004b08:	9801      	ldr	r0, [sp, #4]
 8004b0a:	1820      	adds	r0, r4, r0
 8004b0c:	2480      	movs	r4, #128	; 0x80
 8004b0e:	00e4      	lsls	r4, r4, #3
 8004b10:	1900      	adds	r0, r0, r4
 8004b12:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b14:	7808      	ldrb	r0, [r1, #0]
 8004b16:	0080      	lsls	r0, r0, #2
 8004b18:	1818      	adds	r0, r3, r0
 8004b1a:	8804      	ldrh	r4, [r0, #0]
 8004b1c:	0664      	lsls	r4, r4, #25
 8004b1e:	d504      	bpl.n	8004b2a <USB_ActivateEndpoint+0x8e>
 8004b20:	8804      	ldrh	r4, [r0, #0]
 8004b22:	4027      	ands	r7, r4
 8004b24:	4c73      	ldr	r4, [pc, #460]	; (8004cf4 <USB_ActivateEndpoint+0x258>)
 8004b26:	4327      	orrs	r7, r4
 8004b28:	8007      	strh	r7, [r0, #0]
 8004b2a:	7808      	ldrb	r0, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b2c:	78c9      	ldrb	r1, [r1, #3]
 8004b2e:	0080      	lsls	r0, r0, #2
 8004b30:	181b      	adds	r3, r3, r0
 8004b32:	4871      	ldr	r0, [pc, #452]	; (8004cf8 <USB_ActivateEndpoint+0x25c>)
 8004b34:	2901      	cmp	r1, #1
 8004b36:	d00d      	beq.n	8004b54 <USB_ActivateEndpoint+0xb8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b38:	8819      	ldrh	r1, [r3, #0]
 8004b3a:	4008      	ands	r0, r1
 8004b3c:	2120      	movs	r1, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b3e:	4041      	eors	r1, r0
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b40:	430a      	orrs	r2, r1
 8004b42:	b292      	uxth	r2, r2
    }
  }

  return ret;
}
 8004b44:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b46:	801a      	strh	r2, [r3, #0]
}
 8004b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b4a:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b4c:	00d2      	lsls	r2, r2, #3
 8004b4e:	e7b8      	b.n	8004ac2 <USB_ActivateEndpoint+0x26>
 8004b50:	2280      	movs	r2, #128	; 0x80
 8004b52:	e7fb      	b.n	8004b4c <USB_ActivateEndpoint+0xb0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b54:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b56:	4001      	ands	r1, r0
 8004b58:	e7f2      	b.n	8004b40 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b5a:	8837      	ldrh	r7, [r6, #0]
 8004b5c:	9801      	ldr	r0, [sp, #4]
 8004b5e:	1838      	adds	r0, r7, r0
 8004b60:	4f66      	ldr	r7, [pc, #408]	; (8004cfc <USB_ActivateEndpoint+0x260>)
 8004b62:	19c0      	adds	r0, r0, r7
 8004b64:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b66:	7808      	ldrb	r0, [r1, #0]
 8004b68:	8835      	ldrh	r5, [r6, #0]
 8004b6a:	00c0      	lsls	r0, r0, #3
 8004b6c:	4e64      	ldr	r6, [pc, #400]	; (8004d00 <USB_ActivateEndpoint+0x264>)
 8004b6e:	18c0      	adds	r0, r0, r3
 8004b70:	1980      	adds	r0, r0, r6
 8004b72:	1940      	adds	r0, r0, r5
 8004b74:	690d      	ldr	r5, [r1, #16]
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	d119      	bne.n	8004bae <USB_ActivateEndpoint+0x112>
 8004b7a:	8805      	ldrh	r5, [r0, #0]
 8004b7c:	4e61      	ldr	r6, [pc, #388]	; (8004d04 <USB_ActivateEndpoint+0x268>)
 8004b7e:	402e      	ands	r6, r5
 8004b80:	4d61      	ldr	r5, [pc, #388]	; (8004d08 <USB_ActivateEndpoint+0x26c>)
 8004b82:	4335      	orrs	r5, r6
 8004b84:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	7808      	ldrb	r0, [r1, #0]
 8004b88:	0080      	lsls	r0, r0, #2
 8004b8a:	1818      	adds	r0, r3, r0
 8004b8c:	8805      	ldrh	r5, [r0, #0]
 8004b8e:	046d      	lsls	r5, r5, #17
 8004b90:	d504      	bpl.n	8004b9c <USB_ActivateEndpoint+0x100>
 8004b92:	8805      	ldrh	r5, [r0, #0]
 8004b94:	402c      	ands	r4, r5
 8004b96:	4d5d      	ldr	r5, [pc, #372]	; (8004d0c <USB_ActivateEndpoint+0x270>)
 8004b98:	432c      	orrs	r4, r5
 8004b9a:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b9c:	7809      	ldrb	r1, [r1, #0]
 8004b9e:	485c      	ldr	r0, [pc, #368]	; (8004d10 <USB_ActivateEndpoint+0x274>)
 8004ba0:	0089      	lsls	r1, r1, #2
 8004ba2:	185b      	adds	r3, r3, r1
 8004ba4:	8819      	ldrh	r1, [r3, #0]
 8004ba6:	4008      	ands	r0, r1
 8004ba8:	21c0      	movs	r1, #192	; 0xc0
 8004baa:	0189      	lsls	r1, r1, #6
 8004bac:	e7c7      	b.n	8004b3e <USB_ActivateEndpoint+0xa2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bae:	2d3e      	cmp	r5, #62	; 0x3e
 8004bb0:	d806      	bhi.n	8004bc0 <USB_ActivateEndpoint+0x124>
 8004bb2:	2701      	movs	r7, #1
 8004bb4:	086e      	lsrs	r6, r5, #1
 8004bb6:	403d      	ands	r5, r7
 8004bb8:	1976      	adds	r6, r6, r5
 8004bba:	02b6      	lsls	r6, r6, #10
 8004bbc:	8006      	strh	r6, [r0, #0]
 8004bbe:	e7e2      	b.n	8004b86 <USB_ActivateEndpoint+0xea>
 8004bc0:	271f      	movs	r7, #31
 8004bc2:	096e      	lsrs	r6, r5, #5
 8004bc4:	403d      	ands	r5, r7
 8004bc6:	426f      	negs	r7, r5
 8004bc8:	417d      	adcs	r5, r7
 8004bca:	1b76      	subs	r6, r6, r5
 8004bcc:	4d4e      	ldr	r5, [pc, #312]	; (8004d08 <USB_ActivateEndpoint+0x26c>)
 8004bce:	02b6      	lsls	r6, r6, #10
 8004bd0:	432e      	orrs	r6, r5
 8004bd2:	e7f3      	b.n	8004bbc <USB_ActivateEndpoint+0x120>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004bd4:	0080      	lsls	r0, r0, #2
 8004bd6:	1818      	adds	r0, r3, r0
 8004bd8:	8805      	ldrh	r5, [r0, #0]
 8004bda:	403d      	ands	r5, r7
 8004bdc:	4f4d      	ldr	r7, [pc, #308]	; (8004d14 <USB_ActivateEndpoint+0x278>)
 8004bde:	433d      	orrs	r5, r7
 8004be0:	8005      	strh	r5, [r0, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004be2:	7808      	ldrb	r0, [r1, #0]
 8004be4:	8835      	ldrh	r5, [r6, #0]
 8004be6:	00c0      	lsls	r0, r0, #3
 8004be8:	1940      	adds	r0, r0, r5
 8004bea:	2580      	movs	r5, #128	; 0x80
 8004bec:	18c0      	adds	r0, r0, r3
 8004bee:	00ed      	lsls	r5, r5, #3
 8004bf0:	1940      	adds	r0, r0, r5
 8004bf2:	890d      	ldrh	r5, [r1, #8]
 8004bf4:	086d      	lsrs	r5, r5, #1
 8004bf6:	006d      	lsls	r5, r5, #1
 8004bf8:	8005      	strh	r5, [r0, #0]
 8004bfa:	8835      	ldrh	r5, [r6, #0]
 8004bfc:	4e3e      	ldr	r6, [pc, #248]	; (8004cf8 <USB_ActivateEndpoint+0x25c>)
 8004bfe:	7808      	ldrb	r0, [r1, #0]
 8004c00:	46b4      	mov	ip, r6
 8004c02:	2680      	movs	r6, #128	; 0x80
 8004c04:	00c0      	lsls	r0, r0, #3
 8004c06:	1940      	adds	r0, r0, r5
 8004c08:	4d3c      	ldr	r5, [pc, #240]	; (8004cfc <USB_ActivateEndpoint+0x260>)
 8004c0a:	18c0      	adds	r0, r0, r3
 8004c0c:	1940      	adds	r0, r0, r5
 8004c0e:	894d      	ldrh	r5, [r1, #10]
 8004c10:	01f6      	lsls	r6, r6, #7
 8004c12:	086d      	lsrs	r5, r5, #1
 8004c14:	006d      	lsls	r5, r5, #1
 8004c16:	8005      	strh	r5, [r0, #0]
 8004c18:	7808      	ldrb	r0, [r1, #0]
    if (ep->is_in == 0U)
 8004c1a:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c1c:	0080      	lsls	r0, r0, #2
 8004c1e:	1818      	adds	r0, r3, r0
    if (ep->is_in == 0U)
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	d12d      	bne.n	8004c80 <USB_ActivateEndpoint+0x1e4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c24:	8805      	ldrh	r5, [r0, #0]
 8004c26:	4235      	tst	r5, r6
 8004c28:	d004      	beq.n	8004c34 <USB_ActivateEndpoint+0x198>
 8004c2a:	8805      	ldrh	r5, [r0, #0]
 8004c2c:	4e37      	ldr	r6, [pc, #220]	; (8004d0c <USB_ActivateEndpoint+0x270>)
 8004c2e:	4025      	ands	r5, r4
 8004c30:	4335      	orrs	r5, r6
 8004c32:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c34:	7808      	ldrb	r0, [r1, #0]
 8004c36:	4e38      	ldr	r6, [pc, #224]	; (8004d18 <USB_ActivateEndpoint+0x27c>)
 8004c38:	0080      	lsls	r0, r0, #2
 8004c3a:	1818      	adds	r0, r3, r0
 8004c3c:	8805      	ldrh	r5, [r0, #0]
 8004c3e:	066d      	lsls	r5, r5, #25
 8004c40:	d504      	bpl.n	8004c4c <USB_ActivateEndpoint+0x1b0>
 8004c42:	8805      	ldrh	r5, [r0, #0]
 8004c44:	4025      	ands	r5, r4
 8004c46:	4335      	orrs	r5, r6
 8004c48:	b2ad      	uxth	r5, r5
 8004c4a:	8005      	strh	r5, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004c4c:	7808      	ldrb	r0, [r1, #0]
 8004c4e:	0080      	lsls	r0, r0, #2
 8004c50:	1818      	adds	r0, r3, r0
 8004c52:	8805      	ldrh	r5, [r0, #0]
 8004c54:	402c      	ands	r4, r5
 8004c56:	4326      	orrs	r6, r4
 8004c58:	b2b6      	uxth	r6, r6
 8004c5a:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c5c:	780c      	ldrb	r4, [r1, #0]
 8004c5e:	482c      	ldr	r0, [pc, #176]	; (8004d10 <USB_ActivateEndpoint+0x274>)
 8004c60:	00a4      	lsls	r4, r4, #2
 8004c62:	191c      	adds	r4, r3, r4
 8004c64:	8825      	ldrh	r5, [r4, #0]
 8004c66:	4005      	ands	r5, r0
 8004c68:	20c0      	movs	r0, #192	; 0xc0
 8004c6a:	0180      	lsls	r0, r0, #6
 8004c6c:	4068      	eors	r0, r5
 8004c6e:	4310      	orrs	r0, r2
 8004c70:	b280      	uxth	r0, r0
 8004c72:	8020      	strh	r0, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c74:	7809      	ldrb	r1, [r1, #0]
 8004c76:	4660      	mov	r0, ip
 8004c78:	0089      	lsls	r1, r1, #2
 8004c7a:	185b      	adds	r3, r3, r1
 8004c7c:	8819      	ldrh	r1, [r3, #0]
 8004c7e:	e76a      	b.n	8004b56 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c80:	8807      	ldrh	r7, [r0, #0]
 8004c82:	4d26      	ldr	r5, [pc, #152]	; (8004d1c <USB_ActivateEndpoint+0x280>)
 8004c84:	4237      	tst	r7, r6
 8004c86:	d004      	beq.n	8004c92 <USB_ActivateEndpoint+0x1f6>
 8004c88:	8806      	ldrh	r6, [r0, #0]
 8004c8a:	4026      	ands	r6, r4
 8004c8c:	432e      	orrs	r6, r5
 8004c8e:	b2b6      	uxth	r6, r6
 8004c90:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c92:	7808      	ldrb	r0, [r1, #0]
 8004c94:	0080      	lsls	r0, r0, #2
 8004c96:	1818      	adds	r0, r3, r0
 8004c98:	8806      	ldrh	r6, [r0, #0]
 8004c9a:	0676      	lsls	r6, r6, #25
 8004c9c:	d504      	bpl.n	8004ca8 <USB_ActivateEndpoint+0x20c>
 8004c9e:	8806      	ldrh	r6, [r0, #0]
 8004ca0:	4f14      	ldr	r7, [pc, #80]	; (8004cf4 <USB_ActivateEndpoint+0x258>)
 8004ca2:	4026      	ands	r6, r4
 8004ca4:	433e      	orrs	r6, r7
 8004ca6:	8006      	strh	r6, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ca8:	7808      	ldrb	r0, [r1, #0]
 8004caa:	0080      	lsls	r0, r0, #2
 8004cac:	1818      	adds	r0, r3, r0
 8004cae:	8806      	ldrh	r6, [r0, #0]
 8004cb0:	4034      	ands	r4, r6
 8004cb2:	4325      	orrs	r5, r4
 8004cb4:	b2ad      	uxth	r5, r5
 8004cb6:	8005      	strh	r5, [r0, #0]
 8004cb8:	7808      	ldrb	r0, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004cba:	78cc      	ldrb	r4, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cbc:	0080      	lsls	r0, r0, #2
 8004cbe:	1818      	adds	r0, r3, r0
      if (ep->type != EP_TYPE_ISOC)
 8004cc0:	2c01      	cmp	r4, #1
 8004cc2:	d00d      	beq.n	8004ce0 <USB_ActivateEndpoint+0x244>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cc4:	4664      	mov	r4, ip
 8004cc6:	8805      	ldrh	r5, [r0, #0]
 8004cc8:	4025      	ands	r5, r4
 8004cca:	2420      	movs	r4, #32
 8004ccc:	406c      	eors	r4, r5
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cce:	4314      	orrs	r4, r2
 8004cd0:	b2a4      	uxth	r4, r4
 8004cd2:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cd4:	7809      	ldrb	r1, [r1, #0]
 8004cd6:	480e      	ldr	r0, [pc, #56]	; (8004d10 <USB_ActivateEndpoint+0x274>)
 8004cd8:	0089      	lsls	r1, r1, #2
 8004cda:	185b      	adds	r3, r3, r1
 8004cdc:	8819      	ldrh	r1, [r3, #0]
 8004cde:	e73a      	b.n	8004b56 <USB_ActivateEndpoint+0xba>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce0:	4665      	mov	r5, ip
 8004ce2:	8804      	ldrh	r4, [r0, #0]
 8004ce4:	402c      	ands	r4, r5
 8004ce6:	e7f2      	b.n	8004cce <USB_ActivateEndpoint+0x232>
 8004ce8:	ffff898f 	.word	0xffff898f
 8004cec:	ffff8080 	.word	0xffff8080
 8004cf0:	ffff8f8f 	.word	0xffff8f8f
 8004cf4:	000080c0 	.word	0x000080c0
 8004cf8:	ffff8fbf 	.word	0xffff8fbf
 8004cfc:	00000404 	.word	0x00000404
 8004d00:	00000406 	.word	0x00000406
 8004d04:	ffff83ff 	.word	0xffff83ff
 8004d08:	ffff8000 	.word	0xffff8000
 8004d0c:	0000c080 	.word	0x0000c080
 8004d10:	ffffbf8f 	.word	0xffffbf8f
 8004d14:	00008180 	.word	0x00008180
 8004d18:	ffff80c0 	.word	0xffff80c0
 8004d1c:	ffffc080 	.word	0xffffc080

08004d20 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004d24:	7b0d      	ldrb	r5, [r1, #12]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	784c      	ldrb	r4, [r1, #1]
 8004d2a:	18c3      	adds	r3, r0, r3
 8004d2c:	4a3f      	ldr	r2, [pc, #252]	; (8004e2c <USB_DeactivateEndpoint+0x10c>)
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	d121      	bne.n	8004d76 <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 8004d32:	2c00      	cmp	r4, #0
 8004d34:	d010      	beq.n	8004d58 <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d36:	881c      	ldrh	r4, [r3, #0]
 8004d38:	0664      	lsls	r4, r4, #25
 8004d3a:	d505      	bpl.n	8004d48 <USB_DeactivateEndpoint+0x28>
 8004d3c:	881c      	ldrh	r4, [r3, #0]
 8004d3e:	4d3c      	ldr	r5, [pc, #240]	; (8004e30 <USB_DeactivateEndpoint+0x110>)
 8004d40:	402c      	ands	r4, r5
 8004d42:	4d3c      	ldr	r5, [pc, #240]	; (8004e34 <USB_DeactivateEndpoint+0x114>)
 8004d44:	432c      	orrs	r4, r5
 8004d46:	801c      	strh	r4, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d48:	780b      	ldrb	r3, [r1, #0]
 8004d4a:	493b      	ldr	r1, [pc, #236]	; (8004e38 <USB_DeactivateEndpoint+0x118>)
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	18c0      	adds	r0, r0, r3
 8004d50:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d52:	400b      	ands	r3, r1
 8004d54:	431a      	orrs	r2, r3
 8004d56:	e03f      	b.n	8004dd8 <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d58:	881c      	ldrh	r4, [r3, #0]
 8004d5a:	0464      	lsls	r4, r4, #17
 8004d5c:	d505      	bpl.n	8004d6a <USB_DeactivateEndpoint+0x4a>
 8004d5e:	881c      	ldrh	r4, [r3, #0]
 8004d60:	4d33      	ldr	r5, [pc, #204]	; (8004e30 <USB_DeactivateEndpoint+0x110>)
 8004d62:	402c      	ands	r4, r5
 8004d64:	4d35      	ldr	r5, [pc, #212]	; (8004e3c <USB_DeactivateEndpoint+0x11c>)
 8004d66:	432c      	orrs	r4, r5
 8004d68:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d6a:	780b      	ldrb	r3, [r1, #0]
 8004d6c:	4934      	ldr	r1, [pc, #208]	; (8004e40 <USB_DeactivateEndpoint+0x120>)
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	18c0      	adds	r0, r0, r3
 8004d72:	8803      	ldrh	r3, [r0, #0]
 8004d74:	e7ed      	b.n	8004d52 <USB_DeactivateEndpoint+0x32>
 8004d76:	2680      	movs	r6, #128	; 0x80
 8004d78:	4d2d      	ldr	r5, [pc, #180]	; (8004e30 <USB_DeactivateEndpoint+0x110>)
 8004d7a:	4f2f      	ldr	r7, [pc, #188]	; (8004e38 <USB_DeactivateEndpoint+0x118>)
 8004d7c:	01f6      	lsls	r6, r6, #7
    if (ep->is_in == 0U)
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d12e      	bne.n	8004de0 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d82:	881c      	ldrh	r4, [r3, #0]
 8004d84:	4234      	tst	r4, r6
 8004d86:	d004      	beq.n	8004d92 <USB_DeactivateEndpoint+0x72>
 8004d88:	881c      	ldrh	r4, [r3, #0]
 8004d8a:	4e2c      	ldr	r6, [pc, #176]	; (8004e3c <USB_DeactivateEndpoint+0x11c>)
 8004d8c:	402c      	ands	r4, r5
 8004d8e:	4334      	orrs	r4, r6
 8004d90:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d92:	780b      	ldrb	r3, [r1, #0]
 8004d94:	4c2b      	ldr	r4, [pc, #172]	; (8004e44 <USB_DeactivateEndpoint+0x124>)
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	18c3      	adds	r3, r0, r3
 8004d9a:	881e      	ldrh	r6, [r3, #0]
 8004d9c:	0676      	lsls	r6, r6, #25
 8004d9e:	d504      	bpl.n	8004daa <USB_DeactivateEndpoint+0x8a>
 8004da0:	881e      	ldrh	r6, [r3, #0]
 8004da2:	402e      	ands	r6, r5
 8004da4:	4326      	orrs	r6, r4
 8004da6:	b2b6      	uxth	r6, r6
 8004da8:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004daa:	780b      	ldrb	r3, [r1, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	18c3      	adds	r3, r0, r3
 8004db0:	881e      	ldrh	r6, [r3, #0]
 8004db2:	4035      	ands	r5, r6
 8004db4:	432c      	orrs	r4, r5
 8004db6:	b2a4      	uxth	r4, r4
 8004db8:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dba:	780c      	ldrb	r4, [r1, #0]
 8004dbc:	4d20      	ldr	r5, [pc, #128]	; (8004e40 <USB_DeactivateEndpoint+0x120>)
 8004dbe:	00a4      	lsls	r4, r4, #2
 8004dc0:	1904      	adds	r4, r0, r4
 8004dc2:	8823      	ldrh	r3, [r4, #0]
 8004dc4:	402b      	ands	r3, r5
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dcc:	780b      	ldrb	r3, [r1, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	18c0      	adds	r0, r0, r3
 8004dd2:	8803      	ldrh	r3, [r0, #0]
 8004dd4:	401f      	ands	r7, r3
 8004dd6:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004ddc:	2000      	movs	r0, #0
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de0:	881c      	ldrh	r4, [r3, #0]
 8004de2:	4234      	tst	r4, r6
 8004de4:	d005      	beq.n	8004df2 <USB_DeactivateEndpoint+0xd2>
 8004de6:	881e      	ldrh	r6, [r3, #0]
 8004de8:	4c17      	ldr	r4, [pc, #92]	; (8004e48 <USB_DeactivateEndpoint+0x128>)
 8004dea:	402e      	ands	r6, r5
 8004dec:	4326      	orrs	r6, r4
 8004dee:	b2b6      	uxth	r6, r6
 8004df0:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df2:	780b      	ldrb	r3, [r1, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	18c3      	adds	r3, r0, r3
 8004df8:	881e      	ldrh	r6, [r3, #0]
 8004dfa:	0674      	lsls	r4, r6, #25
 8004dfc:	d504      	bpl.n	8004e08 <USB_DeactivateEndpoint+0xe8>
 8004dfe:	881e      	ldrh	r6, [r3, #0]
 8004e00:	4c0c      	ldr	r4, [pc, #48]	; (8004e34 <USB_DeactivateEndpoint+0x114>)
 8004e02:	402e      	ands	r6, r5
 8004e04:	4326      	orrs	r6, r4
 8004e06:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e08:	780b      	ldrb	r3, [r1, #0]
 8004e0a:	4c0f      	ldr	r4, [pc, #60]	; (8004e48 <USB_DeactivateEndpoint+0x128>)
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	18c3      	adds	r3, r0, r3
 8004e10:	881e      	ldrh	r6, [r3, #0]
 8004e12:	4035      	ands	r5, r6
 8004e14:	432c      	orrs	r4, r5
 8004e16:	b2a4      	uxth	r4, r4
 8004e18:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1a:	780b      	ldrb	r3, [r1, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18c3      	adds	r3, r0, r3
 8004e20:	881c      	ldrh	r4, [r3, #0]
 8004e22:	4027      	ands	r7, r4
 8004e24:	4317      	orrs	r7, r2
 8004e26:	b2bf      	uxth	r7, r7
 8004e28:	801f      	strh	r7, [r3, #0]
 8004e2a:	e79e      	b.n	8004d6a <USB_DeactivateEndpoint+0x4a>
 8004e2c:	ffff8080 	.word	0xffff8080
 8004e30:	ffff8f8f 	.word	0xffff8f8f
 8004e34:	000080c0 	.word	0x000080c0
 8004e38:	ffff8fbf 	.word	0xffff8fbf
 8004e3c:	0000c080 	.word	0x0000c080
 8004e40:	ffffbf8f 	.word	0xffffbf8f
 8004e44:	ffff80c0 	.word	0xffff80c0
 8004e48:	ffffc080 	.word	0xffffc080

08004e4c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e4c:	780b      	ldrb	r3, [r1, #0]
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <USB_EPSetStall+0x30>)
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8004e54:	784b      	ldrb	r3, [r1, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e5a:	8803      	ldrh	r3, [r0, #0]
 8004e5c:	4908      	ldr	r1, [pc, #32]	; (8004e80 <USB_EPSetStall+0x34>)
 8004e5e:	4019      	ands	r1, r3
 8004e60:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e62:	404b      	eors	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e6e:	8803      	ldrh	r3, [r0, #0]
 8004e70:	4904      	ldr	r1, [pc, #16]	; (8004e84 <USB_EPSetStall+0x38>)
 8004e72:	4019      	ands	r1, r3
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	e7f3      	b.n	8004e62 <USB_EPSetStall+0x16>
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	ffff8080 	.word	0xffff8080
 8004e80:	ffff8fbf 	.word	0xffff8fbf
 8004e84:	ffffbf8f 	.word	0xffffbf8f

08004e88 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004e88:	7b0b      	ldrb	r3, [r1, #12]
{
 8004e8a:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11c      	bne.n	8004eca <USB_EPClearStall+0x42>
 8004e90:	780b      	ldrb	r3, [r1, #0]
  {
    if (ep->is_in != 0U)
 8004e92:	784a      	ldrb	r2, [r1, #1]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	18c3      	adds	r3, r0, r3
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d018      	beq.n	8004ece <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	0652      	lsls	r2, r2, #25
 8004ea0:	d505      	bpl.n	8004eae <USB_EPClearStall+0x26>
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	4c13      	ldr	r4, [pc, #76]	; (8004ef4 <USB_EPClearStall+0x6c>)
 8004ea6:	4022      	ands	r2, r4
 8004ea8:	4c13      	ldr	r4, [pc, #76]	; (8004ef8 <USB_EPClearStall+0x70>)
 8004eaa:	4322      	orrs	r2, r4
 8004eac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eae:	78cb      	ldrb	r3, [r1, #3]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d00a      	beq.n	8004eca <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eb4:	780b      	ldrb	r3, [r1, #0]
 8004eb6:	4a11      	ldr	r2, [pc, #68]	; (8004efc <USB_EPClearStall+0x74>)
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	18c0      	adds	r0, r0, r3
 8004ebc:	8803      	ldrh	r3, [r0, #0]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec2:	4053      	eors	r3, r2
 8004ec4:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <USB_EPClearStall+0x78>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004eca:	2000      	movs	r0, #0
 8004ecc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	0452      	lsls	r2, r2, #17
 8004ed2:	d505      	bpl.n	8004ee0 <USB_EPClearStall+0x58>
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	4c07      	ldr	r4, [pc, #28]	; (8004ef4 <USB_EPClearStall+0x6c>)
 8004ed8:	4022      	ands	r2, r4
 8004eda:	4c0a      	ldr	r4, [pc, #40]	; (8004f04 <USB_EPClearStall+0x7c>)
 8004edc:	4322      	orrs	r2, r4
 8004ede:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee0:	780b      	ldrb	r3, [r1, #0]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <USB_EPClearStall+0x80>)
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	18c0      	adds	r0, r0, r3
 8004ee8:	8803      	ldrh	r3, [r0, #0]
 8004eea:	401a      	ands	r2, r3
 8004eec:	23c0      	movs	r3, #192	; 0xc0
 8004eee:	019b      	lsls	r3, r3, #6
 8004ef0:	e7e7      	b.n	8004ec2 <USB_EPClearStall+0x3a>
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	ffff8f8f 	.word	0xffff8f8f
 8004ef8:	000080c0 	.word	0x000080c0
 8004efc:	ffff8fbf 	.word	0xffff8fbf
 8004f00:	00008080 	.word	0x00008080
 8004f04:	0000c080 	.word	0x0000c080
 8004f08:	ffffbf8f 	.word	0xffffbf8f

08004f0c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d102      	bne.n	8004f16 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	304c      	adds	r0, #76	; 0x4c
 8004f14:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004f16:	2000      	movs	r0, #0
 8004f18:	4770      	bx	lr

08004f1a <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	3058      	adds	r0, #88	; 0x58
 8004f1e:	8803      	ldrh	r3, [r0, #0]
 8004f20:	0212      	lsls	r2, r2, #8
 8004f22:	4313      	orrs	r3, r2
 8004f24:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004f26:	2000      	movs	r0, #0
 8004f28:	4770      	bx	lr

08004f2a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004f2a:	3006      	adds	r0, #6
 8004f2c:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004f2e:	b280      	uxth	r0, r0
  return tmpreg;
}
 8004f30:	4770      	bx	lr

08004f32 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004f32:	2000      	movs	r0, #0
 8004f34:	4770      	bx	lr

08004f36 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f36:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f38:	2480      	movs	r4, #128	; 0x80
 8004f3a:	00e4      	lsls	r4, r4, #3
 8004f3c:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f3e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f40:	1880      	adds	r0, r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	1a40      	subs	r0, r0, r1
 8004f46:	1844      	adds	r4, r0, r1

  for (i = n; i != 0U; i--)
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d100      	bne.n	8004f4e <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004f4c:	bd30      	pop	{r4, r5, pc}
 8004f4e:	784a      	ldrb	r2, [r1, #1]
 8004f50:	780d      	ldrb	r5, [r1, #0]
 8004f52:	0212      	lsls	r2, r2, #8
 8004f54:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8004f56:	8022      	strh	r2, [r4, #0]
  for (i = n; i != 0U; i--)
 8004f58:	3b01      	subs	r3, #1
    pBuf++;
 8004f5a:	3102      	adds	r1, #2
 8004f5c:	e7f3      	b.n	8004f46 <USB_WritePMA+0x10>
	...

08004f60 <USB_EPStartXfer>:
{
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8004f62:	784c      	ldrb	r4, [r1, #1]
{
 8004f64:	0005      	movs	r5, r0
 8004f66:	000e      	movs	r6, r1
 8004f68:	698a      	ldr	r2, [r1, #24]
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	7b08      	ldrb	r0, [r1, #12]
  if (ep->is_in == 1U)
 8004f6e:	2c01      	cmp	r4, #1
 8004f70:	d158      	bne.n	8005024 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d922      	bls.n	8004fbc <USB_EPStartXfer+0x5c>
      ep->xfer_len -= len;
 8004f76:	1ad2      	subs	r2, r2, r3
 8004f78:	618a      	str	r2, [r1, #24]
 8004f7a:	002f      	movs	r7, r5
 8004f7c:	6971      	ldr	r1, [r6, #20]
 8004f7e:	b29c      	uxth	r4, r3
 8004f80:	3750      	adds	r7, #80	; 0x50
    if (ep->doublebuffer == 0U)
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d11e      	bne.n	8004fc4 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f86:	88f2      	ldrh	r2, [r6, #6]
 8004f88:	0023      	movs	r3, r4
 8004f8a:	0028      	movs	r0, r5
 8004f8c:	f7ff ffd3 	bl	8004f36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f90:	7833      	ldrb	r3, [r6, #0]
 8004f92:	883a      	ldrh	r2, [r7, #0]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	4a5b      	ldr	r2, [pc, #364]	; (8005108 <USB_EPStartXfer+0x1a8>)
 8004f9a:	18eb      	adds	r3, r5, r3
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fa0:	7833      	ldrb	r3, [r6, #0]
 8004fa2:	4a5a      	ldr	r2, [pc, #360]	; (800510c <USB_EPStartXfer+0x1ac>)
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	18ed      	adds	r5, r5, r3
 8004fa8:	882b      	ldrh	r3, [r5, #0]
 8004faa:	401a      	ands	r2, r3
 8004fac:	2330      	movs	r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fae:	4053      	eors	r3, r2
 8004fb0:	4a57      	ldr	r2, [pc, #348]	; (8005110 <USB_EPStartXfer+0x1b0>)
}
 8004fb2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	802b      	strh	r3, [r5, #0]
}
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ep->xfer_len = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	618b      	str	r3, [r1, #24]
 8004fc0:	0013      	movs	r3, r2
 8004fc2:	e7da      	b.n	8004f7a <USB_EPStartXfer+0x1a>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fc4:	7833      	ldrb	r3, [r6, #0]
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	18aa      	adds	r2, r5, r2
 8004fca:	8810      	ldrh	r0, [r2, #0]
 8004fcc:	00da      	lsls	r2, r3, #3
 8004fce:	0643      	lsls	r3, r0, #25
 8004fd0:	d517      	bpl.n	8005002 <USB_EPStartXfer+0xa2>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fd2:	883b      	ldrh	r3, [r7, #0]
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	4a4f      	ldr	r2, [pc, #316]	; (8005114 <USB_EPStartXfer+0x1b4>)
 8004fd8:	195b      	adds	r3, r3, r5
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004fde:	8972      	ldrh	r2, [r6, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fe0:	0023      	movs	r3, r4
 8004fe2:	0028      	movs	r0, r5
 8004fe4:	f7ff ffa7 	bl	8004f36 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004fe8:	7872      	ldrb	r2, [r6, #1]
 8004fea:	7833      	ldrb	r3, [r6, #0]
 8004fec:	2a00      	cmp	r2, #0
 8004fee:	d110      	bne.n	8005012 <USB_EPStartXfer+0xb2>
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	18eb      	adds	r3, r5, r3
 8004ff4:	4948      	ldr	r1, [pc, #288]	; (8005118 <USB_EPStartXfer+0x1b8>)
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	4948      	ldr	r1, [pc, #288]	; (800511c <USB_EPStartXfer+0x1bc>)
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e7ce      	b.n	8004fa0 <USB_EPStartXfer+0x40>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005002:	883b      	ldrh	r3, [r7, #0]
 8005004:	189b      	adds	r3, r3, r2
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <USB_EPStartXfer+0x1a8>)
 8005008:	195b      	adds	r3, r3, r5
 800500a:	189b      	adds	r3, r3, r2
 800500c:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800500e:	8932      	ldrh	r2, [r6, #8]
 8005010:	e7e6      	b.n	8004fe0 <USB_EPStartXfer+0x80>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005012:	2a01      	cmp	r2, #1
 8005014:	d1c4      	bne.n	8004fa0 <USB_EPStartXfer+0x40>
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	18eb      	adds	r3, r5, r3
 800501a:	493f      	ldr	r1, [pc, #252]	; (8005118 <USB_EPStartXfer+0x1b8>)
 800501c:	881a      	ldrh	r2, [r3, #0]
 800501e:	400a      	ands	r2, r1
 8005020:	493f      	ldr	r1, [pc, #252]	; (8005120 <USB_EPStartXfer+0x1c0>)
 8005022:	e7eb      	b.n	8004ffc <USB_EPStartXfer+0x9c>
    if (ep->xfer_len > ep->maxpacket)
 8005024:	429a      	cmp	r2, r3
 8005026:	d915      	bls.n	8005054 <USB_EPStartXfer+0xf4>
      ep->xfer_len -= len;
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	618a      	str	r2, [r1, #24]
 800502c:	7831      	ldrb	r1, [r6, #0]
    if (ep->doublebuffer == 0U)
 800502e:	2800      	cmp	r0, #0
 8005030:	d114      	bne.n	800505c <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005032:	002a      	movs	r2, r5
 8005034:	3250      	adds	r2, #80	; 0x50
 8005036:	8810      	ldrh	r0, [r2, #0]
 8005038:	4a36      	ldr	r2, [pc, #216]	; (8005114 <USB_EPStartXfer+0x1b4>)
 800503a:	00c9      	lsls	r1, r1, #3
 800503c:	18aa      	adds	r2, r5, r2
 800503e:	1812      	adds	r2, r2, r0
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005040:	188a      	adds	r2, r1, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d139      	bne.n	80050ba <USB_EPStartXfer+0x15a>
 8005046:	8813      	ldrh	r3, [r2, #0]
 8005048:	4936      	ldr	r1, [pc, #216]	; (8005124 <USB_EPStartXfer+0x1c4>)
 800504a:	4019      	ands	r1, r3
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <USB_EPStartXfer+0x1c8>)
 800504e:	430b      	orrs	r3, r1
 8005050:	8013      	strh	r3, [r2, #0]
 8005052:	e03a      	b.n	80050ca <USB_EPStartXfer+0x16a>
      ep->xfer_len = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	618b      	str	r3, [r1, #24]
 8005058:	0013      	movs	r3, r2
 800505a:	e7e7      	b.n	800502c <USB_EPStartXfer+0xcc>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800505c:	2c00      	cmp	r4, #0
 800505e:	d117      	bne.n	8005090 <USB_EPStartXfer+0x130>
 8005060:	002a      	movs	r2, r5
 8005062:	3250      	adds	r2, #80	; 0x50
 8005064:	8810      	ldrh	r0, [r2, #0]
 8005066:	4a28      	ldr	r2, [pc, #160]	; (8005108 <USB_EPStartXfer+0x1a8>)
 8005068:	00c9      	lsls	r1, r1, #3
 800506a:	18aa      	adds	r2, r5, r2
 800506c:	1812      	adds	r2, r2, r0
 800506e:	1852      	adds	r2, r2, r1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <USB_EPStartXfer+0x120>
 8005074:	8811      	ldrh	r1, [r2, #0]
 8005076:	482b      	ldr	r0, [pc, #172]	; (8005124 <USB_EPStartXfer+0x1c4>)
 8005078:	4008      	ands	r0, r1
 800507a:	492b      	ldr	r1, [pc, #172]	; (8005128 <USB_EPStartXfer+0x1c8>)
 800507c:	4301      	orrs	r1, r0
 800507e:	e006      	b.n	800508e <USB_EPStartXfer+0x12e>
 8005080:	2b3e      	cmp	r3, #62	; 0x3e
 8005082:	d811      	bhi.n	80050a8 <USB_EPStartXfer+0x148>
 8005084:	2001      	movs	r0, #1
 8005086:	0859      	lsrs	r1, r3, #1
 8005088:	4018      	ands	r0, r3
 800508a:	1809      	adds	r1, r1, r0
 800508c:	0289      	lsls	r1, r1, #10
 800508e:	8011      	strh	r1, [r2, #0]
 8005090:	7871      	ldrb	r1, [r6, #1]
 8005092:	7832      	ldrb	r2, [r6, #0]
 8005094:	2900      	cmp	r1, #0
 8005096:	d12b      	bne.n	80050f0 <USB_EPStartXfer+0x190>
 8005098:	0029      	movs	r1, r5
 800509a:	3150      	adds	r1, #80	; 0x50
 800509c:	8808      	ldrh	r0, [r1, #0]
 800509e:	491d      	ldr	r1, [pc, #116]	; (8005114 <USB_EPStartXfer+0x1b4>)
 80050a0:	00d2      	lsls	r2, r2, #3
 80050a2:	1869      	adds	r1, r5, r1
 80050a4:	1809      	adds	r1, r1, r0
 80050a6:	e7cb      	b.n	8005040 <USB_EPStartXfer+0xe0>
 80050a8:	201f      	movs	r0, #31
 80050aa:	4018      	ands	r0, r3
 80050ac:	4244      	negs	r4, r0
 80050ae:	4160      	adcs	r0, r4
 80050b0:	0959      	lsrs	r1, r3, #5
 80050b2:	1a09      	subs	r1, r1, r0
 80050b4:	0289      	lsls	r1, r1, #10
 80050b6:	481c      	ldr	r0, [pc, #112]	; (8005128 <USB_EPStartXfer+0x1c8>)
 80050b8:	e7e0      	b.n	800507c <USB_EPStartXfer+0x11c>
 80050ba:	2b3e      	cmp	r3, #62	; 0x3e
 80050bc:	d80e      	bhi.n	80050dc <USB_EPStartXfer+0x17c>
 80050be:	2401      	movs	r4, #1
 80050c0:	0859      	lsrs	r1, r3, #1
 80050c2:	401c      	ands	r4, r3
 80050c4:	1909      	adds	r1, r1, r4
 80050c6:	0289      	lsls	r1, r1, #10
 80050c8:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050ca:	7833      	ldrb	r3, [r6, #0]
 80050cc:	4a17      	ldr	r2, [pc, #92]	; (800512c <USB_EPStartXfer+0x1cc>)
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	18ed      	adds	r5, r5, r3
 80050d2:	882b      	ldrh	r3, [r5, #0]
 80050d4:	401a      	ands	r2, r3
 80050d6:	23c0      	movs	r3, #192	; 0xc0
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	e768      	b.n	8004fae <USB_EPStartXfer+0x4e>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050dc:	241f      	movs	r4, #31
 80050de:	401c      	ands	r4, r3
 80050e0:	0959      	lsrs	r1, r3, #5
 80050e2:	4263      	negs	r3, r4
 80050e4:	415c      	adcs	r4, r3
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <USB_EPStartXfer+0x1c8>)
 80050e8:	1b09      	subs	r1, r1, r4
 80050ea:	0289      	lsls	r1, r1, #10
 80050ec:	4319      	orrs	r1, r3
 80050ee:	e7eb      	b.n	80050c8 <USB_EPStartXfer+0x168>
 80050f0:	2901      	cmp	r1, #1
 80050f2:	d1ea      	bne.n	80050ca <USB_EPStartXfer+0x16a>
 80050f4:	0029      	movs	r1, r5
 80050f6:	3150      	adds	r1, #80	; 0x50
 80050f8:	8809      	ldrh	r1, [r1, #0]
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	1852      	adds	r2, r2, r1
 80050fe:	4905      	ldr	r1, [pc, #20]	; (8005114 <USB_EPStartXfer+0x1b4>)
 8005100:	18aa      	adds	r2, r5, r2
 8005102:	1852      	adds	r2, r2, r1
 8005104:	e7a4      	b.n	8005050 <USB_EPStartXfer+0xf0>
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	00000402 	.word	0x00000402
 800510c:	ffff8fbf 	.word	0xffff8fbf
 8005110:	ffff8080 	.word	0xffff8080
 8005114:	00000406 	.word	0x00000406
 8005118:	ffff8f8f 	.word	0xffff8f8f
 800511c:	000080c0 	.word	0x000080c0
 8005120:	0000c080 	.word	0x0000c080
 8005124:	ffff83ff 	.word	0xffff83ff
 8005128:	ffff8000 	.word	0xffff8000
 800512c:	ffffbf8f 	.word	0xffffbf8f

08005130 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005130:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005132:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005134:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005136:	00ed      	lsls	r5, r5, #3
 8005138:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 800513a:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 800513c:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800513e:	1880      	adds	r0, r0, r2
 8005140:	1a47      	subs	r7, r0, r1
 8005142:	197a      	adds	r2, r7, r5
  for (i = n; i != 0U; i--)
 8005144:	2e00      	cmp	r6, #0
 8005146:	d107      	bne.n	8005158 <USB_ReadPMA+0x28>
 8005148:	0064      	lsls	r4, r4, #1
 800514a:	1900      	adds	r0, r0, r4
 800514c:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800514e:	07db      	lsls	r3, r3, #31
 8005150:	d501      	bpl.n	8005156 <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 8005152:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005154:	700b      	strb	r3, [r1, #0]
  }
}
 8005156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8005158:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 800515a:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800515c:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800515e:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005160:	0a12      	lsrs	r2, r2, #8
 8005162:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8005164:	3502      	adds	r5, #2
 8005166:	e7ec      	b.n	8005142 <USB_ReadPMA+0x12>

08005168 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005168:	23af      	movs	r3, #175	; 0xaf
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	58c3      	ldr	r3, [r0, r3]
{
 800516e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005174:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005176:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800517c:	00ad      	lsls	r5, r5, #2
 800517e:	5d60      	ldrb	r0, [r4, r5]
 8005180:	28ff      	cmp	r0, #255	; 0xff
 8005182:	d006      	beq.n	8005192 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005184:	4a04      	ldr	r2, [pc, #16]	; (8005198 <USBD_CDC_EP0_RxReady+0x30>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	5ca2      	ldrb	r2, [r4, r2]
 800518a:	0021      	movs	r1, r4
 800518c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800518e:	23ff      	movs	r3, #255	; 0xff
 8005190:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8005192:	2000      	movs	r0, #0
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	00000201 	.word	0x00000201

0800519c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800519c:	2343      	movs	r3, #67	; 0x43
 800519e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80051a0:	4800      	ldr	r0, [pc, #0]	; (80051a4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80051a2:	4770      	bx	lr
 80051a4:	2000004c 	.word	0x2000004c

080051a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051a8:	2343      	movs	r3, #67	; 0x43
 80051aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80051ac:	4800      	ldr	r0, [pc, #0]	; (80051b0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80051ae:	4770      	bx	lr
 80051b0:	20000090 	.word	0x20000090

080051b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051b4:	2343      	movs	r3, #67	; 0x43
 80051b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80051b8:	4800      	ldr	r0, [pc, #0]	; (80051bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80051ba:	4770      	bx	lr
 80051bc:	200000e0 	.word	0x200000e0

080051c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051c0:	230a      	movs	r3, #10
 80051c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051c4:	4800      	ldr	r0, [pc, #0]	; (80051c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051c6:	4770      	bx	lr
 80051c8:	200000d4 	.word	0x200000d4

080051cc <USBD_CDC_DataOut>:
{
 80051cc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051ce:	26ae      	movs	r6, #174	; 0xae
 80051d0:	00b6      	lsls	r6, r6, #2
{
 80051d2:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051d4:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051d6:	f000 ffb1 	bl	800613c <USBD_LL_GetRxDataSize>
 80051da:	2383      	movs	r3, #131	; 0x83
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 80051e0:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 80051e2:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051e8:	2383      	movs	r3, #131	; 0x83
 80051ea:	2281      	movs	r2, #129	; 0x81
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	18e9      	adds	r1, r5, r3
 80051f0:	33b0      	adds	r3, #176	; 0xb0
 80051f2:	58e3      	ldr	r3, [r4, r3]
 80051f4:	0092      	lsls	r2, r2, #2
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	58a8      	ldr	r0, [r5, r2]
 80051fa:	4798      	blx	r3
    return USBD_OK;
 80051fc:	2000      	movs	r0, #0
}
 80051fe:	bd70      	pop	{r4, r5, r6, pc}

08005200 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005200:	23ae      	movs	r3, #174	; 0xae
{
 8005202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	58c3      	ldr	r3, [r0, r3]
{
 8005208:	0006      	movs	r6, r0
 800520a:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800520c:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 800520e:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8005210:	2b00      	cmp	r3, #0
 8005212:	d017      	beq.n	8005244 <USBD_CDC_DataIn+0x44>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005214:	2514      	movs	r5, #20
 8005216:	434d      	muls	r5, r1
 8005218:	1975      	adds	r5, r6, r5
 800521a:	69e8      	ldr	r0, [r5, #28]
 800521c:	2800      	cmp	r0, #0
 800521e:	d012      	beq.n	8005246 <USBD_CDC_DataIn+0x46>
 8005220:	23b0      	movs	r3, #176	; 0xb0
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	58f3      	ldr	r3, [r6, r3]
 8005226:	014a      	lsls	r2, r1, #5
 8005228:	189b      	adds	r3, r3, r2
 800522a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800522c:	f7fb f80e 	bl	800024c <__aeabi_uidivmod>
 8005230:	1e0c      	subs	r4, r1, #0
 8005232:	d108      	bne.n	8005246 <USBD_CDC_DataIn+0x46>
      pdev->ep_in[epnum].total_length = 0U;
 8005234:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005236:	000b      	movs	r3, r1
 8005238:	000a      	movs	r2, r1
 800523a:	0030      	movs	r0, r6
 800523c:	0039      	movs	r1, r7
 800523e:	f000 ff5d 	bl	80060fc <USBD_LL_Transmit>
    return USBD_OK;
 8005242:	0020      	movs	r0, r4
}
 8005244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005246:	2385      	movs	r3, #133	; 0x85
 8005248:	2000      	movs	r0, #0
 800524a:	9a01      	ldr	r2, [sp, #4]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	50d0      	str	r0, [r2, r3]
 8005250:	e7f8      	b.n	8005244 <USBD_CDC_DataIn+0x44>
	...

08005254 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005254:	23ae      	movs	r3, #174	; 0xae
{
 8005256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 800525c:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 800525e:	466a      	mov	r2, sp
{
 8005260:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 8005262:	1d59      	adds	r1, r3, #5
 8005264:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005266:	2460      	movs	r4, #96	; 0x60
{
 8005268:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 800526a:	1d90      	adds	r0, r2, #6
  uint8_t ifalt = 0U;
 800526c:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 800526e:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005270:	7833      	ldrb	r3, [r6, #0]
 8005272:	401c      	ands	r4, r3
 8005274:	d029      	beq.n	80052ca <USBD_CDC_Setup+0x76>
 8005276:	2c20      	cmp	r4, #32
 8005278:	d142      	bne.n	8005300 <USBD_CDC_Setup+0xac>
      if (req->wLength)
 800527a:	88f4      	ldrh	r4, [r6, #6]
 800527c:	7870      	ldrb	r0, [r6, #1]
 800527e:	2c00      	cmp	r4, #0
 8005280:	d01b      	beq.n	80052ba <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8005282:	b25b      	sxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	da0c      	bge.n	80052a2 <USBD_CDC_Setup+0x4e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005288:	23af      	movs	r3, #175	; 0xaf
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	58eb      	ldr	r3, [r5, r3]
 800528e:	0022      	movs	r2, r4
 8005290:	0039      	movs	r1, r7
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005296:	0039      	movs	r1, r7
 8005298:	88f2      	ldrh	r2, [r6, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800529a:	0028      	movs	r0, r5
 800529c:	f000 fc9a 	bl	8005bd4 <USBD_CtlSendData>
 80052a0:	e009      	b.n	80052b6 <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052aa:	0022      	movs	r2, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052ac:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052ae:	0039      	movs	r1, r7
 80052b0:	0028      	movs	r0, r5
 80052b2:	f000 fca5 	bl	8005c00 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80052b6:	2000      	movs	r0, #0
}
 80052b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052ba:	23af      	movs	r3, #175	; 0xaf
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	58eb      	ldr	r3, [r5, r3]
 80052c0:	0022      	movs	r2, r4
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	0031      	movs	r1, r6
 80052c6:	4798      	blx	r3
 80052c8:	e7f5      	b.n	80052b6 <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 80052ca:	7877      	ldrb	r7, [r6, #1]
 80052cc:	2f0a      	cmp	r7, #10
 80052ce:	d00b      	beq.n	80052e8 <USBD_CDC_Setup+0x94>
 80052d0:	2f0b      	cmp	r7, #11
 80052d2:	d010      	beq.n	80052f6 <USBD_CDC_Setup+0xa2>
 80052d4:	2f00      	cmp	r7, #0
 80052d6:	d113      	bne.n	8005300 <USBD_CDC_Setup+0xac>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d8:	23a7      	movs	r3, #167	; 0xa7
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	5ceb      	ldrb	r3, [r5, r3]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d10e      	bne.n	8005300 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80052e2:	2202      	movs	r2, #2
 80052e4:	0001      	movs	r1, r0
 80052e6:	e7d8      	b.n	800529a <USBD_CDC_Setup+0x46>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e8:	23a7      	movs	r3, #167	; 0xa7
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	5ceb      	ldrb	r3, [r5, r3]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d106      	bne.n	8005300 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80052f2:	2201      	movs	r2, #1
 80052f4:	e7d1      	b.n	800529a <USBD_CDC_Setup+0x46>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052f6:	23a7      	movs	r3, #167	; 0xa7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	5ceb      	ldrb	r3, [r5, r3]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d0da      	beq.n	80052b6 <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 8005300:	0028      	movs	r0, r5
 8005302:	0031      	movs	r1, r6
 8005304:	f000 fc3f 	bl	8005b86 <USBD_CtlError>
          ret = USBD_FAIL;
 8005308:	2002      	movs	r0, #2
          break;
 800530a:	e7d5      	b.n	80052b8 <USBD_CDC_Setup+0x64>
 800530c:	00000201 	.word	0x00000201

08005310 <USBD_CDC_DeInit>:
{
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005314:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005316:	2181      	movs	r1, #129	; 0x81
 8005318:	f000 fe9e 	bl	8006058 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800531c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800531e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005320:	0020      	movs	r0, r4
 8005322:	f000 fe99 	bl	8006058 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005326:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8005328:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800532a:	33fc      	adds	r3, #252	; 0xfc
 800532c:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800532e:	2182      	movs	r1, #130	; 0x82
 8005330:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8005332:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005334:	f000 fe90 	bl	8006058 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005338:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800533a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800533c:	42ab      	cmp	r3, r5
 800533e:	d008      	beq.n	8005352 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005340:	23af      	movs	r3, #175	; 0xaf
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	58e3      	ldr	r3, [r4, r3]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800534a:	59a0      	ldr	r0, [r4, r6]
 800534c:	f000 ff02 	bl	8006154 <USBD_static_free>
    pdev->pClassData = NULL;
 8005350:	51a5      	str	r5, [r4, r6]
}
 8005352:	2000      	movs	r0, #0
 8005354:	bd70      	pop	{r4, r5, r6, pc}

08005356 <USBD_CDC_Init>:
{
 8005356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005358:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800535a:	7c03      	ldrb	r3, [r0, #16]
{
 800535c:	0004      	movs	r4, r0
 800535e:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005360:	2b00      	cmp	r3, #0
 8005362:	d13b      	bne.n	80053dc <USBD_CDC_Init+0x86>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	2202      	movs	r2, #2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	2181      	movs	r1, #129	; 0x81
 800536c:	f000 fe62 	bl	8006034 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005370:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005372:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005374:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005376:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005378:	0029      	movs	r1, r5
 800537a:	2202      	movs	r2, #2
 800537c:	0020      	movs	r0, r4
 800537e:	f000 fe59 	bl	8006034 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005382:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005384:	2308      	movs	r3, #8
 8005386:	2203      	movs	r2, #3
 8005388:	2182      	movs	r1, #130	; 0x82
 800538a:	0020      	movs	r0, r4
 800538c:	f000 fe52 	bl	8006034 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005390:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005392:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005394:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005396:	0080      	lsls	r0, r0, #2
 8005398:	f000 fed8 	bl	800614c <USBD_static_malloc>
 800539c:	23ae      	movs	r3, #174	; 0xae
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	0005      	movs	r5, r0
 80053a2:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 80053a4:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d017      	beq.n	80053da <USBD_CDC_Init+0x84>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053aa:	3304      	adds	r3, #4
 80053ac:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 80053ae:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4798      	blx	r3
    hcdc->TxState = 0U;
 80053b4:	2385      	movs	r3, #133	; 0x85
 80053b6:	2281      	movs	r2, #129	; 0x81
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 80053bc:	3304      	adds	r3, #4
 80053be:	50ef      	str	r7, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	7c23      	ldrb	r3, [r4, #16]
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	42bb      	cmp	r3, r7
 80053c8:	d111      	bne.n	80053ee <USBD_CDC_Init+0x98>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	58aa      	ldr	r2, [r5, r2]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	0031      	movs	r1, r6
 80053d2:	0020      	movs	r0, r4
 80053d4:	f000 fea2 	bl	800611c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80053d8:	9801      	ldr	r0, [sp, #4]
}
 80053da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053dc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053de:	2340      	movs	r3, #64	; 0x40
 80053e0:	2202      	movs	r2, #2
 80053e2:	2181      	movs	r1, #129	; 0x81
 80053e4:	f000 fe26 	bl	8006034 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053e8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053ea:	2340      	movs	r3, #64	; 0x40
 80053ec:	e7c4      	b.n	8005378 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ee:	2340      	movs	r3, #64	; 0x40
 80053f0:	58aa      	ldr	r2, [r5, r2]
 80053f2:	0031      	movs	r1, r6
 80053f4:	0020      	movs	r0, r4
 80053f6:	f000 fe91 	bl	800611c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80053fa:	0038      	movs	r0, r7
 80053fc:	e7ed      	b.n	80053da <USBD_CDC_Init+0x84>

080053fe <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80053fe:	2302      	movs	r3, #2

  if (fops != NULL)
 8005400:	2900      	cmp	r1, #0
 8005402:	d003      	beq.n	800540c <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8005404:	23af      	movs	r3, #175	; 0xaf
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 800540a:	2300      	movs	r3, #0
  }

  return ret;
}
 800540c:	0018      	movs	r0, r3
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005410:	23ae      	movs	r3, #174	; 0xae
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8005416:	2082      	movs	r0, #130	; 0x82
 8005418:	0080      	lsls	r0, r0, #2
 800541a:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 800541c:	2184      	movs	r1, #132	; 0x84
 800541e:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8005420:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8005422:	505a      	str	r2, [r3, r1]
}
 8005424:	4770      	bx	lr

08005426 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005426:	23ae      	movs	r3, #174	; 0xae
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	58c2      	ldr	r2, [r0, r3]
 800542c:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 800542e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005430:	50d1      	str	r1, [r2, r3]
}
 8005432:	4770      	bx	lr

08005434 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005434:	23ae      	movs	r3, #174	; 0xae
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	58c2      	ldr	r2, [r0, r3]
{
 800543a:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800543c:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800543e:	2a00      	cmp	r2, #0
 8005440:	d012      	beq.n	8005468 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 8005442:	2185      	movs	r1, #133	; 0x85
 8005444:	0089      	lsls	r1, r1, #2
 8005446:	5854      	ldr	r4, [r2, r1]
 8005448:	3b01      	subs	r3, #1
 800544a:	2c00      	cmp	r4, #0
 800544c:	d10c      	bne.n	8005468 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 800544e:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005450:	2384      	movs	r3, #132	; 0x84
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005456:	390c      	subs	r1, #12
 8005458:	5852      	ldr	r2, [r2, r1]
 800545a:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800545c:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800545e:	39ff      	subs	r1, #255	; 0xff
 8005460:	b29b      	uxth	r3, r3
 8005462:	f000 fe4b 	bl	80060fc <USBD_LL_Transmit>
      return USBD_OK;
 8005466:	0023      	movs	r3, r4
  }
}
 8005468:	0018      	movs	r0, r3
 800546a:	bd10      	pop	{r4, pc}

0800546c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800546c:	23ae      	movs	r3, #174	; 0xae
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	58c2      	ldr	r2, [r0, r3]
{
 8005472:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005474:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 8005476:	2a00      	cmp	r2, #0
 8005478:	d008      	beq.n	800548c <USBD_CDC_ReceivePacket+0x20>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800547a:	7c04      	ldrb	r4, [r0, #16]
 800547c:	3bb4      	subs	r3, #180	; 0xb4
 800547e:	58d2      	ldr	r2, [r2, r3]
 8005480:	2c00      	cmp	r4, #0
 8005482:	d105      	bne.n	8005490 <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 8005484:	3b04      	subs	r3, #4
 8005486:	2101      	movs	r1, #1
 8005488:	f000 fe48 	bl	800611c <USBD_LL_PrepareReceive>
  }
}
 800548c:	0020      	movs	r0, r4
 800548e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	2101      	movs	r1, #1
 8005494:	f000 fe42 	bl	800611c <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005498:	2400      	movs	r4, #0
 800549a:	e7f7      	b.n	800548c <USBD_CDC_ReceivePacket+0x20>

0800549c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800549c:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800549e:	2302      	movs	r3, #2
  if (pdev == NULL)
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d013      	beq.n	80054cc <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054a4:	23ad      	movs	r3, #173	; 0xad
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	58c4      	ldr	r4, [r0, r3]
 80054aa:	2c00      	cmp	r4, #0
 80054ac:	d001      	beq.n	80054b2 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 80054ae:	2400      	movs	r4, #0
 80054b0:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054b2:	2900      	cmp	r1, #0
 80054b4:	d002      	beq.n	80054bc <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80054b6:	23ac      	movs	r3, #172	; 0xac
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054bc:	23a7      	movs	r3, #167	; 0xa7
 80054be:	2101      	movs	r1, #1
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80054c4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054c6:	f000 fd65 	bl	8005f94 <USBD_LL_Init>

  return USBD_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	bd10      	pop	{r4, pc}

080054d0 <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054d0:	2302      	movs	r3, #2
  if (pclass != NULL)
 80054d2:	2900      	cmp	r1, #0
 80054d4:	d003      	beq.n	80054de <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 80054d6:	23ad      	movs	r3, #173	; 0xad
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 80054dc:	2300      	movs	r3, #0
  }

  return status;
}
 80054de:	0018      	movs	r0, r3
 80054e0:	4770      	bx	lr

080054e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054e2:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054e4:	f000 fd96 	bl	8006014 <USBD_LL_Start>

  return USBD_OK;
}
 80054e8:	2000      	movs	r0, #0
 80054ea:	bd10      	pop	{r4, pc}

080054ec <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80054ec:	23ad      	movs	r3, #173	; 0xad
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	58c3      	ldr	r3, [r0, r3]
{
 80054f2:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054f8:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80054fa:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4798      	blx	r3
 8005500:	2800      	cmp	r0, #0
 8005502:	d0fa      	beq.n	80054fa <USBD_SetClassConfig+0xe>
 8005504:	e7f8      	b.n	80054f8 <USBD_SetClassConfig+0xc>

08005506 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005506:	23ad      	movs	r3, #173	; 0xad
{
 8005508:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	58c3      	ldr	r3, [r0, r3]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4798      	blx	r3

  return USBD_OK;
}
 8005512:	2000      	movs	r0, #0
 8005514:	bd10      	pop	{r4, pc}
	...

08005518 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005518:	23aa      	movs	r3, #170	; 0xaa
 800551a:	009b      	lsls	r3, r3, #2
{
 800551c:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800551e:	18c5      	adds	r5, r0, r3
{
 8005520:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005522:	0028      	movs	r0, r5
 8005524:	f000 fb1b 	bl	8005b5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005528:	23a5      	movs	r3, #165	; 0xa5
 800552a:	2201      	movs	r2, #1
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <USBD_LL_SetupStage+0x60>)
 8005532:	5ae2      	ldrh	r2, [r4, r3]
 8005534:	3b16      	subs	r3, #22
 8005536:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005538:	3310      	adds	r3, #16
 800553a:	5ce1      	ldrb	r1, [r4, r3]
 800553c:	231f      	movs	r3, #31
 800553e:	400b      	ands	r3, r1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d00f      	beq.n	8005564 <USBD_LL_SetupStage+0x4c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <USBD_LL_SetupStage+0x40>
 8005548:	2b02      	cmp	r3, #2
 800554a:	d010      	beq.n	800556e <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800554c:	237f      	movs	r3, #127	; 0x7f
 800554e:	0020      	movs	r0, r4
 8005550:	4399      	bics	r1, r3
 8005552:	f000 fd91 	bl	8006078 <USBD_LL_StallEP>
      break;
 8005556:	e003      	b.n	8005560 <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8005558:	0029      	movs	r1, r5
 800555a:	0020      	movs	r0, r4
 800555c:	f000 f914 	bl	8005788 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005560:	2000      	movs	r0, #0
 8005562:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005564:	0029      	movs	r1, r5
 8005566:	0020      	movs	r0, r4
 8005568:	f000 fa3c 	bl	80059e4 <USBD_StdItfReq>
      break;
 800556c:	e7f8      	b.n	8005560 <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 800556e:	0029      	movs	r1, r5
 8005570:	0020      	movs	r0, r4
 8005572:	f000 fa61 	bl	8005a38 <USBD_StdEPReq>
      break;
 8005576:	e7f3      	b.n	8005560 <USBD_LL_SetupStage+0x48>
 8005578:	000002ae 	.word	0x000002ae

0800557c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	0004      	movs	r4, r0
 8005580:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005582:	2900      	cmp	r1, #0
 8005584:	d130      	bne.n	80055e8 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005586:	23a5      	movs	r3, #165	; 0xa5
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	58c2      	ldr	r2, [r0, r3]
 800558c:	2a03      	cmp	r2, #3
 800558e:	d123      	bne.n	80055d8 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005590:	0002      	movs	r2, r0
 8005592:	3255      	adds	r2, #85	; 0x55
 8005594:	32ff      	adds	r2, #255	; 0xff
 8005596:	68d3      	ldr	r3, [r2, #12]
 8005598:	6910      	ldr	r0, [r2, #16]
 800559a:	4283      	cmp	r3, r0
 800559c:	d90b      	bls.n	80055b6 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 800559e:	1a1b      	subs	r3, r3, r0
 80055a0:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 80055a2:	b282      	uxth	r2, r0
 80055a4:	4298      	cmp	r0, r3
 80055a6:	d900      	bls.n	80055aa <USBD_LL_DataOutStage+0x2e>
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	0029      	movs	r1, r5
 80055ac:	0020      	movs	r0, r4
 80055ae:	f000 fb37 	bl	8005c20 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80055b2:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80055b4:	e016      	b.n	80055e4 <USBD_LL_DataOutStage+0x68>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055b6:	23ad      	movs	r3, #173	; 0xad
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	58e3      	ldr	r3, [r4, r3]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055c2:	22a7      	movs	r2, #167	; 0xa7
 80055c4:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055c6:	5ca2      	ldrb	r2, [r4, r2]
 80055c8:	2a03      	cmp	r2, #3
 80055ca:	d101      	bne.n	80055d0 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80055cc:	0020      	movs	r0, r4
 80055ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80055d0:	0020      	movs	r0, r4
 80055d2:	f000 fb2d 	bl	8005c30 <USBD_CtlSendStatus>
 80055d6:	e7ec      	b.n	80055b2 <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 80055d8:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055da:	2a05      	cmp	r2, #5
 80055dc:	d102      	bne.n	80055e4 <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 80055de:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 80055e0:	f000 fd4a 	bl	8006078 <USBD_LL_StallEP>
}
 80055e4:	0028      	movs	r0, r5
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 80055e8:	23ad      	movs	r3, #173	; 0xad
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80055ee:	2502      	movs	r5, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f6      	beq.n	80055e4 <USBD_LL_DataOutStage+0x68>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055f6:	22a7      	movs	r2, #167	; 0xa7
 80055f8:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80055fa:	5c82      	ldrb	r2, [r0, r2]
 80055fc:	2a03      	cmp	r2, #3
 80055fe:	d1f1      	bne.n	80055e4 <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 8005600:	4798      	blx	r3
 8005602:	e7d6      	b.n	80055b2 <USBD_LL_DataOutStage+0x36>

08005604 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	000d      	movs	r5, r1
 8005608:	0004      	movs	r4, r0
 800560a:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800560c:	2d00      	cmp	r5, #0
 800560e:	d14b      	bne.n	80056a8 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005610:	23a5      	movs	r3, #165	; 0xa5
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	58c3      	ldr	r3, [r0, r3]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d13f      	bne.n	800569a <USBD_LL_DataInStage+0x96>
    {
      if (pep->rem_length > pep->maxpacket)
 800561a:	6a02      	ldr	r2, [r0, #32]
 800561c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800561e:	42b2      	cmp	r2, r6
 8005620:	d912      	bls.n	8005648 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8005622:	1b92      	subs	r2, r2, r6
 8005624:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005626:	b292      	uxth	r2, r2
 8005628:	f000 fae2 	bl	8005bf0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800562c:	002b      	movs	r3, r5
 800562e:	002a      	movs	r2, r5
 8005630:	0029      	movs	r1, r5
 8005632:	0020      	movs	r0, r4
 8005634:	f000 fd72 	bl	800611c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005638:	23a8      	movs	r3, #168	; 0xa8
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	5ce2      	ldrb	r2, [r4, r3]
 800563e:	2000      	movs	r0, #0
 8005640:	2a01      	cmp	r2, #1
 8005642:	d100      	bne.n	8005646 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005644:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005648:	69c7      	ldr	r7, [r0, #28]
 800564a:	0031      	movs	r1, r6
 800564c:	0038      	movs	r0, r7
 800564e:	f7fa fdfd 	bl	800024c <__aeabi_uidivmod>
 8005652:	1e0d      	subs	r5, r1, #0
 8005654:	d10c      	bne.n	8005670 <USBD_LL_DataInStage+0x6c>
 8005656:	42be      	cmp	r6, r7
 8005658:	d80a      	bhi.n	8005670 <USBD_LL_DataInStage+0x6c>
            (pep->total_length < pdev->ep0_data_len))
 800565a:	26a6      	movs	r6, #166	; 0xa6
 800565c:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 800565e:	59a3      	ldr	r3, [r4, r6]
 8005660:	429f      	cmp	r7, r3
 8005662:	d205      	bcs.n	8005670 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005664:	000a      	movs	r2, r1
 8005666:	0020      	movs	r0, r4
 8005668:	f000 fac2 	bl	8005bf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800566c:	51a5      	str	r5, [r4, r6]
 800566e:	e7dd      	b.n	800562c <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005670:	23ad      	movs	r3, #173	; 0xad
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	58e3      	ldr	r3, [r4, r3]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <USBD_LL_DataInStage+0x86>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800567c:	22a7      	movs	r2, #167	; 0xa7
 800567e:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005680:	5ca2      	ldrb	r2, [r4, r2]
 8005682:	2a03      	cmp	r2, #3
 8005684:	d101      	bne.n	800568a <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 8005686:	0020      	movs	r0, r4
 8005688:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	0020      	movs	r0, r4
 800568e:	f000 fcf3 	bl	8006078 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005692:	0020      	movs	r0, r4
 8005694:	f000 fad8 	bl	8005c48 <USBD_CtlReceiveStatus>
 8005698:	e7ce      	b.n	8005638 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800569a:	2204      	movs	r2, #4
 800569c:	4393      	bics	r3, r2
 800569e:	d1cb      	bne.n	8005638 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	f000 fce9 	bl	8006078 <USBD_LL_StallEP>
 80056a6:	e7c7      	b.n	8005638 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80056a8:	23ad      	movs	r3, #173	; 0xad
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80056ae:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0c7      	beq.n	8005646 <USBD_LL_DataInStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056b6:	22a7      	movs	r2, #167	; 0xa7
 80056b8:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80056ba:	5ca2      	ldrb	r2, [r4, r2]
 80056bc:	2a03      	cmp	r2, #3
 80056be:	d1c2      	bne.n	8005646 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 80056c0:	0029      	movs	r1, r5
 80056c2:	0020      	movs	r0, r4
 80056c4:	4798      	blx	r3
  return USBD_OK;
 80056c6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80056c8:	e7bd      	b.n	8005646 <USBD_LL_DataInStage+0x42>

080056ca <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056ca:	2200      	movs	r2, #0
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056d0:	0011      	movs	r1, r2
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	f000 fcae 	bl	8006034 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056d8:	0023      	movs	r3, r4
 80056da:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056dc:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056de:	33fc      	adds	r3, #252	; 0xfc
 80056e0:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056e2:	669e      	str	r6, [r3, #104]	; 0x68

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	0033      	movs	r3, r6
 80056e8:	2200      	movs	r2, #0
 80056ea:	0020      	movs	r0, r4
 80056ec:	f000 fca2 	bl	8006034 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056f0:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 80056f2:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056f4:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056f6:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056f8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056fa:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80056fc:	3b08      	subs	r3, #8
 80056fe:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8005700:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8005702:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005704:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005706:	3314      	adds	r3, #20
 8005708:	58e3      	ldr	r3, [r4, r3]
 800570a:	428b      	cmp	r3, r1
 800570c:	d005      	beq.n	800571a <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800570e:	23ad      	movs	r3, #173	; 0xad
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	58e3      	ldr	r3, [r4, r3]
 8005714:	0020      	movs	r0, r4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4798      	blx	r3
  }

  return USBD_OK;
}
 800571a:	2000      	movs	r0, #0
 800571c:	bd70      	pop	{r4, r5, r6, pc}

0800571e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800571e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005720:	2000      	movs	r0, #0
 8005722:	4770      	bx	lr

08005724 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005724:	23a7      	movs	r3, #167	; 0xa7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	5cc1      	ldrb	r1, [r0, r3]
 800572a:	4a03      	ldr	r2, [pc, #12]	; (8005738 <USBD_LL_Suspend+0x14>)
 800572c:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800572e:	2204      	movs	r2, #4
 8005730:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8005732:	2000      	movs	r0, #0
 8005734:	4770      	bx	lr
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	0000029d 	.word	0x0000029d

0800573c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800573c:	23a7      	movs	r3, #167	; 0xa7
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	5cc2      	ldrb	r2, [r0, r3]
 8005742:	2a04      	cmp	r2, #4
 8005744:	d102      	bne.n	800574c <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005746:	4a02      	ldr	r2, [pc, #8]	; (8005750 <USBD_LL_Resume+0x14>)
 8005748:	5c82      	ldrb	r2, [r0, r2]
 800574a:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 800574c:	2000      	movs	r0, #0
 800574e:	4770      	bx	lr
 8005750:	0000029d 	.word	0x0000029d

08005754 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005754:	23a7      	movs	r3, #167	; 0xa7
{
 8005756:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	5cc3      	ldrb	r3, [r0, r3]
 800575c:	2b03      	cmp	r3, #3
 800575e:	d106      	bne.n	800576e <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8005760:	23ad      	movs	r3, #173	; 0xad
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	58c3      	ldr	r3, [r0, r3]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d000      	beq.n	800576e <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 800576c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800576e:	2000      	movs	r0, #0
 8005770:	bd10      	pop	{r4, pc}

08005772 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005772:	b510      	push	{r4, lr}
 8005774:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	f000 fc7e 	bl	8006078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800577c:	2100      	movs	r1, #0
 800577e:	0020      	movs	r0, r4
 8005780:	f000 fc7a 	bl	8006078 <USBD_LL_StallEP>
}
 8005784:	bd10      	pop	{r4, pc}
	...

08005788 <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005788:	2260      	movs	r2, #96	; 0x60
 800578a:	780b      	ldrb	r3, [r1, #0]
{
 800578c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800578e:	4013      	ands	r3, r2
{
 8005790:	0004      	movs	r4, r0
 8005792:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005794:	2b20      	cmp	r3, #32
 8005796:	d014      	beq.n	80057c2 <USBD_StdDevReq+0x3a>
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d012      	beq.n	80057c2 <USBD_StdDevReq+0x3a>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d000      	beq.n	80057a2 <USBD_StdDevReq+0x1a>
 80057a0:	e090      	b.n	80058c4 <USBD_StdDevReq+0x13c>
      switch (req->bRequest)
 80057a2:	7848      	ldrb	r0, [r1, #1]
 80057a4:	2809      	cmp	r0, #9
 80057a6:	d900      	bls.n	80057aa <USBD_StdDevReq+0x22>
 80057a8:	e08c      	b.n	80058c4 <USBD_StdDevReq+0x13c>
 80057aa:	f7fa fcbf 	bl	800012c <__gnu_thumb1_case_uhi>
 80057ae:	00e9      	.short	0x00e9
 80057b0:	008b0107 	.word	0x008b0107
 80057b4:	008b00ff 	.word	0x008b00ff
 80057b8:	0013007d 	.word	0x0013007d
 80057bc:	00d3008b 	.word	0x00d3008b
 80057c0:	009e      	.short	0x009e
      pdev->pClass->Setup(pdev, req);
 80057c2:	23ad      	movs	r3, #173	; 0xad
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	58e3      	ldr	r3, [r4, r3]
 80057c8:	0029      	movs	r1, r5
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	0020      	movs	r0, r4
 80057ce:	4798      	blx	r3
}
 80057d0:	2000      	movs	r0, #0
 80057d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 80057d4:	466b      	mov	r3, sp
 80057d6:	1d9e      	adds	r6, r3, #6
 80057d8:	2300      	movs	r3, #0
 80057da:	8033      	strh	r3, [r6, #0]
  switch (req->wValue >> 8)
 80057dc:	884b      	ldrh	r3, [r1, #2]
 80057de:	0a18      	lsrs	r0, r3, #8
 80057e0:	3801      	subs	r0, #1
 80057e2:	2806      	cmp	r0, #6
 80057e4:	d86e      	bhi.n	80058c4 <USBD_StdDevReq+0x13c>
 80057e6:	f7fa fc97 	bl	8000118 <__gnu_thumb1_case_uqi>
 80057ea:	2204      	.short	0x2204
 80057ec:	4a6d6d30 	.word	0x4a6d6d30
 80057f0:	54          	.byte	0x54
 80057f1:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057f2:	23ac      	movs	r3, #172	; 0xac
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	58e3      	ldr	r3, [r4, r3]
 80057f8:	7c20      	ldrb	r0, [r4, #16]
 80057fa:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057fc:	0031      	movs	r1, r6
 80057fe:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005800:	8831      	ldrh	r1, [r6, #0]
 8005802:	2900      	cmp	r1, #0
 8005804:	d00c      	beq.n	8005820 <USBD_StdDevReq+0x98>
 8005806:	88ea      	ldrh	r2, [r5, #6]
 8005808:	2a00      	cmp	r2, #0
 800580a:	d009      	beq.n	8005820 <USBD_StdDevReq+0x98>
      len = MIN(len, req->wLength);
 800580c:	1c0b      	adds	r3, r1, #0
 800580e:	4291      	cmp	r1, r2
 8005810:	d900      	bls.n	8005814 <USBD_StdDevReq+0x8c>
 8005812:	1c13      	adds	r3, r2, #0
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005814:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 8005816:	b29a      	uxth	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005818:	0020      	movs	r0, r4
      len = MIN(len, req->wLength);
 800581a:	8033      	strh	r3, [r6, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800581c:	f000 f9da 	bl	8005bd4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005820:	88eb      	ldrh	r3, [r5, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d4      	bne.n	80057d0 <USBD_StdDevReq+0x48>
        USBD_CtlSendStatus(pdev);
 8005826:	0020      	movs	r0, r4
 8005828:	f000 fa02 	bl	8005c30 <USBD_CtlSendStatus>
 800582c:	e7d0      	b.n	80057d0 <USBD_StdDevReq+0x48>
 800582e:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005830:	7c22      	ldrb	r2, [r4, #16]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	58e3      	ldr	r3, [r4, r3]
 8005836:	2a00      	cmp	r2, #0
 8005838:	d105      	bne.n	8005846 <USBD_StdDevReq+0xbe>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800583c:	0030      	movs	r0, r6
 800583e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005840:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005842:	7043      	strb	r3, [r0, #1]
 8005844:	e7dc      	b.n	8005800 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	e7f8      	b.n	800583c <USBD_StdDevReq+0xb4>
      switch ((uint8_t)(req->wValue))
 800584a:	b2d8      	uxtb	r0, r3
 800584c:	2805      	cmp	r0, #5
 800584e:	d839      	bhi.n	80058c4 <USBD_StdDevReq+0x13c>
 8005850:	23ac      	movs	r3, #172	; 0xac
 8005852:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005854:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 8005856:	f7fa fc5f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800585a:	0803      	.short	0x0803
 800585c:	100e0c0a 	.word	0x100e0c0a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02e      	beq.n	80058c4 <USBD_StdDevReq+0x13c>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005866:	7c20      	ldrb	r0, [r4, #16]
 8005868:	e7c8      	b.n	80057fc <USBD_StdDevReq+0x74>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	e7f9      	b.n	8005862 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	e7f7      	b.n	8005862 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	e7f5      	b.n	8005862 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	e7f3      	b.n	8005862 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	e7f1      	b.n	8005862 <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587e:	7c23      	ldrb	r3, [r4, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11f      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005884:	23ad      	movs	r3, #173	; 0xad
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	58e3      	ldr	r3, [r4, r3]
 800588a:	0030      	movs	r0, r6
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	4798      	blx	r3
 8005890:	e7b6      	b.n	8005800 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005892:	7c23      	ldrb	r3, [r4, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d115      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005898:	23ad      	movs	r3, #173	; 0xad
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	58e3      	ldr	r3, [r4, r3]
 800589e:	0030      	movs	r0, r6
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058a4:	2307      	movs	r3, #7
 80058a6:	e7cc      	b.n	8005842 <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058a8:	888b      	ldrh	r3, [r1, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
 80058ae:	88cb      	ldrh	r3, [r1, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
 80058b4:	884e      	ldrh	r6, [r1, #2]
 80058b6:	2e7f      	cmp	r6, #127	; 0x7f
 80058b8:	d804      	bhi.n	80058c4 <USBD_StdDevReq+0x13c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ba:	25a7      	movs	r5, #167	; 0xa7
 80058bc:	00ad      	lsls	r5, r5, #2
 80058be:	5d63      	ldrb	r3, [r4, r5]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d103      	bne.n	80058cc <USBD_StdDevReq+0x144>
        USBD_CtlError(pdev, req);
 80058c4:	0020      	movs	r0, r4
 80058c6:	f7ff ff54 	bl	8005772 <USBD_CtlError.constprop.1>
 80058ca:	e781      	b.n	80057d0 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80058cc:	4b43      	ldr	r3, [pc, #268]	; (80059dc <USBD_StdDevReq+0x254>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ce:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80058d0:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058d2:	0020      	movs	r0, r4
 80058d4:	f000 fc02 	bl	80060dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80058d8:	0020      	movs	r0, r4
 80058da:	f000 f9a9 	bl	8005c30 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058de:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	d100      	bne.n	80058e6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058e4:	2301      	movs	r3, #1
 80058e6:	5563      	strb	r3, [r4, r5]
 80058e8:	e772      	b.n	80057d0 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 80058ea:	7889      	ldrb	r1, [r1, #2]
 80058ec:	4d3c      	ldr	r5, [pc, #240]	; (80059e0 <USBD_StdDevReq+0x258>)
 80058ee:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058f0:	2901      	cmp	r1, #1
 80058f2:	d8e7      	bhi.n	80058c4 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 80058f4:	23a7      	movs	r3, #167	; 0xa7
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	5ce2      	ldrb	r2, [r4, r3]
 80058fa:	2a02      	cmp	r2, #2
 80058fc:	d009      	beq.n	8005912 <USBD_StdDevReq+0x18a>
 80058fe:	2a03      	cmp	r2, #3
 8005900:	d014      	beq.n	800592c <USBD_StdDevReq+0x1a4>
        USBD_CtlError(pdev, req);
 8005902:	0020      	movs	r0, r4
 8005904:	f7ff ff35 	bl	8005772 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005908:	7829      	ldrb	r1, [r5, #0]
 800590a:	0020      	movs	r0, r4
 800590c:	f7ff fdfb 	bl	8005506 <USBD_ClrClassConfig>
 8005910:	e75e      	b.n	80057d0 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8005912:	2900      	cmp	r1, #0
 8005914:	d087      	beq.n	8005826 <USBD_StdDevReq+0x9e>
          pdev->dev_config = cfgidx;
 8005916:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005918:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 800591a:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800591c:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800591e:	0020      	movs	r0, r4
 8005920:	f7ff fde4 	bl	80054ec <USBD_SetClassConfig>
 8005924:	2802      	cmp	r0, #2
 8005926:	d000      	beq.n	800592a <USBD_StdDevReq+0x1a2>
 8005928:	e77d      	b.n	8005826 <USBD_StdDevReq+0x9e>
 800592a:	e7cb      	b.n	80058c4 <USBD_StdDevReq+0x13c>
        if (cfgidx == 0U)
 800592c:	2900      	cmp	r1, #0
 800592e:	d106      	bne.n	800593e <USBD_StdDevReq+0x1b6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005930:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8005932:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005934:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005936:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005938:	f7ff fde5 	bl	8005506 <USBD_ClrClassConfig>
 800593c:	e773      	b.n	8005826 <USBD_StdDevReq+0x9e>
        else if (cfgidx != pdev->dev_config)
 800593e:	6861      	ldr	r1, [r4, #4]
 8005940:	2901      	cmp	r1, #1
 8005942:	d100      	bne.n	8005946 <USBD_StdDevReq+0x1be>
 8005944:	e76f      	b.n	8005826 <USBD_StdDevReq+0x9e>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005946:	b2c9      	uxtb	r1, r1
 8005948:	0020      	movs	r0, r4
 800594a:	f7ff fddc 	bl	8005506 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800594e:	7829      	ldrb	r1, [r5, #0]
 8005950:	6061      	str	r1, [r4, #4]
 8005952:	e7e4      	b.n	800591e <USBD_StdDevReq+0x196>
  if (req->wLength != 1U)
 8005954:	88ca      	ldrh	r2, [r1, #6]
 8005956:	2a01      	cmp	r2, #1
 8005958:	d1b4      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 800595a:	23a7      	movs	r3, #167	; 0xa7
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	5ce3      	ldrb	r3, [r4, r3]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0af      	beq.n	80058c4 <USBD_StdDevReq+0x13c>
 8005964:	2b02      	cmp	r3, #2
 8005966:	d906      	bls.n	8005976 <USBD_StdDevReq+0x1ee>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005968:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 800596a:	2b03      	cmp	r3, #3
 800596c:	d1aa      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800596e:	0020      	movs	r0, r4
 8005970:	f000 f930 	bl	8005bd4 <USBD_CtlSendData>
 8005974:	e72c      	b.n	80057d0 <USBD_StdDevReq+0x48>
        pdev->dev_default_config = 0U;
 8005976:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005978:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 800597a:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800597c:	3108      	adds	r1, #8
 800597e:	e7f6      	b.n	800596e <USBD_StdDevReq+0x1e6>
  switch (pdev->dev_state)
 8005980:	23a7      	movs	r3, #167	; 0xa7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	5ce3      	ldrb	r3, [r4, r3]
 8005986:	3b01      	subs	r3, #1
 8005988:	2b02      	cmp	r3, #2
 800598a:	d89b      	bhi.n	80058c4 <USBD_StdDevReq+0x13c>
      if (req->wLength != 0x2U)
 800598c:	88cb      	ldrh	r3, [r1, #6]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d198      	bne.n	80058c4 <USBD_StdDevReq+0x13c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005992:	3b01      	subs	r3, #1
 8005994:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 8005996:	23a9      	movs	r3, #169	; 0xa9
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	58e3      	ldr	r3, [r4, r3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <USBD_StdDevReq+0x21c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059a0:	2303      	movs	r3, #3
 80059a2:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059a4:	0021      	movs	r1, r4
 80059a6:	2202      	movs	r2, #2
 80059a8:	310c      	adds	r1, #12
 80059aa:	e7e0      	b.n	800596e <USBD_StdDevReq+0x1e6>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059ac:	884b      	ldrh	r3, [r1, #2]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d000      	beq.n	80059b4 <USBD_StdDevReq+0x22c>
 80059b2:	e70d      	b.n	80057d0 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 80059b4:	22a9      	movs	r2, #169	; 0xa9
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	50a3      	str	r3, [r4, r2]
 80059ba:	e734      	b.n	8005826 <USBD_StdDevReq+0x9e>
  switch (pdev->dev_state)
 80059bc:	23a7      	movs	r3, #167	; 0xa7
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	5ce3      	ldrb	r3, [r4, r3]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d900      	bls.n	80059ca <USBD_StdDevReq+0x242>
 80059c8:	e77c      	b.n	80058c4 <USBD_StdDevReq+0x13c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059ca:	884b      	ldrh	r3, [r1, #2]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d000      	beq.n	80059d2 <USBD_StdDevReq+0x24a>
 80059d0:	e6fe      	b.n	80057d0 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 80059d2:	23a9      	movs	r3, #169	; 0xa9
 80059d4:	2200      	movs	r2, #0
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	50e2      	str	r2, [r4, r3]
 80059da:	e724      	b.n	8005826 <USBD_StdDevReq+0x9e>
 80059dc:	0000029e 	.word	0x0000029e
 80059e0:	2000037c 	.word	0x2000037c

080059e4 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e4:	2260      	movs	r2, #96	; 0x60
 80059e6:	780b      	ldrb	r3, [r1, #0]
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ea:	4013      	ands	r3, r2
{
 80059ec:	0004      	movs	r4, r0
 80059ee:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d003      	beq.n	80059fc <USBD_StdItfReq+0x18>
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d001      	beq.n	80059fc <USBD_StdItfReq+0x18>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d119      	bne.n	8005a30 <USBD_StdItfReq+0x4c>
      switch (pdev->dev_state)
 80059fc:	23a7      	movs	r3, #167	; 0xa7
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	5ce3      	ldrb	r3, [r4, r3]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d813      	bhi.n	8005a30 <USBD_StdItfReq+0x4c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a08:	792b      	ldrb	r3, [r5, #4]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d810      	bhi.n	8005a30 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a0e:	23ad      	movs	r3, #173	; 0xad
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	58e3      	ldr	r3, [r4, r3]
 8005a14:	0029      	movs	r1, r5
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	0020      	movs	r0, r4
 8005a1a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a1c:	88eb      	ldrh	r3, [r5, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <USBD_StdItfReq+0x48>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d102      	bne.n	8005a2c <USBD_StdItfReq+0x48>
              USBD_CtlSendStatus(pdev);
 8005a26:	0020      	movs	r0, r4
 8005a28:	f000 f902 	bl	8005c30 <USBD_CtlSendStatus>
}
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005a30:	0020      	movs	r0, r4
 8005a32:	f7ff fe9e 	bl	8005772 <USBD_CtlError.constprop.1>
          break;
 8005a36:	e7f9      	b.n	8005a2c <USBD_StdItfReq+0x48>

08005a38 <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a38:	780a      	ldrb	r2, [r1, #0]
{
 8005a3a:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a3c:	2160      	movs	r1, #96	; 0x60
{
 8005a3e:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a40:	400a      	ands	r2, r1
{
 8005a42:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a44:	2a20      	cmp	r2, #32
 8005a46:	d017      	beq.n	8005a78 <USBD_StdEPReq+0x40>
 8005a48:	2a40      	cmp	r2, #64	; 0x40
 8005a4a:	d015      	beq.n	8005a78 <USBD_StdEPReq+0x40>
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d10f      	bne.n	8005a70 <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 8005a50:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 8005a52:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005a54:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005a56:	2a01      	cmp	r2, #1
 8005a58:	d026      	beq.n	8005aa8 <USBD_StdEPReq+0x70>
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d03e      	beq.n	8005adc <USBD_StdEPReq+0xa4>
 8005a5e:	2a03      	cmp	r2, #3
 8005a60:	d106      	bne.n	8005a70 <USBD_StdEPReq+0x38>
          switch (pdev->dev_state)
 8005a62:	22a7      	movs	r2, #167	; 0xa7
 8005a64:	0092      	lsls	r2, r2, #2
 8005a66:	5ca2      	ldrb	r2, [r4, r2]
 8005a68:	2a02      	cmp	r2, #2
 8005a6a:	d02d      	beq.n	8005ac8 <USBD_StdEPReq+0x90>
 8005a6c:	2a03      	cmp	r2, #3
 8005a6e:	d00c      	beq.n	8005a8a <USBD_StdEPReq+0x52>
              USBD_CtlError(pdev, req);
 8005a70:	0020      	movs	r0, r4
 8005a72:	f7ff fe7e 	bl	8005772 <USBD_CtlError.constprop.1>
              break;
 8005a76:	e006      	b.n	8005a86 <USBD_StdEPReq+0x4e>
      pdev->pClass->Setup(pdev, req);
 8005a78:	22ad      	movs	r2, #173	; 0xad
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	58a2      	ldr	r2, [r4, r2]
 8005a7e:	0019      	movs	r1, r3
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	0020      	movs	r0, r4
 8005a84:	4790      	blx	r2
}
 8005a86:	2000      	movs	r0, #0
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a8a:	885a      	ldrh	r2, [r3, #2]
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	d107      	bne.n	8005aa0 <USBD_StdEPReq+0x68>
                if ((ep_addr != 0x00U) &&
 8005a90:	064a      	lsls	r2, r1, #25
 8005a92:	d005      	beq.n	8005aa0 <USBD_StdEPReq+0x68>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a94:	88db      	ldrh	r3, [r3, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <USBD_StdEPReq+0x68>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	f000 faec 	bl	8006078 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	f000 f8c5 	bl	8005c30 <USBD_CtlSendStatus>
              break;
 8005aa6:	e7ee      	b.n	8005a86 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 8005aa8:	22a7      	movs	r2, #167	; 0xa7
 8005aaa:	0092      	lsls	r2, r2, #2
 8005aac:	5ca2      	ldrb	r2, [r4, r2]
 8005aae:	2a02      	cmp	r2, #2
 8005ab0:	d00a      	beq.n	8005ac8 <USBD_StdEPReq+0x90>
 8005ab2:	2a03      	cmp	r2, #3
 8005ab4:	d1dc      	bne.n	8005a70 <USBD_StdEPReq+0x38>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e4      	bne.n	8005a86 <USBD_StdEPReq+0x4e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005abc:	064b      	lsls	r3, r1, #25
 8005abe:	d0ef      	beq.n	8005aa0 <USBD_StdEPReq+0x68>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ac0:	0020      	movs	r0, r4
 8005ac2:	f000 fae9 	bl	8006098 <USBD_LL_ClearStallEP>
 8005ac6:	e7eb      	b.n	8005aa0 <USBD_StdEPReq+0x68>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ac8:	064b      	lsls	r3, r1, #25
 8005aca:	d0d1      	beq.n	8005a70 <USBD_StdEPReq+0x38>
                USBD_LL_StallEP(pdev, ep_addr);
 8005acc:	0020      	movs	r0, r4
 8005ace:	f000 fad3 	bl	8006078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	0020      	movs	r0, r4
 8005ad6:	f000 facf 	bl	8006078 <USBD_LL_StallEP>
 8005ada:	e7d4      	b.n	8005a86 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 8005adc:	23a7      	movs	r3, #167	; 0xa7
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	5ce3      	ldrb	r3, [r4, r3]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d017      	beq.n	8005b16 <USBD_StdEPReq+0xde>
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d1c2      	bne.n	8005a70 <USBD_StdEPReq+0x38>
 8005aea:	220f      	movs	r2, #15
 8005aec:	2314      	movs	r3, #20
 8005aee:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005af0:	435a      	muls	r2, r3
 8005af2:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8005af4:	0600      	lsls	r0, r0, #24
 8005af6:	d51e      	bpl.n	8005b36 <USBD_StdEPReq+0xfe>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005af8:	6992      	ldr	r2, [r2, #24]
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d0b8      	beq.n	8005a70 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005afe:	257f      	movs	r5, #127	; 0x7f
 8005b00:	400d      	ands	r5, r1
 8005b02:	3501      	adds	r5, #1
 8005b04:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b06:	237f      	movs	r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b08:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b0a:	400b      	ands	r3, r1
 8005b0c:	d11e      	bne.n	8005b4c <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8005b0e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b10:	2202      	movs	r2, #2
 8005b12:	0029      	movs	r1, r5
 8005b14:	e00b      	b.n	8005b2e <USBD_StdEPReq+0xf6>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b16:	064b      	lsls	r3, r1, #25
 8005b18:	d1aa      	bne.n	8005a70 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1a:	0021      	movs	r1, r4
 8005b1c:	3155      	adds	r1, #85	; 0x55
 8005b1e:	31ff      	adds	r1, #255	; 0xff
 8005b20:	0603      	lsls	r3, r0, #24
 8005b22:	d501      	bpl.n	8005b28 <USBD_StdEPReq+0xf0>
 8005b24:	3941      	subs	r1, #65	; 0x41
 8005b26:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8005b28:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b2a:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005b2c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f000 f850 	bl	8005bd4 <USBD_CtlSendData>
              break;
 8005b34:	e7a7      	b.n	8005a86 <USBD_StdEPReq+0x4e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b36:	32fc      	adds	r2, #252	; 0xfc
 8005b38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	d100      	bne.n	8005b40 <USBD_StdEPReq+0x108>
 8005b3e:	e797      	b.n	8005a70 <USBD_StdEPReq+0x38>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b40:	257f      	movs	r5, #127	; 0x7f
 8005b42:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b44:	435d      	muls	r5, r3
 8005b46:	3555      	adds	r5, #85	; 0x55
 8005b48:	35ff      	adds	r5, #255	; 0xff
 8005b4a:	e7dc      	b.n	8005b06 <USBD_StdEPReq+0xce>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f000 fab3 	bl	80060b8 <USBD_LL_IsStallEP>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d001      	beq.n	8005b5a <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e7d9      	b.n	8005b0e <USBD_StdEPReq+0xd6>
                pep->status = 0x0000U;
 8005b5a:	6028      	str	r0, [r5, #0]
 8005b5c:	e7d8      	b.n	8005b10 <USBD_StdEPReq+0xd8>

08005b5e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005b5e:	780b      	ldrb	r3, [r1, #0]
 8005b60:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005b62:	784b      	ldrb	r3, [r1, #1]
 8005b64:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005b66:	78ca      	ldrb	r2, [r1, #3]
 8005b68:	788b      	ldrb	r3, [r1, #2]
 8005b6a:	0212      	lsls	r2, r2, #8
 8005b6c:	189b      	adds	r3, r3, r2
 8005b6e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005b70:	794a      	ldrb	r2, [r1, #5]
 8005b72:	790b      	ldrb	r3, [r1, #4]
 8005b74:	0212      	lsls	r2, r2, #8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005b7a:	79ca      	ldrb	r2, [r1, #7]
 8005b7c:	798b      	ldrb	r3, [r1, #6]
 8005b7e:	0212      	lsls	r2, r2, #8
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	80c3      	strh	r3, [r0, #6]
}
 8005b84:	4770      	bx	lr

08005b86 <USBD_CtlError>:
{
 8005b86:	b510      	push	{r4, lr}
 8005b88:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	f000 fa74 	bl	8006078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b90:	2100      	movs	r1, #0
 8005b92:	0020      	movs	r0, r4
 8005b94:	f000 fa70 	bl	8006078 <USBD_LL_StallEP>
}
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005b9e:	4298      	cmp	r0, r3
 8005ba0:	d101      	bne.n	8005ba6 <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 8005ba2:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005ba4:	002b      	movs	r3, r5
 8005ba6:	5cc4      	ldrb	r4, [r0, r3]
 8005ba8:	1c5d      	adds	r5, r3, #1
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	d1fa      	bne.n	8005ba4 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005bb6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	704b      	strb	r3, [r1, #1]
 8005bbc:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005bbe:	7805      	ldrb	r5, [r0, #0]
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	54cd      	strb	r5, [r1, r3]
 8005bc8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005bca:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005bcc:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	548c      	strb	r4, [r1, r2]
 8005bd2:	e7f4      	b.n	8005bbe <USBD_GetString+0x24>

08005bd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005bd4:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bd6:	22a5      	movs	r2, #165	; 0xa5
{
 8005bd8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bda:	2402      	movs	r4, #2
 8005bdc:	0092      	lsls	r2, r2, #2
 8005bde:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005be0:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005be2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005be4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005be6:	2100      	movs	r1, #0
 8005be8:	f000 fa88 	bl	80060fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005bec:	2000      	movs	r0, #0
 8005bee:	bd10      	pop	{r4, pc}

08005bf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005bf4:	000a      	movs	r2, r1
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	f000 fa80 	bl	80060fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005c00:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c02:	22a5      	movs	r2, #165	; 0xa5
{
 8005c04:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c06:	2403      	movs	r4, #3
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005c0c:	0002      	movs	r2, r0
 8005c0e:	32fc      	adds	r2, #252	; 0xfc
 8005c10:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8005c12:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c14:	000a      	movs	r2, r1
 8005c16:	2100      	movs	r1, #0
 8005c18:	f000 fa80 	bl	800611c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005c20:	b510      	push	{r4, lr}
 8005c22:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c24:	000a      	movs	r2, r1
 8005c26:	2100      	movs	r1, #0
 8005c28:	f000 fa78 	bl	800611c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c30:	23a5      	movs	r3, #165	; 0xa5
 8005c32:	2204      	movs	r2, #4
 8005c34:	009b      	lsls	r3, r3, #2
{
 8005c36:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c38:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	0019      	movs	r1, r3
 8005c40:	f000 fa5c 	bl	80060fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005c44:	2000      	movs	r0, #0
 8005c46:	bd10      	pop	{r4, pc}

08005c48 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c48:	23a5      	movs	r3, #165	; 0xa5
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	009b      	lsls	r3, r3, #2
{
 8005c4e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c50:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c52:	2300      	movs	r3, #0
 8005c54:	001a      	movs	r2, r3
 8005c56:	0019      	movs	r1, r3
 8005c58:	f000 fa60 	bl	800611c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005c60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005c62:	4c11      	ldr	r4, [pc, #68]	; (8005ca8 <MX_USB_DEVICE_Init+0x48>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	4911      	ldr	r1, [pc, #68]	; (8005cac <MX_USB_DEVICE_Init+0x4c>)
 8005c68:	0020      	movs	r0, r4
 8005c6a:	f7ff fc17 	bl	800549c <USBD_Init>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d001      	beq.n	8005c76 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8005c72:	f7fc fdb1 	bl	80027d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005c76:	490e      	ldr	r1, [pc, #56]	; (8005cb0 <MX_USB_DEVICE_Init+0x50>)
 8005c78:	0020      	movs	r0, r4
 8005c7a:	f7ff fc29 	bl	80054d0 <USBD_RegisterClass>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d001      	beq.n	8005c86 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8005c82:	f7fc fda9 	bl	80027d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005c86:	490b      	ldr	r1, [pc, #44]	; (8005cb4 <MX_USB_DEVICE_Init+0x54>)
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f7ff fbb8 	bl	80053fe <USBD_CDC_RegisterInterface>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d001      	beq.n	8005c96 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8005c92:	f7fc fda1 	bl	80027d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005c96:	0020      	movs	r0, r4
 8005c98:	f7ff fc23 	bl	80054e2 <USBD_Start>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d001      	beq.n	8005ca4 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8005ca0:	f7fc fd9a 	bl	80027d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	200008c0 	.word	0x200008c0
 8005cac:	20000134 	.word	0x20000134
 8005cb0:	20000014 	.word	0x20000014
 8005cb4:	20000124 	.word	0x20000124

08005cb8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005cb8:	2000      	movs	r0, #0
 8005cba:	4770      	bx	lr

08005cbc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	4770      	bx	lr

08005cc0 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
	s_RxBuffers.IsCommandDataReceived=1;
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <CDC_Receive_FS+0x34>)
{
 8005cc4:	b510      	push	{r4, lr}
	s_RxBuffers.IsCommandDataReceived=1;
 8005cc6:	721a      	strb	r2, [r3, #8]
	//indicates data were received
//	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len;
	s_RxBuffers.CommandsLens[0]=*Len;
 8005cc8:	22fe      	movs	r2, #254	; 0xfe
 8005cca:	6809      	ldr	r1, [r1, #0]
 8005ccc:	32ff      	adds	r2, #255	; 0xff
 8005cce:	5499      	strb	r1, [r3, r2]
	//only set the length, data was directly saved to buffer
	s_RxBuffers.pos_receive++;
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	3201      	adds	r2, #1
	//move to next position to receive data
	if (s_RxBuffers.pos_receive>=MaxCommandsInBuffer)
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	dc0a      	bgt.n	8005cee <CDC_Receive_FS+0x2e>
		s_RxBuffers.pos_receive=0;
	}

	//prepare to receive the next data
//	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[0]);
 8005cd8:	4c07      	ldr	r4, [pc, #28]	; (8005cf8 <CDC_Receive_FS+0x38>)
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <CDC_Receive_FS+0x3c>)
 8005cdc:	0020      	movs	r0, r4
		s_RxBuffers.pos_receive=0;
 8005cde:	601a      	str	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[0]);
 8005ce0:	f7ff fba1 	bl	8005426 <USBD_CDC_SetRxBuffer>
	//Set the buffer to receive incoming data
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);// Tell that you are ready to receive the next packet, otherwise you wouldn't be able to receive next data
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f7ff fbc1 	bl	800546c <USBD_CDC_ReceivePacket>
//	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8005cea:	2000      	movs	r0, #0
 8005cec:	bd10      	pop	{r4, pc}
		s_RxBuffers.pos_receive=0;
 8005cee:	2200      	movs	r2, #0
 8005cf0:	e7f2      	b.n	8005cd8 <CDC_Receive_FS+0x18>
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20000380 	.word	0x20000380
 8005cf8:	200008c0 	.word	0x200008c0
 8005cfc:	20000389 	.word	0x20000389

08005d00 <CDC_Init_FS>:
{
 8005d00:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d02:	4c08      	ldr	r4, [pc, #32]	; (8005d24 <CDC_Init_FS+0x24>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	4908      	ldr	r1, [pc, #32]	; (8005d28 <CDC_Init_FS+0x28>)
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f7ff fb81 	bl	8005410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[0]);
 8005d0e:	4907      	ldr	r1, [pc, #28]	; (8005d2c <CDC_Init_FS+0x2c>)
 8005d10:	0020      	movs	r0, r4
 8005d12:	f7ff fb88 	bl	8005426 <USBD_CDC_SetRxBuffer>
  s_RxBuffers.pos_process = 0;
 8005d16:	2000      	movs	r0, #0
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <CDC_Init_FS+0x30>)
 8005d1a:	6058      	str	r0, [r3, #4]
  s_RxBuffers.pos_receive = 0;
 8005d1c:	6018      	str	r0, [r3, #0]
  s_RxBuffers.IsCommandDataReceived = 0;
 8005d1e:	7218      	strb	r0, [r3, #8]
}
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	200008c0 	.word	0x200008c0
 8005d28:	20000d78 	.word	0x20000d78
 8005d2c:	20000389 	.word	0x20000389
 8005d30:	20000380 	.word	0x20000380

08005d34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d34:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d36:	21ae      	movs	r1, #174	; 0xae
{
 8005d38:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d3a:	4c08      	ldr	r4, [pc, #32]	; (8005d5c <CDC_Transmit_FS+0x28>)
 8005d3c:	0089      	lsls	r1, r1, #2
{
 8005d3e:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d40:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8005d42:	39a4      	subs	r1, #164	; 0xa4
 8005d44:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 8005d46:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	d106      	bne.n	8005d5a <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	0020      	movs	r0, r4
 8005d50:	f7ff fb5e 	bl	8005410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d54:	0020      	movs	r0, r4
 8005d56:	f7ff fb6d 	bl	8005434 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8005d5a:	bd10      	pop	{r4, pc}
 8005d5c:	200008c0 	.word	0x200008c0

08005d60 <VCP_retrieveInputData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (s_RxBuffers.IsCommandDataReceived==0)
		return 0; 	//no data received
 8005d62:	2500      	movs	r5, #0
	if (s_RxBuffers.IsCommandDataReceived==0)
 8005d64:	4c0f      	ldr	r4, [pc, #60]	; (8005da4 <VCP_retrieveInputData+0x44>)
{
 8005d66:	0006      	movs	r6, r0
	if (s_RxBuffers.IsCommandDataReceived==0)
 8005d68:	7a23      	ldrb	r3, [r4, #8]
{
 8005d6a:	000f      	movs	r7, r1
	if (s_RxBuffers.IsCommandDataReceived==0)
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	d014      	beq.n	8005d9a <VCP_retrieveInputData+0x3a>

//	int index = s_RxBuffers.pos_process;
//	*Len = s_RxBuffers.CommandsLens[index]; 	//return the length
//	memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
	*Len = s_RxBuffers.CommandsLens[0]; 	//return the length
 8005d70:	23fe      	movs	r3, #254	; 0xfe
 8005d72:	33ff      	adds	r3, #255	; 0xff
 8005d74:	5ce2      	ldrb	r2, [r4, r3]
 8005d76:	600a      	str	r2, [r1, #0]
	memcpy(Buf,s_RxBuffers.UserRxBufferFS[0],*Len);
 8005d78:	490b      	ldr	r1, [pc, #44]	; (8005da8 <VCP_retrieveInputData+0x48>)
 8005d7a:	f000 fa17 	bl	80061ac <memcpy>
	Buf[*Len] = '\0'
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	54f5      	strb	r5, [r6, r3]
;
//testing only. make sure there is ending char in the returned command string
//check if all data were processed.
	s_RxBuffers.pos_process++;
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	3301      	adds	r3, #1
	if (s_RxBuffers.pos_process>=MaxCommandsInBuffer) 	//reach the last buffer, need to rewind to 0
 8005d86:	42ab      	cmp	r3, r5
 8005d88:	dc09      	bgt.n	8005d9e <VCP_retrieveInputData+0x3e>
	s_RxBuffers.pos_process++;
 8005d8a:	6063      	str	r3, [r4, #4]
	{
		s_RxBuffers.pos_process=0;
	}
	if (s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0;
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	6822      	ldr	r2, [r4, #0]
	//check if all data were processed
	return 1;
 8005d90:	2501      	movs	r5, #1
	if (s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0;
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <VCP_retrieveInputData+0x3a>
 8005d96:	2300      	movs	r3, #0
 8005d98:	7223      	strb	r3, [r4, #8]
}
 8005d9a:	0028      	movs	r0, r5
 8005d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		s_RxBuffers.pos_process=0;
 8005d9e:	6065      	str	r5, [r4, #4]
 8005da0:	e7f4      	b.n	8005d8c <VCP_retrieveInputData+0x2c>
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	20000380 	.word	0x20000380
 8005da8:	20000389 	.word	0x20000389

08005dac <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005dac:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005dae:	4801      	ldr	r0, [pc, #4]	; (8005db4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005db0:	800b      	strh	r3, [r1, #0]
}
 8005db2:	4770      	bx	lr
 8005db4:	20000150 	.word	0x20000150

08005db8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005db8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005dba:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005dbc:	800b      	strh	r3, [r1, #0]
}
 8005dbe:	4770      	bx	lr
 8005dc0:	20000164 	.word	0x20000164

08005dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005dc4:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	1c8b      	adds	r3, r1, #2
 8005dd0:	18d2      	adds	r2, r2, r3
    if (((value >> 28)) < 0xA)
 8005dd2:	0f04      	lsrs	r4, r0, #28
 8005dd4:	b2e3      	uxtb	r3, r4
 8005dd6:	2c09      	cmp	r4, #9
 8005dd8:	d807      	bhi.n	8005dea <IntToUnicode+0x26>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005dda:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ddc:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8005dde:	704d      	strb	r5, [r1, #1]
 8005de0:	3102      	adds	r1, #2
    value = value << 4;
 8005de2:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d1f4      	bne.n	8005dd2 <IntToUnicode+0xe>
  }
}
 8005de8:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005dea:	3337      	adds	r3, #55	; 0x37
 8005dec:	e7f6      	b.n	8005ddc <IntToUnicode+0x18>
	...

08005df0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005df0:	231a      	movs	r3, #26
{
 8005df2:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005df4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <USBD_FS_SerialStrDescriptor+0x34>)
 8005df8:	4c0b      	ldr	r4, [pc, #44]	; (8005e28 <USBD_FS_SerialStrDescriptor+0x38>)
 8005dfa:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d00b      	beq.n	8005e1e <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e08:	1ca1      	adds	r1, r4, #2
 8005e0a:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e0c:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e0e:	f7ff ffd9 	bl	8005dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e12:	0021      	movs	r1, r4
 8005e14:	2204      	movs	r2, #4
 8005e16:	3112      	adds	r1, #18
 8005e18:	0028      	movs	r0, r5
 8005e1a:	f7ff ffd3 	bl	8005dc4 <IntToUnicode>
}
 8005e1e:	0020      	movs	r0, r4
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	1ffff7ac 	.word	0x1ffff7ac
 8005e28:	20000168 	.word	0x20000168
 8005e2c:	1ffff7b4 	.word	0x1ffff7b4
 8005e30:	1ffff7b0 	.word	0x1ffff7b0

08005e34 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005e34:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e36:	4c04      	ldr	r4, [pc, #16]	; (8005e48 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005e38:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e3a:	4804      	ldr	r0, [pc, #16]	; (8005e4c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005e3c:	0021      	movs	r1, r4
 8005e3e:	f7ff feac 	bl	8005b9a <USBD_GetString>
}
 8005e42:	0020      	movs	r0, r4
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	20000f6c 	.word	0x20000f6c
 8005e4c:	08009eec 	.word	0x08009eec

08005e50 <USBD_FS_ProductStrDescriptor>:
{
 8005e50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e52:	4c04      	ldr	r4, [pc, #16]	; (8005e64 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005e54:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e56:	4804      	ldr	r0, [pc, #16]	; (8005e68 <USBD_FS_ProductStrDescriptor+0x18>)
 8005e58:	0021      	movs	r1, r4
 8005e5a:	f7ff fe9e 	bl	8005b9a <USBD_GetString>
}
 8005e5e:	0020      	movs	r0, r4
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	20000f6c 	.word	0x20000f6c
 8005e68:	08009eff 	.word	0x08009eff

08005e6c <USBD_FS_ConfigStrDescriptor>:
{
 8005e6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e6e:	4c04      	ldr	r4, [pc, #16]	; (8005e80 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005e70:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e72:	4804      	ldr	r0, [pc, #16]	; (8005e84 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005e74:	0021      	movs	r1, r4
 8005e76:	f7ff fe90 	bl	8005b9a <USBD_GetString>
}
 8005e7a:	0020      	movs	r0, r4
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000f6c 	.word	0x20000f6c
 8005e84:	08009ed3 	.word	0x08009ed3

08005e88 <USBD_FS_InterfaceStrDescriptor>:
{
 8005e88:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8a:	4c04      	ldr	r4, [pc, #16]	; (8005e9c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005e8c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8e:	4804      	ldr	r0, [pc, #16]	; (8005ea0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005e90:	0021      	movs	r1, r4
 8005e92:	f7ff fe82 	bl	8005b9a <USBD_GetString>
}
 8005e96:	0020      	movs	r0, r4
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	20000f6c 	.word	0x20000f6c
 8005ea0:	08009ede 	.word	0x08009ede

08005ea4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005ea4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_PCD_MspInit+0x30>)
 8005ea8:	6802      	ldr	r2, [r0, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d111      	bne.n	8005ed2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005eae:	2080      	movs	r0, #128	; 0x80
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <HAL_PCD_MspInit+0x34>)
 8005eb2:	0400      	lsls	r0, r0, #16
 8005eb4:	69d1      	ldr	r1, [r2, #28]
 8005eb6:	4301      	orrs	r1, r0
 8005eb8:	61d1      	str	r1, [r2, #28]
 8005eba:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005ebc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005ebe:	4003      	ands	r3, r0
 8005ec0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005ec2:	201f      	movs	r0, #31
 8005ec4:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005ec6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005ec8:	f7fc fefa 	bl	8002cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005ecc:	201f      	movs	r0, #31
 8005ece:	f7fc ff21 	bl	8002d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005ed2:	bd07      	pop	{r0, r1, r2, pc}
 8005ed4:	40005c00 	.word	0x40005c00
 8005ed8:	40021000 	.word	0x40021000

08005edc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005edc:	238c      	movs	r3, #140	; 0x8c
{
 8005ede:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	18c1      	adds	r1, r0, r3
 8005ee4:	3340      	adds	r3, #64	; 0x40
 8005ee6:	58c0      	ldr	r0, [r0, r3]
 8005ee8:	f7ff fb16 	bl	8005518 <USBD_LL_SetupStage>
}
 8005eec:	bd10      	pop	{r4, pc}

08005eee <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005eee:	014b      	lsls	r3, r1, #5
 8005ef0:	18c3      	adds	r3, r0, r3
 8005ef2:	33fc      	adds	r3, #252	; 0xfc
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef6:	239c      	movs	r3, #156	; 0x9c
{
 8005ef8:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	58c0      	ldr	r0, [r0, r3]
 8005efe:	f7ff fb3d 	bl	800557c <USBD_LL_DataOutStage>
}
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f04:	014b      	lsls	r3, r1, #5
 8005f06:	18c3      	adds	r3, r0, r3
 8005f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f0a:	239c      	movs	r3, #156	; 0x9c
{
 8005f0c:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	58c0      	ldr	r0, [r0, r3]
 8005f12:	f7ff fb77 	bl	8005604 <USBD_LL_DataInStage>
}
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f18:	239c      	movs	r3, #156	; 0x9c
{
 8005f1a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	58c0      	ldr	r0, [r0, r3]
 8005f20:	f7ff fc18 	bl	8005754 <USBD_LL_SOF>
}
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f26:	6883      	ldr	r3, [r0, #8]
{ 
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d001      	beq.n	8005f34 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8005f30:	f7fc fc52 	bl	80027d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f34:	259c      	movs	r5, #156	; 0x9c
 8005f36:	00ad      	lsls	r5, r5, #2
 8005f38:	2101      	movs	r1, #1
 8005f3a:	5960      	ldr	r0, [r4, r5]
 8005f3c:	f7ff fbef 	bl	800571e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f40:	5960      	ldr	r0, [r4, r5]
 8005f42:	f7ff fbc2 	bl	80056ca <USBD_LL_Reset>
}
 8005f46:	bd70      	pop	{r4, r5, r6, pc}

08005f48 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f48:	239c      	movs	r3, #156	; 0x9c
{
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	58c0      	ldr	r0, [r0, r3]
 8005f52:	f7ff fbe7 	bl	8005724 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f56:	69a3      	ldr	r3, [r4, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	4a02      	ldr	r2, [pc, #8]	; (8005f68 <HAL_PCD_SuspendCallback+0x20>)
 8005f60:	6911      	ldr	r1, [r2, #16]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f66:	bd10      	pop	{r4, pc}
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005f6c:	6983      	ldr	r3, [r0, #24]
{
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d006      	beq.n	8005f84 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f76:	2106      	movs	r1, #6
 8005f78:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <HAL_PCD_ResumeCallback+0x24>)
 8005f7a:	6913      	ldr	r3, [r2, #16]
 8005f7c:	438b      	bics	r3, r1
 8005f7e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005f80:	f7fc f8f0 	bl	8002164 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f84:	239c      	movs	r3, #156	; 0x9c
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	58e0      	ldr	r0, [r4, r3]
 8005f8a:	f7ff fbd7 	bl	800573c <USBD_LL_Resume>
}
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8005f94:	239c      	movs	r3, #156	; 0x9c
{
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 8005f9a:	481c      	ldr	r0, [pc, #112]	; (800600c <USBD_LL_Init+0x78>)
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8005fa0:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8005fa2:	24b0      	movs	r4, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 8005fa4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005faa:	3b06      	subs	r3, #6
 8005fac:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005fae:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005fb0:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8005fb2:	00a4      	lsls	r4, r4, #2
 8005fb4:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005fb6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005fb8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005fba:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005fbc:	f7fd f826 	bl	800300c <HAL_PCD_Init>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d001      	beq.n	8005fc8 <USBD_LL_Init+0x34>
    Error_Handler( );
 8005fc4:	f7fc fc08 	bl	80027d8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	5928      	ldr	r0, [r5, r4]
 8005fcc:	0011      	movs	r1, r2
 8005fce:	2318      	movs	r3, #24
 8005fd0:	f7fd fbdd 	bl	800378e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005fd4:	5928      	ldr	r0, [r5, r4]
 8005fd6:	2358      	movs	r3, #88	; 0x58
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	f7fd fbd7 	bl	800378e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005fe0:	5928      	ldr	r0, [r5, r4]
 8005fe2:	23c0      	movs	r3, #192	; 0xc0
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2181      	movs	r1, #129	; 0x81
 8005fe8:	f7fd fbd1 	bl	800378e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005fec:	2388      	movs	r3, #136	; 0x88
 8005fee:	5928      	ldr	r0, [r5, r4]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	f7fd fbca 	bl	800378e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	5928      	ldr	r0, [r5, r4]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	2200      	movs	r2, #0
 8006002:	2182      	movs	r1, #130	; 0x82
 8006004:	f7fd fbc3 	bl	800378e <HAL_PCDEx_PMAConfig>
}
 8006008:	2000      	movs	r0, #0
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	2000116c 	.word	0x2000116c
 8006010:	40005c00 	.word	0x40005c00

08006014 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8006014:	23b0      	movs	r3, #176	; 0xb0
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	58c0      	ldr	r0, [r0, r3]
{
 800601a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800601c:	f7fd f858 	bl	80030d0 <HAL_PCD_Start>
 8006020:	2302      	movs	r3, #2
 8006022:	2803      	cmp	r0, #3
 8006024:	d801      	bhi.n	800602a <USBD_LL_Start+0x16>
 8006026:	4b02      	ldr	r3, [pc, #8]	; (8006030 <USBD_LL_Start+0x1c>)
 8006028:	5c1b      	ldrb	r3, [r3, r0]
}
 800602a:	0018      	movs	r0, r3
 800602c:	bd10      	pop	{r4, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	08009f15 	.word	0x08009f15

08006034 <USBD_LL_OpenEP>:
{
 8006034:	b510      	push	{r4, lr}
 8006036:	0014      	movs	r4, r2
 8006038:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800603a:	0023      	movs	r3, r4
 800603c:	24b0      	movs	r4, #176	; 0xb0
 800603e:	00a4      	lsls	r4, r4, #2
 8006040:	5900      	ldr	r0, [r0, r4]
 8006042:	f7fd f86a 	bl	800311a <HAL_PCD_EP_Open>
 8006046:	2302      	movs	r3, #2
 8006048:	2803      	cmp	r0, #3
 800604a:	d801      	bhi.n	8006050 <USBD_LL_OpenEP+0x1c>
 800604c:	4b01      	ldr	r3, [pc, #4]	; (8006054 <USBD_LL_OpenEP+0x20>)
 800604e:	5c1b      	ldrb	r3, [r3, r0]
}
 8006050:	0018      	movs	r0, r3
 8006052:	bd10      	pop	{r4, pc}
 8006054:	08009f15 	.word	0x08009f15

08006058 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006058:	23b0      	movs	r3, #176	; 0xb0
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	58c0      	ldr	r0, [r0, r3]
{
 800605e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006060:	f7fd f88b 	bl	800317a <HAL_PCD_EP_Close>
 8006064:	2302      	movs	r3, #2
 8006066:	2803      	cmp	r0, #3
 8006068:	d801      	bhi.n	800606e <USBD_LL_CloseEP+0x16>
 800606a:	4b02      	ldr	r3, [pc, #8]	; (8006074 <USBD_LL_CloseEP+0x1c>)
 800606c:	5c1b      	ldrb	r3, [r3, r0]
}
 800606e:	0018      	movs	r0, r3
 8006070:	bd10      	pop	{r4, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	08009f15 	.word	0x08009f15

08006078 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006078:	23b0      	movs	r3, #176	; 0xb0
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	58c0      	ldr	r0, [r0, r3]
{
 800607e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006080:	f7fd fb24 	bl	80036cc <HAL_PCD_EP_SetStall>
 8006084:	2302      	movs	r3, #2
 8006086:	2803      	cmp	r0, #3
 8006088:	d801      	bhi.n	800608e <USBD_LL_StallEP+0x16>
 800608a:	4b02      	ldr	r3, [pc, #8]	; (8006094 <USBD_LL_StallEP+0x1c>)
 800608c:	5c1b      	ldrb	r3, [r3, r0]
}
 800608e:	0018      	movs	r0, r3
 8006090:	bd10      	pop	{r4, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	08009f15 	.word	0x08009f15

08006098 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006098:	23b0      	movs	r3, #176	; 0xb0
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	58c0      	ldr	r0, [r0, r3]
{
 800609e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80060a0:	f7fd fb49 	bl	8003736 <HAL_PCD_EP_ClrStall>
 80060a4:	2302      	movs	r3, #2
 80060a6:	2803      	cmp	r0, #3
 80060a8:	d801      	bhi.n	80060ae <USBD_LL_ClearStallEP+0x16>
 80060aa:	4b02      	ldr	r3, [pc, #8]	; (80060b4 <USBD_LL_ClearStallEP+0x1c>)
 80060ac:	5c1b      	ldrb	r3, [r3, r0]
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	08009f15 	.word	0x08009f15

080060b8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80060b8:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 80060ba:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	da06      	bge.n	80060d2 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80060c4:	227f      	movs	r2, #127	; 0x7f
 80060c6:	4011      	ands	r1, r2
 80060c8:	0149      	lsls	r1, r1, #5
 80060ca:	185b      	adds	r3, r3, r1
 80060cc:	332a      	adds	r3, #42	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80060ce:	7818      	ldrb	r0, [r3, #0]
}
 80060d0:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80060d2:	0149      	lsls	r1, r1, #5
 80060d4:	185b      	adds	r3, r3, r1
 80060d6:	332b      	adds	r3, #43	; 0x2b
 80060d8:	33ff      	adds	r3, #255	; 0xff
 80060da:	e7f8      	b.n	80060ce <USBD_LL_IsStallEP+0x16>

080060dc <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060dc:	23b0      	movs	r3, #176	; 0xb0
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	58c0      	ldr	r0, [r0, r3]
{
 80060e2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060e4:	f7fd f807 	bl	80030f6 <HAL_PCD_SetAddress>
 80060e8:	2302      	movs	r3, #2
 80060ea:	2803      	cmp	r0, #3
 80060ec:	d801      	bhi.n	80060f2 <USBD_LL_SetUSBAddress+0x16>
 80060ee:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <USBD_LL_SetUSBAddress+0x1c>)
 80060f0:	5c1b      	ldrb	r3, [r3, r0]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	08009f15 	.word	0x08009f15

080060fc <USBD_LL_Transmit>:
{
 80060fc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060fe:	24b0      	movs	r4, #176	; 0xb0
 8006100:	00a4      	lsls	r4, r4, #2
 8006102:	5900      	ldr	r0, [r0, r4]
 8006104:	f7fd f87f 	bl	8003206 <HAL_PCD_EP_Transmit>
 8006108:	2302      	movs	r3, #2
 800610a:	2803      	cmp	r0, #3
 800610c:	d801      	bhi.n	8006112 <USBD_LL_Transmit+0x16>
 800610e:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_LL_Transmit+0x1c>)
 8006110:	5c1b      	ldrb	r3, [r3, r0]
}
 8006112:	0018      	movs	r0, r3
 8006114:	bd10      	pop	{r4, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	08009f15 	.word	0x08009f15

0800611c <USBD_LL_PrepareReceive>:
{
 800611c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800611e:	24b0      	movs	r4, #176	; 0xb0
 8006120:	00a4      	lsls	r4, r4, #2
 8006122:	5900      	ldr	r0, [r0, r4]
 8006124:	f7fd f84d 	bl	80031c2 <HAL_PCD_EP_Receive>
 8006128:	2302      	movs	r3, #2
 800612a:	2803      	cmp	r0, #3
 800612c:	d801      	bhi.n	8006132 <USBD_LL_PrepareReceive+0x16>
 800612e:	4b02      	ldr	r3, [pc, #8]	; (8006138 <USBD_LL_PrepareReceive+0x1c>)
 8006130:	5c1b      	ldrb	r3, [r3, r0]
}
 8006132:	0018      	movs	r0, r3
 8006134:	bd10      	pop	{r4, pc}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	08009f15 	.word	0x08009f15

0800613c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800613c:	23b0      	movs	r3, #176	; 0xb0
{
 800613e:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	58c0      	ldr	r0, [r0, r3]
 8006144:	f7fd f858 	bl	80031f8 <HAL_PCD_EP_GetRxCount>
}
 8006148:	bd10      	pop	{r4, pc}
	...

0800614c <USBD_static_malloc>:
}
 800614c:	4800      	ldr	r0, [pc, #0]	; (8006150 <USBD_static_malloc+0x4>)
 800614e:	4770      	bx	lr
 8006150:	20000580 	.word	0x20000580

08006154 <USBD_static_free>:
}
 8006154:	4770      	bx	lr
	...

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	; (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	20000184 	.word	0x20000184

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2600      	movs	r6, #0
 8006168:	4d0c      	ldr	r5, [pc, #48]	; (800619c <__libc_init_array+0x38>)
 800616a:	4c0d      	ldr	r4, [pc, #52]	; (80061a0 <__libc_init_array+0x3c>)
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	2600      	movs	r6, #0
 8006176:	f003 fded 	bl	8009d54 <_init>
 800617a:	4d0a      	ldr	r5, [pc, #40]	; (80061a4 <__libc_init_array+0x40>)
 800617c:	4c0a      	ldr	r4, [pc, #40]	; (80061a8 <__libc_init_array+0x44>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	00b3      	lsls	r3, r6, #2
 800618a:	58eb      	ldr	r3, [r5, r3]
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	00b3      	lsls	r3, r6, #2
 8006194:	58eb      	ldr	r3, [r5, r3]
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	0800a1d0 	.word	0x0800a1d0
 80061a0:	0800a1d0 	.word	0x0800a1d0
 80061a4:	0800a1d0 	.word	0x0800a1d0
 80061a8:	0800a1d4 	.word	0x0800a1d4

080061ac <memcpy>:
 80061ac:	2300      	movs	r3, #0
 80061ae:	b510      	push	{r4, lr}
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d100      	bne.n	80061b6 <memcpy+0xa>
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	5ccc      	ldrb	r4, [r1, r3]
 80061b8:	54c4      	strb	r4, [r0, r3]
 80061ba:	3301      	adds	r3, #1
 80061bc:	e7f8      	b.n	80061b0 <memcpy+0x4>

080061be <memset>:
 80061be:	0003      	movs	r3, r0
 80061c0:	1812      	adds	r2, r2, r0
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d100      	bne.n	80061c8 <memset+0xa>
 80061c6:	4770      	bx	lr
 80061c8:	7019      	strb	r1, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	e7f9      	b.n	80061c2 <memset+0x4>

080061ce <__cvt>:
 80061ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d0:	b08b      	sub	sp, #44	; 0x2c
 80061d2:	0014      	movs	r4, r2
 80061d4:	1e1d      	subs	r5, r3, #0
 80061d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80061d8:	da53      	bge.n	8006282 <__cvt+0xb4>
 80061da:	2480      	movs	r4, #128	; 0x80
 80061dc:	0624      	lsls	r4, r4, #24
 80061de:	191b      	adds	r3, r3, r4
 80061e0:	001d      	movs	r5, r3
 80061e2:	0014      	movs	r4, r2
 80061e4:	232d      	movs	r3, #45	; 0x2d
 80061e6:	700b      	strb	r3, [r1, #0]
 80061e8:	2320      	movs	r3, #32
 80061ea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80061ec:	2203      	movs	r2, #3
 80061ee:	439e      	bics	r6, r3
 80061f0:	2e46      	cmp	r6, #70	; 0x46
 80061f2:	d007      	beq.n	8006204 <__cvt+0x36>
 80061f4:	0033      	movs	r3, r6
 80061f6:	3b45      	subs	r3, #69	; 0x45
 80061f8:	4259      	negs	r1, r3
 80061fa:	414b      	adcs	r3, r1
 80061fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80061fe:	3a01      	subs	r2, #1
 8006200:	18cb      	adds	r3, r1, r3
 8006202:	9310      	str	r3, [sp, #64]	; 0x40
 8006204:	ab09      	add	r3, sp, #36	; 0x24
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	ab08      	add	r3, sp, #32
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800620e:	9200      	str	r2, [sp, #0]
 8006210:	9302      	str	r3, [sp, #8]
 8006212:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006214:	0022      	movs	r2, r4
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	002b      	movs	r3, r5
 800621a:	f001 fdd3 	bl	8007dc4 <_dtoa_r>
 800621e:	0007      	movs	r7, r0
 8006220:	2e47      	cmp	r6, #71	; 0x47
 8006222:	d102      	bne.n	800622a <__cvt+0x5c>
 8006224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006226:	07db      	lsls	r3, r3, #31
 8006228:	d524      	bpl.n	8006274 <__cvt+0xa6>
 800622a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	9307      	str	r3, [sp, #28]
 8006230:	2e46      	cmp	r6, #70	; 0x46
 8006232:	d114      	bne.n	800625e <__cvt+0x90>
 8006234:	783b      	ldrb	r3, [r7, #0]
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d10c      	bne.n	8006254 <__cvt+0x86>
 800623a:	2200      	movs	r2, #0
 800623c:	2300      	movs	r3, #0
 800623e:	0020      	movs	r0, r4
 8006240:	0029      	movs	r1, r5
 8006242:	f7fa f903 	bl	800044c <__aeabi_dcmpeq>
 8006246:	2800      	cmp	r0, #0
 8006248:	d104      	bne.n	8006254 <__cvt+0x86>
 800624a:	2301      	movs	r3, #1
 800624c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006256:	9a07      	ldr	r2, [sp, #28]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	18d3      	adds	r3, r2, r3
 800625c:	9307      	str	r3, [sp, #28]
 800625e:	2200      	movs	r2, #0
 8006260:	2300      	movs	r3, #0
 8006262:	0020      	movs	r0, r4
 8006264:	0029      	movs	r1, r5
 8006266:	f7fa f8f1 	bl	800044c <__aeabi_dcmpeq>
 800626a:	2230      	movs	r2, #48	; 0x30
 800626c:	2800      	cmp	r0, #0
 800626e:	d00d      	beq.n	800628c <__cvt+0xbe>
 8006270:	9b07      	ldr	r3, [sp, #28]
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	0038      	movs	r0, r7
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800627a:	1bdb      	subs	r3, r3, r7
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	b00b      	add	sp, #44	; 0x2c
 8006280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006282:	2300      	movs	r3, #0
 8006284:	e7af      	b.n	80061e6 <__cvt+0x18>
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	9109      	str	r1, [sp, #36]	; 0x24
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628e:	9907      	ldr	r1, [sp, #28]
 8006290:	428b      	cmp	r3, r1
 8006292:	d3f8      	bcc.n	8006286 <__cvt+0xb8>
 8006294:	e7ee      	b.n	8006274 <__cvt+0xa6>

08006296 <__exponent>:
 8006296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006298:	1c83      	adds	r3, r0, #2
 800629a:	b085      	sub	sp, #20
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	0006      	movs	r6, r0
 80062a0:	000c      	movs	r4, r1
 80062a2:	7002      	strb	r2, [r0, #0]
 80062a4:	232b      	movs	r3, #43	; 0x2b
 80062a6:	2900      	cmp	r1, #0
 80062a8:	da01      	bge.n	80062ae <__exponent+0x18>
 80062aa:	232d      	movs	r3, #45	; 0x2d
 80062ac:	424c      	negs	r4, r1
 80062ae:	7073      	strb	r3, [r6, #1]
 80062b0:	2c09      	cmp	r4, #9
 80062b2:	dd22      	ble.n	80062fa <__exponent+0x64>
 80062b4:	ab02      	add	r3, sp, #8
 80062b6:	1ddd      	adds	r5, r3, #7
 80062b8:	0020      	movs	r0, r4
 80062ba:	210a      	movs	r1, #10
 80062bc:	f7fa f8b0 	bl	8000420 <__aeabi_idivmod>
 80062c0:	1e6f      	subs	r7, r5, #1
 80062c2:	3130      	adds	r1, #48	; 0x30
 80062c4:	7039      	strb	r1, [r7, #0]
 80062c6:	0020      	movs	r0, r4
 80062c8:	210a      	movs	r1, #10
 80062ca:	f7f9 ffc3 	bl	8000254 <__divsi3>
 80062ce:	0004      	movs	r4, r0
 80062d0:	2809      	cmp	r0, #9
 80062d2:	dc0b      	bgt.n	80062ec <__exponent+0x56>
 80062d4:	3d02      	subs	r5, #2
 80062d6:	3430      	adds	r4, #48	; 0x30
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	702c      	strb	r4, [r5, #0]
 80062dc:	aa02      	add	r2, sp, #8
 80062de:	3207      	adds	r2, #7
 80062e0:	0018      	movs	r0, r3
 80062e2:	42aa      	cmp	r2, r5
 80062e4:	d804      	bhi.n	80062f0 <__exponent+0x5a>
 80062e6:	1b80      	subs	r0, r0, r6
 80062e8:	b005      	add	sp, #20
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	003d      	movs	r5, r7
 80062ee:	e7e3      	b.n	80062b8 <__exponent+0x22>
 80062f0:	782a      	ldrb	r2, [r5, #0]
 80062f2:	3501      	adds	r5, #1
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	e7f0      	b.n	80062dc <__exponent+0x46>
 80062fa:	2330      	movs	r3, #48	; 0x30
 80062fc:	18e4      	adds	r4, r4, r3
 80062fe:	70b3      	strb	r3, [r6, #2]
 8006300:	1d30      	adds	r0, r6, #4
 8006302:	70f4      	strb	r4, [r6, #3]
 8006304:	e7ef      	b.n	80062e6 <__exponent+0x50>
	...

08006308 <_printf_float>:
 8006308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630a:	b095      	sub	sp, #84	; 0x54
 800630c:	000c      	movs	r4, r1
 800630e:	920a      	str	r2, [sp, #40]	; 0x28
 8006310:	930b      	str	r3, [sp, #44]	; 0x2c
 8006312:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006314:	9009      	str	r0, [sp, #36]	; 0x24
 8006316:	f002 fe6b 	bl	8008ff0 <_localeconv_r>
 800631a:	6803      	ldr	r3, [r0, #0]
 800631c:	0018      	movs	r0, r3
 800631e:	930c      	str	r3, [sp, #48]	; 0x30
 8006320:	f7f9 fef2 	bl	8000108 <strlen>
 8006324:	2300      	movs	r3, #0
 8006326:	9312      	str	r3, [sp, #72]	; 0x48
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	900e      	str	r0, [sp, #56]	; 0x38
 800632c:	930d      	str	r3, [sp, #52]	; 0x34
 800632e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006330:	7e27      	ldrb	r7, [r4, #24]
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	2207      	movs	r2, #7
 8006336:	05c9      	lsls	r1, r1, #23
 8006338:	d545      	bpl.n	80063c6 <_printf_float+0xbe>
 800633a:	189b      	adds	r3, r3, r2
 800633c:	4393      	bics	r3, r2
 800633e:	001a      	movs	r2, r3
 8006340:	3208      	adds	r2, #8
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	64a2      	str	r2, [r4, #72]	; 0x48
 800634a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800634c:	2201      	movs	r2, #1
 800634e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006350:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006352:	006b      	lsls	r3, r5, #1
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	930f      	str	r3, [sp, #60]	; 0x3c
 8006358:	4252      	negs	r2, r2
 800635a:	4bac      	ldr	r3, [pc, #688]	; (800660c <_printf_float+0x304>)
 800635c:	0030      	movs	r0, r6
 800635e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006360:	f7fb fda0 	bl	8001ea4 <__aeabi_dcmpun>
 8006364:	2800      	cmp	r0, #0
 8006366:	d130      	bne.n	80063ca <_printf_float+0xc2>
 8006368:	2201      	movs	r2, #1
 800636a:	4ba8      	ldr	r3, [pc, #672]	; (800660c <_printf_float+0x304>)
 800636c:	4252      	negs	r2, r2
 800636e:	0030      	movs	r0, r6
 8006370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006372:	f7fa f87b 	bl	800046c <__aeabi_dcmple>
 8006376:	2800      	cmp	r0, #0
 8006378:	d127      	bne.n	80063ca <_printf_float+0xc2>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	0030      	movs	r0, r6
 8006380:	0029      	movs	r1, r5
 8006382:	f7fa f869 	bl	8000458 <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d003      	beq.n	8006392 <_printf_float+0x8a>
 800638a:	0023      	movs	r3, r4
 800638c:	222d      	movs	r2, #45	; 0x2d
 800638e:	3343      	adds	r3, #67	; 0x43
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	4d9f      	ldr	r5, [pc, #636]	; (8006610 <_printf_float+0x308>)
 8006394:	2f47      	cmp	r7, #71	; 0x47
 8006396:	d800      	bhi.n	800639a <_printf_float+0x92>
 8006398:	4d9e      	ldr	r5, [pc, #632]	; (8006614 <_printf_float+0x30c>)
 800639a:	2303      	movs	r3, #3
 800639c:	2600      	movs	r6, #0
 800639e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	3301      	adds	r3, #1
 80063a4:	439a      	bics	r2, r3
 80063a6:	6022      	str	r2, [r4, #0]
 80063a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063aa:	aa13      	add	r2, sp, #76	; 0x4c
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	0021      	movs	r1, r4
 80063b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b4:	f000 f9f4 	bl	80067a0 <_printf_common>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d000      	beq.n	80063be <_printf_float+0xb6>
 80063bc:	e093      	b.n	80064e6 <_printf_float+0x1de>
 80063be:	2001      	movs	r0, #1
 80063c0:	4240      	negs	r0, r0
 80063c2:	b015      	add	sp, #84	; 0x54
 80063c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c6:	3307      	adds	r3, #7
 80063c8:	e7b8      	b.n	800633c <_printf_float+0x34>
 80063ca:	0032      	movs	r2, r6
 80063cc:	002b      	movs	r3, r5
 80063ce:	0030      	movs	r0, r6
 80063d0:	0029      	movs	r1, r5
 80063d2:	f7fb fd67 	bl	8001ea4 <__aeabi_dcmpun>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d004      	beq.n	80063e4 <_printf_float+0xdc>
 80063da:	4d8f      	ldr	r5, [pc, #572]	; (8006618 <_printf_float+0x310>)
 80063dc:	2f47      	cmp	r7, #71	; 0x47
 80063de:	d8dc      	bhi.n	800639a <_printf_float+0x92>
 80063e0:	4d8e      	ldr	r5, [pc, #568]	; (800661c <_printf_float+0x314>)
 80063e2:	e7da      	b.n	800639a <_printf_float+0x92>
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063e8:	6862      	ldr	r2, [r4, #4]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	430b      	orrs	r3, r1
 80063ee:	1c51      	adds	r1, r2, #1
 80063f0:	d143      	bne.n	800647a <_printf_float+0x172>
 80063f2:	3207      	adds	r2, #7
 80063f4:	6062      	str	r2, [r4, #4]
 80063f6:	aa12      	add	r2, sp, #72	; 0x48
 80063f8:	2100      	movs	r1, #0
 80063fa:	9205      	str	r2, [sp, #20]
 80063fc:	aa11      	add	r2, sp, #68	; 0x44
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	2223      	movs	r2, #35	; 0x23
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	9106      	str	r1, [sp, #24]
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	a908      	add	r1, sp, #32
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	1852      	adds	r2, r2, r1
 800640e:	9202      	str	r2, [sp, #8]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	0032      	movs	r2, r6
 8006414:	002b      	movs	r3, r5
 8006416:	9704      	str	r7, [sp, #16]
 8006418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641a:	f7ff fed8 	bl	80061ce <__cvt>
 800641e:	2320      	movs	r3, #32
 8006420:	003a      	movs	r2, r7
 8006422:	0005      	movs	r5, r0
 8006424:	439a      	bics	r2, r3
 8006426:	2a47      	cmp	r2, #71	; 0x47
 8006428:	d107      	bne.n	800643a <_printf_float+0x132>
 800642a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800642c:	1cda      	adds	r2, r3, #3
 800642e:	db02      	blt.n	8006436 <_printf_float+0x12e>
 8006430:	6862      	ldr	r2, [r4, #4]
 8006432:	4293      	cmp	r3, r2
 8006434:	dd45      	ble.n	80064c2 <_printf_float+0x1ba>
 8006436:	3f02      	subs	r7, #2
 8006438:	b2ff      	uxtb	r7, r7
 800643a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800643c:	2f65      	cmp	r7, #101	; 0x65
 800643e:	d825      	bhi.n	800648c <_printf_float+0x184>
 8006440:	0020      	movs	r0, r4
 8006442:	3901      	subs	r1, #1
 8006444:	003a      	movs	r2, r7
 8006446:	3050      	adds	r0, #80	; 0x50
 8006448:	9111      	str	r1, [sp, #68]	; 0x44
 800644a:	f7ff ff24 	bl	8006296 <__exponent>
 800644e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006450:	0006      	movs	r6, r0
 8006452:	1813      	adds	r3, r2, r0
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	2a01      	cmp	r2, #1
 8006458:	dc02      	bgt.n	8006460 <_printf_float+0x158>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d2      	lsls	r2, r2, #31
 800645e:	d501      	bpl.n	8006464 <_printf_float+0x15c>
 8006460:	3301      	adds	r3, #1
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	2323      	movs	r3, #35	; 0x23
 8006466:	aa08      	add	r2, sp, #32
 8006468:	189b      	adds	r3, r3, r2
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d09b      	beq.n	80063a8 <_printf_float+0xa0>
 8006470:	0023      	movs	r3, r4
 8006472:	222d      	movs	r2, #45	; 0x2d
 8006474:	3343      	adds	r3, #67	; 0x43
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e796      	b.n	80063a8 <_printf_float+0xa0>
 800647a:	2f67      	cmp	r7, #103	; 0x67
 800647c:	d100      	bne.n	8006480 <_printf_float+0x178>
 800647e:	e176      	b.n	800676e <_printf_float+0x466>
 8006480:	2f47      	cmp	r7, #71	; 0x47
 8006482:	d1b8      	bne.n	80063f6 <_printf_float+0xee>
 8006484:	2a00      	cmp	r2, #0
 8006486:	d1b6      	bne.n	80063f6 <_printf_float+0xee>
 8006488:	2201      	movs	r2, #1
 800648a:	e7b3      	b.n	80063f4 <_printf_float+0xec>
 800648c:	2f66      	cmp	r7, #102	; 0x66
 800648e:	d119      	bne.n	80064c4 <_printf_float+0x1bc>
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	2900      	cmp	r1, #0
 8006494:	dd0c      	ble.n	80064b0 <_printf_float+0x1a8>
 8006496:	6121      	str	r1, [r4, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <_printf_float+0x19a>
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	07d2      	lsls	r2, r2, #31
 80064a0:	d502      	bpl.n	80064a8 <_printf_float+0x1a0>
 80064a2:	3301      	adds	r3, #1
 80064a4:	185b      	adds	r3, r3, r1
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064aa:	2600      	movs	r6, #0
 80064ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80064ae:	e7d9      	b.n	8006464 <_printf_float+0x15c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <_printf_float+0x1b4>
 80064b4:	2201      	movs	r2, #1
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	4211      	tst	r1, r2
 80064ba:	d000      	beq.n	80064be <_printf_float+0x1b6>
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	6122      	str	r2, [r4, #16]
 80064c0:	e7f2      	b.n	80064a8 <_printf_float+0x1a0>
 80064c2:	2767      	movs	r7, #103	; 0x67
 80064c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064c8:	4293      	cmp	r3, r2
 80064ca:	db05      	blt.n	80064d8 <_printf_float+0x1d0>
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	07d2      	lsls	r2, r2, #31
 80064d2:	d5e9      	bpl.n	80064a8 <_printf_float+0x1a0>
 80064d4:	3301      	adds	r3, #1
 80064d6:	e7e6      	b.n	80064a6 <_printf_float+0x19e>
 80064d8:	2101      	movs	r1, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dc01      	bgt.n	80064e2 <_printf_float+0x1da>
 80064de:	1849      	adds	r1, r1, r1
 80064e0:	1ac9      	subs	r1, r1, r3
 80064e2:	1852      	adds	r2, r2, r1
 80064e4:	e7eb      	b.n	80064be <_printf_float+0x1b6>
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	0553      	lsls	r3, r2, #21
 80064ea:	d408      	bmi.n	80064fe <_printf_float+0x1f6>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	002a      	movs	r2, r5
 80064f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064f6:	47a8      	blx	r5
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d129      	bne.n	8006550 <_printf_float+0x248>
 80064fc:	e75f      	b.n	80063be <_printf_float+0xb6>
 80064fe:	2f65      	cmp	r7, #101	; 0x65
 8006500:	d800      	bhi.n	8006504 <_printf_float+0x1fc>
 8006502:	e0e0      	b.n	80066c6 <_printf_float+0x3be>
 8006504:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006506:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	f7f9 ff9e 	bl	800044c <__aeabi_dcmpeq>
 8006510:	2800      	cmp	r0, #0
 8006512:	d034      	beq.n	800657e <_printf_float+0x276>
 8006514:	2301      	movs	r3, #1
 8006516:	4a42      	ldr	r2, [pc, #264]	; (8006620 <_printf_float+0x318>)
 8006518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800651e:	47a8      	blx	r5
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d100      	bne.n	8006526 <_printf_float+0x21e>
 8006524:	e74b      	b.n	80063be <_printf_float+0xb6>
 8006526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006528:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800652a:	4293      	cmp	r3, r2
 800652c:	db02      	blt.n	8006534 <_printf_float+0x22c>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d50d      	bpl.n	8006550 <_printf_float+0x248>
 8006534:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800653a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800653c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800653e:	47a8      	blx	r5
 8006540:	2500      	movs	r5, #0
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d100      	bne.n	8006548 <_printf_float+0x240>
 8006546:	e73a      	b.n	80063be <_printf_float+0xb6>
 8006548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654a:	3b01      	subs	r3, #1
 800654c:	42ab      	cmp	r3, r5
 800654e:	dc0a      	bgt.n	8006566 <_printf_float+0x25e>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	d500      	bpl.n	8006558 <_printf_float+0x250>
 8006556:	e108      	b.n	800676a <_printf_float+0x462>
 8006558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800655a:	68e0      	ldr	r0, [r4, #12]
 800655c:	4298      	cmp	r0, r3
 800655e:	db00      	blt.n	8006562 <_printf_float+0x25a>
 8006560:	e72f      	b.n	80063c2 <_printf_float+0xba>
 8006562:	0018      	movs	r0, r3
 8006564:	e72d      	b.n	80063c2 <_printf_float+0xba>
 8006566:	0022      	movs	r2, r4
 8006568:	2301      	movs	r3, #1
 800656a:	321a      	adds	r2, #26
 800656c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800656e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006570:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006572:	47b0      	blx	r6
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d100      	bne.n	800657a <_printf_float+0x272>
 8006578:	e721      	b.n	80063be <_printf_float+0xb6>
 800657a:	3501      	adds	r5, #1
 800657c:	e7e4      	b.n	8006548 <_printf_float+0x240>
 800657e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc2d      	bgt.n	80065e0 <_printf_float+0x2d8>
 8006584:	2301      	movs	r3, #1
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <_printf_float+0x318>)
 8006588:	990a      	ldr	r1, [sp, #40]	; 0x28
 800658a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800658c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800658e:	47b0      	blx	r6
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d100      	bne.n	8006596 <_printf_float+0x28e>
 8006594:	e713      	b.n	80063be <_printf_float+0xb6>
 8006596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <_printf_float+0x2a0>
 800659c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <_printf_float+0x2a0>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	07db      	lsls	r3, r3, #31
 80065a6:	d5d3      	bpl.n	8006550 <_printf_float+0x248>
 80065a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065b2:	47b0      	blx	r6
 80065b4:	2600      	movs	r6, #0
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	d100      	bne.n	80065bc <_printf_float+0x2b4>
 80065ba:	e700      	b.n	80063be <_printf_float+0xb6>
 80065bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065be:	425b      	negs	r3, r3
 80065c0:	42b3      	cmp	r3, r6
 80065c2:	dc01      	bgt.n	80065c8 <_printf_float+0x2c0>
 80065c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c6:	e792      	b.n	80064ee <_printf_float+0x1e6>
 80065c8:	0022      	movs	r2, r4
 80065ca:	2301      	movs	r3, #1
 80065cc:	321a      	adds	r2, #26
 80065ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80065d4:	47b8      	blx	r7
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d100      	bne.n	80065dc <_printf_float+0x2d4>
 80065da:	e6f0      	b.n	80063be <_printf_float+0xb6>
 80065dc:	3601      	adds	r6, #1
 80065de:	e7ed      	b.n	80065bc <_printf_float+0x2b4>
 80065e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80065e4:	429f      	cmp	r7, r3
 80065e6:	dd00      	ble.n	80065ea <_printf_float+0x2e2>
 80065e8:	001f      	movs	r7, r3
 80065ea:	2f00      	cmp	r7, #0
 80065ec:	dd08      	ble.n	8006600 <_printf_float+0x2f8>
 80065ee:	003b      	movs	r3, r7
 80065f0:	002a      	movs	r2, r5
 80065f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065f8:	47b0      	blx	r6
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d100      	bne.n	8006600 <_printf_float+0x2f8>
 80065fe:	e6de      	b.n	80063be <_printf_float+0xb6>
 8006600:	2300      	movs	r3, #0
 8006602:	930d      	str	r3, [sp, #52]	; 0x34
 8006604:	43fb      	mvns	r3, r7
 8006606:	17db      	asrs	r3, r3, #31
 8006608:	930f      	str	r3, [sp, #60]	; 0x3c
 800660a:	e018      	b.n	800663e <_printf_float+0x336>
 800660c:	7fefffff 	.word	0x7fefffff
 8006610:	08009f1d 	.word	0x08009f1d
 8006614:	08009f19 	.word	0x08009f19
 8006618:	08009f25 	.word	0x08009f25
 800661c:	08009f21 	.word	0x08009f21
 8006620:	08009f29 	.word	0x08009f29
 8006624:	0022      	movs	r2, r4
 8006626:	2301      	movs	r3, #1
 8006628:	321a      	adds	r2, #26
 800662a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800662c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006630:	47b0      	blx	r6
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d100      	bne.n	8006638 <_printf_float+0x330>
 8006636:	e6c2      	b.n	80063be <_printf_float+0xb6>
 8006638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800663a:	3301      	adds	r3, #1
 800663c:	930d      	str	r3, [sp, #52]	; 0x34
 800663e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006640:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006644:	403b      	ands	r3, r7
 8006646:	1af3      	subs	r3, r6, r3
 8006648:	4293      	cmp	r3, r2
 800664a:	dceb      	bgt.n	8006624 <_printf_float+0x31c>
 800664c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800664e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006650:	19ad      	adds	r5, r5, r6
 8006652:	4293      	cmp	r3, r2
 8006654:	db10      	blt.n	8006678 <_printf_float+0x370>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	07db      	lsls	r3, r3, #31
 800665a:	d40d      	bmi.n	8006678 <_printf_float+0x370>
 800665c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800665e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006660:	1bbe      	subs	r6, r7, r6
 8006662:	1aff      	subs	r7, r7, r3
 8006664:	42b7      	cmp	r7, r6
 8006666:	dd00      	ble.n	800666a <_printf_float+0x362>
 8006668:	0037      	movs	r7, r6
 800666a:	2f00      	cmp	r7, #0
 800666c:	dc0d      	bgt.n	800668a <_printf_float+0x382>
 800666e:	43fe      	mvns	r6, r7
 8006670:	17f3      	asrs	r3, r6, #31
 8006672:	2500      	movs	r5, #0
 8006674:	930c      	str	r3, [sp, #48]	; 0x30
 8006676:	e01c      	b.n	80066b2 <_printf_float+0x3aa>
 8006678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800667a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800667c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800667e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006680:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006682:	47b8      	blx	r7
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d1e9      	bne.n	800665c <_printf_float+0x354>
 8006688:	e699      	b.n	80063be <_printf_float+0xb6>
 800668a:	003b      	movs	r3, r7
 800668c:	002a      	movs	r2, r5
 800668e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006692:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006694:	47a8      	blx	r5
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d1e9      	bne.n	800666e <_printf_float+0x366>
 800669a:	e690      	b.n	80063be <_printf_float+0xb6>
 800669c:	0022      	movs	r2, r4
 800669e:	2301      	movs	r3, #1
 80066a0:	321a      	adds	r2, #26
 80066a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066a8:	47b0      	blx	r6
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d100      	bne.n	80066b0 <_printf_float+0x3a8>
 80066ae:	e686      	b.n	80063be <_printf_float+0xb6>
 80066b0:	3501      	adds	r5, #1
 80066b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	003a      	movs	r2, r7
 80066bc:	400a      	ands	r2, r1
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dceb      	bgt.n	800669c <_printf_float+0x394>
 80066c4:	e744      	b.n	8006550 <_printf_float+0x248>
 80066c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	dc02      	bgt.n	80066d2 <_printf_float+0x3ca>
 80066cc:	2301      	movs	r3, #1
 80066ce:	421a      	tst	r2, r3
 80066d0:	d032      	beq.n	8006738 <_printf_float+0x430>
 80066d2:	2301      	movs	r3, #1
 80066d4:	002a      	movs	r2, r5
 80066d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80066dc:	47b8      	blx	r7
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d100      	bne.n	80066e4 <_printf_float+0x3dc>
 80066e2:	e66c      	b.n	80063be <_printf_float+0xb6>
 80066e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80066ee:	3501      	adds	r5, #1
 80066f0:	47b8      	blx	r7
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	d100      	bne.n	80066f8 <_printf_float+0x3f0>
 80066f6:	e662      	b.n	80063be <_printf_float+0xb6>
 80066f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066fe:	2200      	movs	r2, #0
 8006700:	1e5f      	subs	r7, r3, #1
 8006702:	2300      	movs	r3, #0
 8006704:	f7f9 fea2 	bl	800044c <__aeabi_dcmpeq>
 8006708:	003b      	movs	r3, r7
 800670a:	2800      	cmp	r0, #0
 800670c:	d014      	beq.n	8006738 <_printf_float+0x430>
 800670e:	2500      	movs	r5, #0
 8006710:	e00a      	b.n	8006728 <_printf_float+0x420>
 8006712:	0022      	movs	r2, r4
 8006714:	2301      	movs	r3, #1
 8006716:	321a      	adds	r2, #26
 8006718:	990a      	ldr	r1, [sp, #40]	; 0x28
 800671a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800671c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800671e:	47b8      	blx	r7
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d100      	bne.n	8006726 <_printf_float+0x41e>
 8006724:	e64b      	b.n	80063be <_printf_float+0xb6>
 8006726:	3501      	adds	r5, #1
 8006728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672a:	3b01      	subs	r3, #1
 800672c:	42ab      	cmp	r3, r5
 800672e:	dcf0      	bgt.n	8006712 <_printf_float+0x40a>
 8006730:	0022      	movs	r2, r4
 8006732:	0033      	movs	r3, r6
 8006734:	3250      	adds	r2, #80	; 0x50
 8006736:	e6db      	b.n	80064f0 <_printf_float+0x1e8>
 8006738:	002a      	movs	r2, r5
 800673a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800673c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800673e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006740:	47a8      	blx	r5
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d1f4      	bne.n	8006730 <_printf_float+0x428>
 8006746:	e63a      	b.n	80063be <_printf_float+0xb6>
 8006748:	0022      	movs	r2, r4
 800674a:	2301      	movs	r3, #1
 800674c:	3219      	adds	r2, #25
 800674e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006752:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006754:	47b0      	blx	r6
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d100      	bne.n	800675c <_printf_float+0x454>
 800675a:	e630      	b.n	80063be <_printf_float+0xb6>
 800675c:	3501      	adds	r5, #1
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	42ab      	cmp	r3, r5
 8006766:	dcef      	bgt.n	8006748 <_printf_float+0x440>
 8006768:	e6f6      	b.n	8006558 <_printf_float+0x250>
 800676a:	2500      	movs	r5, #0
 800676c:	e7f7      	b.n	800675e <_printf_float+0x456>
 800676e:	2a00      	cmp	r2, #0
 8006770:	d100      	bne.n	8006774 <_printf_float+0x46c>
 8006772:	e689      	b.n	8006488 <_printf_float+0x180>
 8006774:	2100      	movs	r1, #0
 8006776:	9106      	str	r1, [sp, #24]
 8006778:	a912      	add	r1, sp, #72	; 0x48
 800677a:	9105      	str	r1, [sp, #20]
 800677c:	a911      	add	r1, sp, #68	; 0x44
 800677e:	9103      	str	r1, [sp, #12]
 8006780:	2123      	movs	r1, #35	; 0x23
 8006782:	a808      	add	r0, sp, #32
 8006784:	1809      	adds	r1, r1, r0
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	9200      	str	r2, [sp, #0]
 800678c:	002b      	movs	r3, r5
 800678e:	9704      	str	r7, [sp, #16]
 8006790:	9102      	str	r1, [sp, #8]
 8006792:	0032      	movs	r2, r6
 8006794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006796:	f7ff fd1a 	bl	80061ce <__cvt>
 800679a:	0005      	movs	r5, r0
 800679c:	e645      	b.n	800642a <_printf_float+0x122>
 800679e:	46c0      	nop			; (mov r8, r8)

080067a0 <_printf_common>:
 80067a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a2:	0015      	movs	r5, r2
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	688a      	ldr	r2, [r1, #8]
 80067a8:	690b      	ldr	r3, [r1, #16]
 80067aa:	9000      	str	r0, [sp, #0]
 80067ac:	000c      	movs	r4, r1
 80067ae:	4293      	cmp	r3, r2
 80067b0:	da00      	bge.n	80067b4 <_printf_common+0x14>
 80067b2:	0013      	movs	r3, r2
 80067b4:	0022      	movs	r2, r4
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	3243      	adds	r2, #67	; 0x43
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d001      	beq.n	80067c4 <_printf_common+0x24>
 80067c0:	3301      	adds	r3, #1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	069b      	lsls	r3, r3, #26
 80067c8:	d502      	bpl.n	80067d0 <_printf_common+0x30>
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	3302      	adds	r3, #2
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	2706      	movs	r7, #6
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	401f      	ands	r7, r3
 80067d6:	d027      	beq.n	8006828 <_printf_common+0x88>
 80067d8:	0023      	movs	r3, r4
 80067da:	3343      	adds	r3, #67	; 0x43
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	4193      	sbcs	r3, r2
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	0692      	lsls	r2, r2, #26
 80067e6:	d430      	bmi.n	800684a <_printf_common+0xaa>
 80067e8:	0022      	movs	r2, r4
 80067ea:	9901      	ldr	r1, [sp, #4]
 80067ec:	3243      	adds	r2, #67	; 0x43
 80067ee:	9800      	ldr	r0, [sp, #0]
 80067f0:	9e08      	ldr	r6, [sp, #32]
 80067f2:	47b0      	blx	r6
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d025      	beq.n	8006844 <_printf_common+0xa4>
 80067f8:	2306      	movs	r3, #6
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	682a      	ldr	r2, [r5, #0]
 80067fe:	68e1      	ldr	r1, [r4, #12]
 8006800:	4003      	ands	r3, r0
 8006802:	2500      	movs	r5, #0
 8006804:	2b04      	cmp	r3, #4
 8006806:	d103      	bne.n	8006810 <_printf_common+0x70>
 8006808:	1a8d      	subs	r5, r1, r2
 800680a:	43eb      	mvns	r3, r5
 800680c:	17db      	asrs	r3, r3, #31
 800680e:	401d      	ands	r5, r3
 8006810:	68a3      	ldr	r3, [r4, #8]
 8006812:	6922      	ldr	r2, [r4, #16]
 8006814:	4293      	cmp	r3, r2
 8006816:	dd01      	ble.n	800681c <_printf_common+0x7c>
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	18ed      	adds	r5, r5, r3
 800681c:	2700      	movs	r7, #0
 800681e:	42bd      	cmp	r5, r7
 8006820:	d120      	bne.n	8006864 <_printf_common+0xc4>
 8006822:	2000      	movs	r0, #0
 8006824:	e010      	b.n	8006848 <_printf_common+0xa8>
 8006826:	3701      	adds	r7, #1
 8006828:	68e3      	ldr	r3, [r4, #12]
 800682a:	682a      	ldr	r2, [r5, #0]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	42bb      	cmp	r3, r7
 8006830:	ddd2      	ble.n	80067d8 <_printf_common+0x38>
 8006832:	0022      	movs	r2, r4
 8006834:	2301      	movs	r3, #1
 8006836:	3219      	adds	r2, #25
 8006838:	9901      	ldr	r1, [sp, #4]
 800683a:	9800      	ldr	r0, [sp, #0]
 800683c:	9e08      	ldr	r6, [sp, #32]
 800683e:	47b0      	blx	r6
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d1f0      	bne.n	8006826 <_printf_common+0x86>
 8006844:	2001      	movs	r0, #1
 8006846:	4240      	negs	r0, r0
 8006848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800684a:	2030      	movs	r0, #48	; 0x30
 800684c:	18e1      	adds	r1, r4, r3
 800684e:	3143      	adds	r1, #67	; 0x43
 8006850:	7008      	strb	r0, [r1, #0]
 8006852:	0021      	movs	r1, r4
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	3145      	adds	r1, #69	; 0x45
 8006858:	7809      	ldrb	r1, [r1, #0]
 800685a:	18a2      	adds	r2, r4, r2
 800685c:	3243      	adds	r2, #67	; 0x43
 800685e:	3302      	adds	r3, #2
 8006860:	7011      	strb	r1, [r2, #0]
 8006862:	e7c1      	b.n	80067e8 <_printf_common+0x48>
 8006864:	0022      	movs	r2, r4
 8006866:	2301      	movs	r3, #1
 8006868:	321a      	adds	r2, #26
 800686a:	9901      	ldr	r1, [sp, #4]
 800686c:	9800      	ldr	r0, [sp, #0]
 800686e:	9e08      	ldr	r6, [sp, #32]
 8006870:	47b0      	blx	r6
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d0e6      	beq.n	8006844 <_printf_common+0xa4>
 8006876:	3701      	adds	r7, #1
 8006878:	e7d1      	b.n	800681e <_printf_common+0x7e>
	...

0800687c <_printf_i>:
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	9204      	str	r2, [sp, #16]
 8006882:	000a      	movs	r2, r1
 8006884:	3243      	adds	r2, #67	; 0x43
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	9003      	str	r0, [sp, #12]
 800688a:	9202      	str	r2, [sp, #8]
 800688c:	7e0a      	ldrb	r2, [r1, #24]
 800688e:	000c      	movs	r4, r1
 8006890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006892:	2a6e      	cmp	r2, #110	; 0x6e
 8006894:	d100      	bne.n	8006898 <_printf_i+0x1c>
 8006896:	e086      	b.n	80069a6 <_printf_i+0x12a>
 8006898:	d81f      	bhi.n	80068da <_printf_i+0x5e>
 800689a:	2a63      	cmp	r2, #99	; 0x63
 800689c:	d033      	beq.n	8006906 <_printf_i+0x8a>
 800689e:	d808      	bhi.n	80068b2 <_printf_i+0x36>
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	d100      	bne.n	80068a6 <_printf_i+0x2a>
 80068a4:	e08c      	b.n	80069c0 <_printf_i+0x144>
 80068a6:	2a58      	cmp	r2, #88	; 0x58
 80068a8:	d04d      	beq.n	8006946 <_printf_i+0xca>
 80068aa:	0025      	movs	r5, r4
 80068ac:	3542      	adds	r5, #66	; 0x42
 80068ae:	702a      	strb	r2, [r5, #0]
 80068b0:	e030      	b.n	8006914 <_printf_i+0x98>
 80068b2:	2a64      	cmp	r2, #100	; 0x64
 80068b4:	d001      	beq.n	80068ba <_printf_i+0x3e>
 80068b6:	2a69      	cmp	r2, #105	; 0x69
 80068b8:	d1f7      	bne.n	80068aa <_printf_i+0x2e>
 80068ba:	6819      	ldr	r1, [r3, #0]
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1d0a      	adds	r2, r1, #4
 80068c0:	0628      	lsls	r0, r5, #24
 80068c2:	d529      	bpl.n	8006918 <_printf_i+0x9c>
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	2800      	cmp	r0, #0
 80068ca:	da03      	bge.n	80068d4 <_printf_i+0x58>
 80068cc:	232d      	movs	r3, #45	; 0x2d
 80068ce:	9a02      	ldr	r2, [sp, #8]
 80068d0:	4240      	negs	r0, r0
 80068d2:	7013      	strb	r3, [r2, #0]
 80068d4:	4e6b      	ldr	r6, [pc, #428]	; (8006a84 <_printf_i+0x208>)
 80068d6:	270a      	movs	r7, #10
 80068d8:	e04f      	b.n	800697a <_printf_i+0xfe>
 80068da:	2a73      	cmp	r2, #115	; 0x73
 80068dc:	d074      	beq.n	80069c8 <_printf_i+0x14c>
 80068de:	d808      	bhi.n	80068f2 <_printf_i+0x76>
 80068e0:	2a6f      	cmp	r2, #111	; 0x6f
 80068e2:	d01f      	beq.n	8006924 <_printf_i+0xa8>
 80068e4:	2a70      	cmp	r2, #112	; 0x70
 80068e6:	d1e0      	bne.n	80068aa <_printf_i+0x2e>
 80068e8:	2220      	movs	r2, #32
 80068ea:	6809      	ldr	r1, [r1, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	e003      	b.n	80068fa <_printf_i+0x7e>
 80068f2:	2a75      	cmp	r2, #117	; 0x75
 80068f4:	d016      	beq.n	8006924 <_printf_i+0xa8>
 80068f6:	2a78      	cmp	r2, #120	; 0x78
 80068f8:	d1d7      	bne.n	80068aa <_printf_i+0x2e>
 80068fa:	0022      	movs	r2, r4
 80068fc:	2178      	movs	r1, #120	; 0x78
 80068fe:	3245      	adds	r2, #69	; 0x45
 8006900:	7011      	strb	r1, [r2, #0]
 8006902:	4e61      	ldr	r6, [pc, #388]	; (8006a88 <_printf_i+0x20c>)
 8006904:	e022      	b.n	800694c <_printf_i+0xd0>
 8006906:	0025      	movs	r5, r4
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	3542      	adds	r5, #66	; 0x42
 800690c:	1d11      	adds	r1, r2, #4
 800690e:	6019      	str	r1, [r3, #0]
 8006910:	6813      	ldr	r3, [r2, #0]
 8006912:	702b      	strb	r3, [r5, #0]
 8006914:	2301      	movs	r3, #1
 8006916:	e065      	b.n	80069e4 <_printf_i+0x168>
 8006918:	6808      	ldr	r0, [r1, #0]
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	0669      	lsls	r1, r5, #25
 800691e:	d5d3      	bpl.n	80068c8 <_printf_i+0x4c>
 8006920:	b200      	sxth	r0, r0
 8006922:	e7d1      	b.n	80068c8 <_printf_i+0x4c>
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	1d08      	adds	r0, r1, #4
 800692a:	6018      	str	r0, [r3, #0]
 800692c:	6808      	ldr	r0, [r1, #0]
 800692e:	062e      	lsls	r6, r5, #24
 8006930:	d505      	bpl.n	800693e <_printf_i+0xc2>
 8006932:	4e54      	ldr	r6, [pc, #336]	; (8006a84 <_printf_i+0x208>)
 8006934:	2708      	movs	r7, #8
 8006936:	2a6f      	cmp	r2, #111	; 0x6f
 8006938:	d01b      	beq.n	8006972 <_printf_i+0xf6>
 800693a:	270a      	movs	r7, #10
 800693c:	e019      	b.n	8006972 <_printf_i+0xf6>
 800693e:	066d      	lsls	r5, r5, #25
 8006940:	d5f7      	bpl.n	8006932 <_printf_i+0xb6>
 8006942:	b280      	uxth	r0, r0
 8006944:	e7f5      	b.n	8006932 <_printf_i+0xb6>
 8006946:	3145      	adds	r1, #69	; 0x45
 8006948:	4e4e      	ldr	r6, [pc, #312]	; (8006a84 <_printf_i+0x208>)
 800694a:	700a      	strb	r2, [r1, #0]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	1d01      	adds	r1, r0, #4
 8006952:	6800      	ldr	r0, [r0, #0]
 8006954:	6019      	str	r1, [r3, #0]
 8006956:	0615      	lsls	r5, r2, #24
 8006958:	d521      	bpl.n	800699e <_printf_i+0x122>
 800695a:	07d3      	lsls	r3, r2, #31
 800695c:	d502      	bpl.n	8006964 <_printf_i+0xe8>
 800695e:	2320      	movs	r3, #32
 8006960:	431a      	orrs	r2, r3
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	2710      	movs	r7, #16
 8006966:	2800      	cmp	r0, #0
 8006968:	d103      	bne.n	8006972 <_printf_i+0xf6>
 800696a:	2320      	movs	r3, #32
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	439a      	bics	r2, r3
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	0023      	movs	r3, r4
 8006974:	2200      	movs	r2, #0
 8006976:	3343      	adds	r3, #67	; 0x43
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	60a3      	str	r3, [r4, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	db58      	blt.n	8006a34 <_printf_i+0x1b8>
 8006982:	2204      	movs	r2, #4
 8006984:	6821      	ldr	r1, [r4, #0]
 8006986:	4391      	bics	r1, r2
 8006988:	6021      	str	r1, [r4, #0]
 800698a:	2800      	cmp	r0, #0
 800698c:	d154      	bne.n	8006a38 <_printf_i+0x1bc>
 800698e:	9d02      	ldr	r5, [sp, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d05a      	beq.n	8006a4a <_printf_i+0x1ce>
 8006994:	0025      	movs	r5, r4
 8006996:	7833      	ldrb	r3, [r6, #0]
 8006998:	3542      	adds	r5, #66	; 0x42
 800699a:	702b      	strb	r3, [r5, #0]
 800699c:	e055      	b.n	8006a4a <_printf_i+0x1ce>
 800699e:	0655      	lsls	r5, r2, #25
 80069a0:	d5db      	bpl.n	800695a <_printf_i+0xde>
 80069a2:	b280      	uxth	r0, r0
 80069a4:	e7d9      	b.n	800695a <_printf_i+0xde>
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	680d      	ldr	r5, [r1, #0]
 80069aa:	1d10      	adds	r0, r2, #4
 80069ac:	6949      	ldr	r1, [r1, #20]
 80069ae:	6018      	str	r0, [r3, #0]
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	062e      	lsls	r6, r5, #24
 80069b4:	d501      	bpl.n	80069ba <_printf_i+0x13e>
 80069b6:	6019      	str	r1, [r3, #0]
 80069b8:	e002      	b.n	80069c0 <_printf_i+0x144>
 80069ba:	066d      	lsls	r5, r5, #25
 80069bc:	d5fb      	bpl.n	80069b6 <_printf_i+0x13a>
 80069be:	8019      	strh	r1, [r3, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	9d02      	ldr	r5, [sp, #8]
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	e04f      	b.n	8006a68 <_printf_i+0x1ec>
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	1d11      	adds	r1, r2, #4
 80069cc:	6019      	str	r1, [r3, #0]
 80069ce:	6815      	ldr	r5, [r2, #0]
 80069d0:	2100      	movs	r1, #0
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	0028      	movs	r0, r5
 80069d6:	f002 fb33 	bl	8009040 <memchr>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d001      	beq.n	80069e2 <_printf_i+0x166>
 80069de:	1b40      	subs	r0, r0, r5
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	9a02      	ldr	r2, [sp, #8]
 80069ea:	7013      	strb	r3, [r2, #0]
 80069ec:	e03c      	b.n	8006a68 <_printf_i+0x1ec>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	002a      	movs	r2, r5
 80069f2:	9904      	ldr	r1, [sp, #16]
 80069f4:	9803      	ldr	r0, [sp, #12]
 80069f6:	9d05      	ldr	r5, [sp, #20]
 80069f8:	47a8      	blx	r5
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d03e      	beq.n	8006a7c <_printf_i+0x200>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	079b      	lsls	r3, r3, #30
 8006a02:	d415      	bmi.n	8006a30 <_printf_i+0x1b4>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	68e0      	ldr	r0, [r4, #12]
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	da39      	bge.n	8006a80 <_printf_i+0x204>
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	e037      	b.n	8006a80 <_printf_i+0x204>
 8006a10:	0022      	movs	r2, r4
 8006a12:	2301      	movs	r3, #1
 8006a14:	3219      	adds	r2, #25
 8006a16:	9904      	ldr	r1, [sp, #16]
 8006a18:	9803      	ldr	r0, [sp, #12]
 8006a1a:	9e05      	ldr	r6, [sp, #20]
 8006a1c:	47b0      	blx	r6
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d02c      	beq.n	8006a7c <_printf_i+0x200>
 8006a22:	3501      	adds	r5, #1
 8006a24:	68e3      	ldr	r3, [r4, #12]
 8006a26:	9a07      	ldr	r2, [sp, #28]
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	42ab      	cmp	r3, r5
 8006a2c:	dcf0      	bgt.n	8006a10 <_printf_i+0x194>
 8006a2e:	e7e9      	b.n	8006a04 <_printf_i+0x188>
 8006a30:	2500      	movs	r5, #0
 8006a32:	e7f7      	b.n	8006a24 <_printf_i+0x1a8>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d0ad      	beq.n	8006994 <_printf_i+0x118>
 8006a38:	9d02      	ldr	r5, [sp, #8]
 8006a3a:	0039      	movs	r1, r7
 8006a3c:	f7f9 fc06 	bl	800024c <__aeabi_uidivmod>
 8006a40:	5c73      	ldrb	r3, [r6, r1]
 8006a42:	3d01      	subs	r5, #1
 8006a44:	702b      	strb	r3, [r5, #0]
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d1f7      	bne.n	8006a3a <_printf_i+0x1be>
 8006a4a:	2f08      	cmp	r7, #8
 8006a4c:	d109      	bne.n	8006a62 <_printf_i+0x1e6>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	07db      	lsls	r3, r3, #31
 8006a52:	d506      	bpl.n	8006a62 <_printf_i+0x1e6>
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	dc02      	bgt.n	8006a62 <_printf_i+0x1e6>
 8006a5c:	2330      	movs	r3, #48	; 0x30
 8006a5e:	3d01      	subs	r5, #1
 8006a60:	702b      	strb	r3, [r5, #0]
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	1b5b      	subs	r3, r3, r5
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	aa07      	add	r2, sp, #28
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	0021      	movs	r1, r4
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	9803      	ldr	r0, [sp, #12]
 8006a74:	f7ff fe94 	bl	80067a0 <_printf_common>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d1b8      	bne.n	80069ee <_printf_i+0x172>
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	4240      	negs	r0, r0
 8006a80:	b009      	add	sp, #36	; 0x24
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a84:	08009f2b 	.word	0x08009f2b
 8006a88:	08009f3c 	.word	0x08009f3c

08006a8c <_scanf_float>:
 8006a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8e:	b08b      	sub	sp, #44	; 0x2c
 8006a90:	9002      	str	r0, [sp, #8]
 8006a92:	9200      	str	r2, [sp, #0]
 8006a94:	2000      	movs	r0, #0
 8006a96:	22ae      	movs	r2, #174	; 0xae
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	688b      	ldr	r3, [r1, #8]
 8006a9c:	000e      	movs	r6, r1
 8006a9e:	1e59      	subs	r1, r3, #1
 8006aa0:	0052      	lsls	r2, r2, #1
 8006aa2:	9004      	str	r0, [sp, #16]
 8006aa4:	4291      	cmp	r1, r2
 8006aa6:	d905      	bls.n	8006ab4 <_scanf_float+0x28>
 8006aa8:	3b5e      	subs	r3, #94	; 0x5e
 8006aaa:	3bff      	subs	r3, #255	; 0xff
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	235e      	movs	r3, #94	; 0x5e
 8006ab0:	33ff      	adds	r3, #255	; 0xff
 8006ab2:	60b3      	str	r3, [r6, #8]
 8006ab4:	23f0      	movs	r3, #240	; 0xf0
 8006ab6:	6832      	ldr	r2, [r6, #0]
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4313      	orrs	r3, r2
 8006abc:	6033      	str	r3, [r6, #0]
 8006abe:	0033      	movs	r3, r6
 8006ac0:	2700      	movs	r7, #0
 8006ac2:	331c      	adds	r3, #28
 8006ac4:	001d      	movs	r5, r3
 8006ac6:	003c      	movs	r4, r7
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	9708      	str	r7, [sp, #32]
 8006acc:	9707      	str	r7, [sp, #28]
 8006ace:	9701      	str	r7, [sp, #4]
 8006ad0:	9706      	str	r7, [sp, #24]
 8006ad2:	68b2      	ldr	r2, [r6, #8]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d013      	beq.n	8006b00 <_scanf_float+0x74>
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b49      	cmp	r3, #73	; 0x49
 8006ae2:	d100      	bne.n	8006ae6 <_scanf_float+0x5a>
 8006ae4:	e07c      	b.n	8006be0 <_scanf_float+0x154>
 8006ae6:	d854      	bhi.n	8006b92 <_scanf_float+0x106>
 8006ae8:	2b39      	cmp	r3, #57	; 0x39
 8006aea:	d847      	bhi.n	8006b7c <_scanf_float+0xf0>
 8006aec:	2b31      	cmp	r3, #49	; 0x31
 8006aee:	d300      	bcc.n	8006af2 <_scanf_float+0x66>
 8006af0:	e094      	b.n	8006c1c <_scanf_float+0x190>
 8006af2:	2b2d      	cmp	r3, #45	; 0x2d
 8006af4:	d100      	bne.n	8006af8 <_scanf_float+0x6c>
 8006af6:	e09c      	b.n	8006c32 <_scanf_float+0x1a6>
 8006af8:	d817      	bhi.n	8006b2a <_scanf_float+0x9e>
 8006afa:	2b2b      	cmp	r3, #43	; 0x2b
 8006afc:	d100      	bne.n	8006b00 <_scanf_float+0x74>
 8006afe:	e098      	b.n	8006c32 <_scanf_float+0x1a6>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <_scanf_float+0x82>
 8006b06:	6832      	ldr	r2, [r6, #0]
 8006b08:	4b9b      	ldr	r3, [pc, #620]	; (8006d78 <_scanf_float+0x2ec>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	3c01      	subs	r4, #1
 8006b10:	2c01      	cmp	r4, #1
 8006b12:	d900      	bls.n	8006b16 <_scanf_float+0x8a>
 8006b14:	e0ee      	b.n	8006cf4 <_scanf_float+0x268>
 8006b16:	24be      	movs	r4, #190	; 0xbe
 8006b18:	0064      	lsls	r4, r4, #1
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	d900      	bls.n	8006b22 <_scanf_float+0x96>
 8006b20:	e0de      	b.n	8006ce0 <_scanf_float+0x254>
 8006b22:	2701      	movs	r7, #1
 8006b24:	0038      	movs	r0, r7
 8006b26:	b00b      	add	sp, #44	; 0x2c
 8006b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2c:	d100      	bne.n	8006b30 <_scanf_float+0xa4>
 8006b2e:	e0a2      	b.n	8006c76 <_scanf_float+0x1ea>
 8006b30:	2b30      	cmp	r3, #48	; 0x30
 8006b32:	d1e5      	bne.n	8006b00 <_scanf_float+0x74>
 8006b34:	6831      	ldr	r1, [r6, #0]
 8006b36:	05c8      	lsls	r0, r1, #23
 8006b38:	d570      	bpl.n	8006c1c <_scanf_float+0x190>
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	4399      	bics	r1, r3
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	6031      	str	r1, [r6, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <_scanf_float+0xc8>
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	3201      	adds	r2, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	60b2      	str	r2, [r6, #8]
 8006b54:	68b3      	ldr	r3, [r6, #8]
 8006b56:	9a00      	ldr	r2, [sp, #0]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	60b3      	str	r3, [r6, #8]
 8006b5c:	6933      	ldr	r3, [r6, #16]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	6133      	str	r3, [r6, #16]
 8006b62:	9b00      	ldr	r3, [sp, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	9309      	str	r3, [sp, #36]	; 0x24
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	6053      	str	r3, [r2, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dc00      	bgt.n	8006b72 <_scanf_float+0xe6>
 8006b70:	e0ac      	b.n	8006ccc <_scanf_float+0x240>
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	3301      	adds	r3, #1
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e7aa      	b.n	8006ad2 <_scanf_float+0x46>
 8006b7c:	2b45      	cmp	r3, #69	; 0x45
 8006b7e:	d100      	bne.n	8006b82 <_scanf_float+0xf6>
 8006b80:	e083      	b.n	8006c8a <_scanf_float+0x1fe>
 8006b82:	2b46      	cmp	r3, #70	; 0x46
 8006b84:	d06d      	beq.n	8006c62 <_scanf_float+0x1d6>
 8006b86:	2b41      	cmp	r3, #65	; 0x41
 8006b88:	d1ba      	bne.n	8006b00 <_scanf_float+0x74>
 8006b8a:	2c01      	cmp	r4, #1
 8006b8c:	d1b8      	bne.n	8006b00 <_scanf_float+0x74>
 8006b8e:	2402      	movs	r4, #2
 8006b90:	e04c      	b.n	8006c2c <_scanf_float+0x1a0>
 8006b92:	2b65      	cmp	r3, #101	; 0x65
 8006b94:	d079      	beq.n	8006c8a <_scanf_float+0x1fe>
 8006b96:	d81b      	bhi.n	8006bd0 <_scanf_float+0x144>
 8006b98:	2b54      	cmp	r3, #84	; 0x54
 8006b9a:	d067      	beq.n	8006c6c <_scanf_float+0x1e0>
 8006b9c:	d813      	bhi.n	8006bc6 <_scanf_float+0x13a>
 8006b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba0:	d1ae      	bne.n	8006b00 <_scanf_float+0x74>
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	d14c      	bne.n	8006c40 <_scanf_float+0x1b4>
 8006ba6:	9a01      	ldr	r2, [sp, #4]
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	d14b      	bne.n	8006c44 <_scanf_float+0x1b8>
 8006bac:	21e0      	movs	r1, #224	; 0xe0
 8006bae:	20e0      	movs	r0, #224	; 0xe0
 8006bb0:	6832      	ldr	r2, [r6, #0]
 8006bb2:	00c9      	lsls	r1, r1, #3
 8006bb4:	4011      	ands	r1, r2
 8006bb6:	00c0      	lsls	r0, r0, #3
 8006bb8:	4281      	cmp	r1, r0
 8006bba:	d143      	bne.n	8006c44 <_scanf_float+0x1b8>
 8006bbc:	496f      	ldr	r1, [pc, #444]	; (8006d7c <_scanf_float+0x2f0>)
 8006bbe:	3401      	adds	r4, #1
 8006bc0:	400a      	ands	r2, r1
 8006bc2:	6032      	str	r2, [r6, #0]
 8006bc4:	e032      	b.n	8006c2c <_scanf_float+0x1a0>
 8006bc6:	2b59      	cmp	r3, #89	; 0x59
 8006bc8:	d023      	beq.n	8006c12 <_scanf_float+0x186>
 8006bca:	2b61      	cmp	r3, #97	; 0x61
 8006bcc:	d0dd      	beq.n	8006b8a <_scanf_float+0xfe>
 8006bce:	e797      	b.n	8006b00 <_scanf_float+0x74>
 8006bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8006bd2:	d0e6      	beq.n	8006ba2 <_scanf_float+0x116>
 8006bd4:	d818      	bhi.n	8006c08 <_scanf_float+0x17c>
 8006bd6:	2b66      	cmp	r3, #102	; 0x66
 8006bd8:	d043      	beq.n	8006c62 <_scanf_float+0x1d6>
 8006bda:	2b69      	cmp	r3, #105	; 0x69
 8006bdc:	d000      	beq.n	8006be0 <_scanf_float+0x154>
 8006bde:	e78f      	b.n	8006b00 <_scanf_float+0x74>
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	d137      	bne.n	8006c54 <_scanf_float+0x1c8>
 8006be4:	9a01      	ldr	r2, [sp, #4]
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	d000      	beq.n	8006bec <_scanf_float+0x160>
 8006bea:	e78c      	b.n	8006b06 <_scanf_float+0x7a>
 8006bec:	21e0      	movs	r1, #224	; 0xe0
 8006bee:	20e0      	movs	r0, #224	; 0xe0
 8006bf0:	6832      	ldr	r2, [r6, #0]
 8006bf2:	00c9      	lsls	r1, r1, #3
 8006bf4:	4011      	ands	r1, r2
 8006bf6:	00c0      	lsls	r0, r0, #3
 8006bf8:	4281      	cmp	r1, r0
 8006bfa:	d000      	beq.n	8006bfe <_scanf_float+0x172>
 8006bfc:	e787      	b.n	8006b0e <_scanf_float+0x82>
 8006bfe:	495f      	ldr	r1, [pc, #380]	; (8006d7c <_scanf_float+0x2f0>)
 8006c00:	3701      	adds	r7, #1
 8006c02:	400a      	ands	r2, r1
 8006c04:	6032      	str	r2, [r6, #0]
 8006c06:	e011      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c08:	2b74      	cmp	r3, #116	; 0x74
 8006c0a:	d02f      	beq.n	8006c6c <_scanf_float+0x1e0>
 8006c0c:	2b79      	cmp	r3, #121	; 0x79
 8006c0e:	d000      	beq.n	8006c12 <_scanf_float+0x186>
 8006c10:	e776      	b.n	8006b00 <_scanf_float+0x74>
 8006c12:	2f07      	cmp	r7, #7
 8006c14:	d000      	beq.n	8006c18 <_scanf_float+0x18c>
 8006c16:	e773      	b.n	8006b00 <_scanf_float+0x74>
 8006c18:	2708      	movs	r7, #8
 8006c1a:	e007      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c1c:	19e2      	adds	r2, r4, r7
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	d000      	beq.n	8006c24 <_scanf_float+0x198>
 8006c22:	e76d      	b.n	8006b00 <_scanf_float+0x74>
 8006c24:	4a56      	ldr	r2, [pc, #344]	; (8006d80 <_scanf_float+0x2f4>)
 8006c26:	6831      	ldr	r1, [r6, #0]
 8006c28:	400a      	ands	r2, r1
 8006c2a:	6032      	str	r2, [r6, #0]
 8006c2c:	702b      	strb	r3, [r5, #0]
 8006c2e:	3501      	adds	r5, #1
 8006c30:	e790      	b.n	8006b54 <_scanf_float+0xc8>
 8006c32:	2180      	movs	r1, #128	; 0x80
 8006c34:	6832      	ldr	r2, [r6, #0]
 8006c36:	420a      	tst	r2, r1
 8006c38:	d100      	bne.n	8006c3c <_scanf_float+0x1b0>
 8006c3a:	e761      	b.n	8006b00 <_scanf_float+0x74>
 8006c3c:	438a      	bics	r2, r1
 8006c3e:	e7f4      	b.n	8006c2a <_scanf_float+0x19e>
 8006c40:	2c02      	cmp	r4, #2
 8006c42:	d041      	beq.n	8006cc8 <_scanf_float+0x23c>
 8006c44:	2f01      	cmp	r7, #1
 8006c46:	d002      	beq.n	8006c4e <_scanf_float+0x1c2>
 8006c48:	2f04      	cmp	r7, #4
 8006c4a:	d000      	beq.n	8006c4e <_scanf_float+0x1c2>
 8006c4c:	e758      	b.n	8006b00 <_scanf_float+0x74>
 8006c4e:	3701      	adds	r7, #1
 8006c50:	b2ff      	uxtb	r7, r7
 8006c52:	e7eb      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c54:	2102      	movs	r1, #2
 8006c56:	1efa      	subs	r2, r7, #3
 8006c58:	438a      	bics	r2, r1
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d0f6      	beq.n	8006c4e <_scanf_float+0x1c2>
 8006c60:	e74e      	b.n	8006b00 <_scanf_float+0x74>
 8006c62:	2f02      	cmp	r7, #2
 8006c64:	d000      	beq.n	8006c68 <_scanf_float+0x1dc>
 8006c66:	e74b      	b.n	8006b00 <_scanf_float+0x74>
 8006c68:	2703      	movs	r7, #3
 8006c6a:	e7df      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c6c:	2f06      	cmp	r7, #6
 8006c6e:	d000      	beq.n	8006c72 <_scanf_float+0x1e6>
 8006c70:	e746      	b.n	8006b00 <_scanf_float+0x74>
 8006c72:	2707      	movs	r7, #7
 8006c74:	e7da      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c76:	6832      	ldr	r2, [r6, #0]
 8006c78:	0591      	lsls	r1, r2, #22
 8006c7a:	d400      	bmi.n	8006c7e <_scanf_float+0x1f2>
 8006c7c:	e740      	b.n	8006b00 <_scanf_float+0x74>
 8006c7e:	4941      	ldr	r1, [pc, #260]	; (8006d84 <_scanf_float+0x2f8>)
 8006c80:	400a      	ands	r2, r1
 8006c82:	6032      	str	r2, [r6, #0]
 8006c84:	9a01      	ldr	r2, [sp, #4]
 8006c86:	9206      	str	r2, [sp, #24]
 8006c88:	e7d0      	b.n	8006c2c <_scanf_float+0x1a0>
 8006c8a:	21a0      	movs	r1, #160	; 0xa0
 8006c8c:	2080      	movs	r0, #128	; 0x80
 8006c8e:	6832      	ldr	r2, [r6, #0]
 8006c90:	00c9      	lsls	r1, r1, #3
 8006c92:	4011      	ands	r1, r2
 8006c94:	00c0      	lsls	r0, r0, #3
 8006c96:	4281      	cmp	r1, r0
 8006c98:	d006      	beq.n	8006ca8 <_scanf_float+0x21c>
 8006c9a:	4202      	tst	r2, r0
 8006c9c:	d100      	bne.n	8006ca0 <_scanf_float+0x214>
 8006c9e:	e72f      	b.n	8006b00 <_scanf_float+0x74>
 8006ca0:	9901      	ldr	r1, [sp, #4]
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	d100      	bne.n	8006ca8 <_scanf_float+0x21c>
 8006ca6:	e732      	b.n	8006b0e <_scanf_float+0x82>
 8006ca8:	0591      	lsls	r1, r2, #22
 8006caa:	d404      	bmi.n	8006cb6 <_scanf_float+0x22a>
 8006cac:	9901      	ldr	r1, [sp, #4]
 8006cae:	9806      	ldr	r0, [sp, #24]
 8006cb0:	9508      	str	r5, [sp, #32]
 8006cb2:	1a09      	subs	r1, r1, r0
 8006cb4:	9107      	str	r1, [sp, #28]
 8006cb6:	4931      	ldr	r1, [pc, #196]	; (8006d7c <_scanf_float+0x2f0>)
 8006cb8:	400a      	ands	r2, r1
 8006cba:	21c0      	movs	r1, #192	; 0xc0
 8006cbc:	0049      	lsls	r1, r1, #1
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	6032      	str	r2, [r6, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	9201      	str	r2, [sp, #4]
 8006cc6:	e7b1      	b.n	8006c2c <_scanf_float+0x1a0>
 8006cc8:	2403      	movs	r4, #3
 8006cca:	e7af      	b.n	8006c2c <_scanf_float+0x1a0>
 8006ccc:	23c0      	movs	r3, #192	; 0xc0
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	58f3      	ldr	r3, [r6, r3]
 8006cd2:	9900      	ldr	r1, [sp, #0]
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	4798      	blx	r3
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d100      	bne.n	8006cde <_scanf_float+0x252>
 8006cdc:	e6f9      	b.n	8006ad2 <_scanf_float+0x46>
 8006cde:	e70f      	b.n	8006b00 <_scanf_float+0x74>
 8006ce0:	3d01      	subs	r5, #1
 8006ce2:	5933      	ldr	r3, [r6, r4]
 8006ce4:	7829      	ldrb	r1, [r5, #0]
 8006ce6:	9a00      	ldr	r2, [sp, #0]
 8006ce8:	9802      	ldr	r0, [sp, #8]
 8006cea:	4798      	blx	r3
 8006cec:	6933      	ldr	r3, [r6, #16]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6133      	str	r3, [r6, #16]
 8006cf2:	e712      	b.n	8006b1a <_scanf_float+0x8e>
 8006cf4:	1e7b      	subs	r3, r7, #1
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d826      	bhi.n	8006d48 <_scanf_float+0x2bc>
 8006cfa:	2f02      	cmp	r7, #2
 8006cfc:	d839      	bhi.n	8006d72 <_scanf_float+0x2e6>
 8006cfe:	24be      	movs	r4, #190	; 0xbe
 8006d00:	0064      	lsls	r4, r4, #1
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	429d      	cmp	r5, r3
 8006d06:	d800      	bhi.n	8006d0a <_scanf_float+0x27e>
 8006d08:	e70b      	b.n	8006b22 <_scanf_float+0x96>
 8006d0a:	3d01      	subs	r5, #1
 8006d0c:	5933      	ldr	r3, [r6, r4]
 8006d0e:	7829      	ldrb	r1, [r5, #0]
 8006d10:	9a00      	ldr	r2, [sp, #0]
 8006d12:	9802      	ldr	r0, [sp, #8]
 8006d14:	4798      	blx	r3
 8006d16:	6933      	ldr	r3, [r6, #16]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	6133      	str	r3, [r6, #16]
 8006d1c:	e7f1      	b.n	8006d02 <_scanf_float+0x276>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	9a00      	ldr	r2, [sp, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	7819      	ldrb	r1, [r3, #0]
 8006d28:	23be      	movs	r3, #190	; 0xbe
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	58f3      	ldr	r3, [r6, r3]
 8006d2e:	9802      	ldr	r0, [sp, #8]
 8006d30:	9309      	str	r3, [sp, #36]	; 0x24
 8006d32:	4798      	blx	r3
 8006d34:	6933      	ldr	r3, [r6, #16]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6133      	str	r3, [r6, #16]
 8006d3a:	3c01      	subs	r4, #1
 8006d3c:	b2e4      	uxtb	r4, r4
 8006d3e:	2c02      	cmp	r4, #2
 8006d40:	d1ed      	bne.n	8006d1e <_scanf_float+0x292>
 8006d42:	3f03      	subs	r7, #3
 8006d44:	b2ff      	uxtb	r7, r7
 8006d46:	1bed      	subs	r5, r5, r7
 8006d48:	6833      	ldr	r3, [r6, #0]
 8006d4a:	05da      	lsls	r2, r3, #23
 8006d4c:	d537      	bpl.n	8006dbe <_scanf_float+0x332>
 8006d4e:	055b      	lsls	r3, r3, #21
 8006d50:	d51a      	bpl.n	8006d88 <_scanf_float+0x2fc>
 8006d52:	24be      	movs	r4, #190	; 0xbe
 8006d54:	0064      	lsls	r4, r4, #1
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	429d      	cmp	r5, r3
 8006d5a:	d800      	bhi.n	8006d5e <_scanf_float+0x2d2>
 8006d5c:	e6e1      	b.n	8006b22 <_scanf_float+0x96>
 8006d5e:	3d01      	subs	r5, #1
 8006d60:	5933      	ldr	r3, [r6, r4]
 8006d62:	7829      	ldrb	r1, [r5, #0]
 8006d64:	9a00      	ldr	r2, [sp, #0]
 8006d66:	9802      	ldr	r0, [sp, #8]
 8006d68:	4798      	blx	r3
 8006d6a:	6933      	ldr	r3, [r6, #16]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	6133      	str	r3, [r6, #16]
 8006d70:	e7f1      	b.n	8006d56 <_scanf_float+0x2ca>
 8006d72:	003c      	movs	r4, r7
 8006d74:	9504      	str	r5, [sp, #16]
 8006d76:	e7e0      	b.n	8006d3a <_scanf_float+0x2ae>
 8006d78:	fffffeff 	.word	0xfffffeff
 8006d7c:	fffff87f 	.word	0xfffff87f
 8006d80:	fffffe7f 	.word	0xfffffe7f
 8006d84:	fffffd7f 	.word	0xfffffd7f
 8006d88:	6933      	ldr	r3, [r6, #16]
 8006d8a:	1e6c      	subs	r4, r5, #1
 8006d8c:	7821      	ldrb	r1, [r4, #0]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	6133      	str	r3, [r6, #16]
 8006d92:	2965      	cmp	r1, #101	; 0x65
 8006d94:	d00c      	beq.n	8006db0 <_scanf_float+0x324>
 8006d96:	2945      	cmp	r1, #69	; 0x45
 8006d98:	d00a      	beq.n	8006db0 <_scanf_float+0x324>
 8006d9a:	23be      	movs	r3, #190	; 0xbe
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	58f3      	ldr	r3, [r6, r3]
 8006da0:	9a00      	ldr	r2, [sp, #0]
 8006da2:	9802      	ldr	r0, [sp, #8]
 8006da4:	4798      	blx	r3
 8006da6:	6933      	ldr	r3, [r6, #16]
 8006da8:	1eac      	subs	r4, r5, #2
 8006daa:	3b01      	subs	r3, #1
 8006dac:	7821      	ldrb	r1, [r4, #0]
 8006dae:	6133      	str	r3, [r6, #16]
 8006db0:	23be      	movs	r3, #190	; 0xbe
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	58f3      	ldr	r3, [r6, r3]
 8006db6:	9a00      	ldr	r2, [sp, #0]
 8006db8:	9802      	ldr	r0, [sp, #8]
 8006dba:	4798      	blx	r3
 8006dbc:	0025      	movs	r5, r4
 8006dbe:	2710      	movs	r7, #16
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	401f      	ands	r7, r3
 8006dc4:	d15b      	bne.n	8006e7e <_scanf_float+0x3f2>
 8006dc6:	23c0      	movs	r3, #192	; 0xc0
 8006dc8:	702f      	strb	r7, [r5, #0]
 8006dca:	6832      	ldr	r2, [r6, #0]
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2280      	movs	r2, #128	; 0x80
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d11b      	bne.n	8006e10 <_scanf_float+0x384>
 8006dd8:	9a06      	ldr	r2, [sp, #24]
 8006dda:	9b01      	ldr	r3, [sp, #4]
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	425a      	negs	r2, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d122      	bne.n	8006e2a <_scanf_float+0x39e>
 8006de4:	2200      	movs	r2, #0
 8006de6:	9903      	ldr	r1, [sp, #12]
 8006de8:	9802      	ldr	r0, [sp, #8]
 8006dea:	f000 feb1 	bl	8007b50 <_strtod_r>
 8006dee:	9b05      	ldr	r3, [sp, #20]
 8006df0:	0004      	movs	r4, r0
 8006df2:	6830      	ldr	r0, [r6, #0]
 8006df4:	000d      	movs	r5, r1
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	0782      	lsls	r2, r0, #30
 8006dfa:	d523      	bpl.n	8006e44 <_scanf_float+0x3b8>
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	9905      	ldr	r1, [sp, #20]
 8006e00:	600a      	str	r2, [r1, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	601c      	str	r4, [r3, #0]
 8006e06:	605d      	str	r5, [r3, #4]
 8006e08:	68f3      	ldr	r3, [r6, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60f3      	str	r3, [r6, #12]
 8006e0e:	e689      	b.n	8006b24 <_scanf_float+0x98>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0e6      	beq.n	8006de4 <_scanf_float+0x358>
 8006e16:	9b08      	ldr	r3, [sp, #32]
 8006e18:	003a      	movs	r2, r7
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	9802      	ldr	r0, [sp, #8]
 8006e1e:	230a      	movs	r3, #10
 8006e20:	f000 ff26 	bl	8007c70 <_strtol_r>
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	9d08      	ldr	r5, [sp, #32]
 8006e28:	1ac2      	subs	r2, r0, r3
 8006e2a:	0033      	movs	r3, r6
 8006e2c:	3370      	adds	r3, #112	; 0x70
 8006e2e:	33ff      	adds	r3, #255	; 0xff
 8006e30:	429d      	cmp	r5, r3
 8006e32:	d302      	bcc.n	8006e3a <_scanf_float+0x3ae>
 8006e34:	0035      	movs	r5, r6
 8006e36:	356f      	adds	r5, #111	; 0x6f
 8006e38:	35ff      	adds	r5, #255	; 0xff
 8006e3a:	4912      	ldr	r1, [pc, #72]	; (8006e84 <_scanf_float+0x3f8>)
 8006e3c:	0028      	movs	r0, r5
 8006e3e:	f000 f827 	bl	8006e90 <siprintf>
 8006e42:	e7cf      	b.n	8006de4 <_scanf_float+0x358>
 8006e44:	2104      	movs	r1, #4
 8006e46:	4008      	ands	r0, r1
 8006e48:	1d1a      	adds	r2, r3, #4
 8006e4a:	9001      	str	r0, [sp, #4]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1d6      	bne.n	8006dfe <_scanf_float+0x372>
 8006e50:	9905      	ldr	r1, [sp, #20]
 8006e52:	0020      	movs	r0, r4
 8006e54:	600a      	str	r2, [r1, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	0022      	movs	r2, r4
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	0029      	movs	r1, r5
 8006e5e:	002b      	movs	r3, r5
 8006e60:	f7fb f820 	bl	8001ea4 <__aeabi_dcmpun>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d005      	beq.n	8006e74 <_scanf_float+0x3e8>
 8006e68:	9801      	ldr	r0, [sp, #4]
 8006e6a:	f000 f80d 	bl	8006e88 <nanf>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	6018      	str	r0, [r3, #0]
 8006e72:	e7c9      	b.n	8006e08 <_scanf_float+0x37c>
 8006e74:	0020      	movs	r0, r4
 8006e76:	0029      	movs	r1, r5
 8006e78:	f7fb f8d2 	bl	8002020 <__aeabi_d2f>
 8006e7c:	e7f7      	b.n	8006e6e <_scanf_float+0x3e2>
 8006e7e:	2700      	movs	r7, #0
 8006e80:	e650      	b.n	8006b24 <_scanf_float+0x98>
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	08009f4d 	.word	0x08009f4d

08006e88 <nanf>:
 8006e88:	4800      	ldr	r0, [pc, #0]	; (8006e8c <nanf+0x4>)
 8006e8a:	4770      	bx	lr
 8006e8c:	7fc00000 	.word	0x7fc00000

08006e90 <siprintf>:
 8006e90:	b40e      	push	{r1, r2, r3}
 8006e92:	b500      	push	{lr}
 8006e94:	490b      	ldr	r1, [pc, #44]	; (8006ec4 <siprintf+0x34>)
 8006e96:	b09c      	sub	sp, #112	; 0x70
 8006e98:	ab1d      	add	r3, sp, #116	; 0x74
 8006e9a:	9002      	str	r0, [sp, #8]
 8006e9c:	9006      	str	r0, [sp, #24]
 8006e9e:	9107      	str	r1, [sp, #28]
 8006ea0:	9104      	str	r1, [sp, #16]
 8006ea2:	4809      	ldr	r0, [pc, #36]	; (8006ec8 <siprintf+0x38>)
 8006ea4:	4909      	ldr	r1, [pc, #36]	; (8006ecc <siprintf+0x3c>)
 8006ea6:	cb04      	ldmia	r3!, {r2}
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	a902      	add	r1, sp, #8
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	f002 fde0 	bl	8009a74 <_svfiprintf_r>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9a02      	ldr	r2, [sp, #8]
 8006eb8:	7013      	strb	r3, [r2, #0]
 8006eba:	b01c      	add	sp, #112	; 0x70
 8006ebc:	bc08      	pop	{r3}
 8006ebe:	b003      	add	sp, #12
 8006ec0:	4718      	bx	r3
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	7fffffff 	.word	0x7fffffff
 8006ec8:	20000184 	.word	0x20000184
 8006ecc:	ffff0208 	.word	0xffff0208

08006ed0 <sulp>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	0016      	movs	r6, r2
 8006ed4:	000d      	movs	r5, r1
 8006ed6:	f002 fb8f 	bl	80095f8 <__ulp>
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d00d      	beq.n	8006efa <sulp+0x2a>
 8006ede:	236b      	movs	r3, #107	; 0x6b
 8006ee0:	006a      	lsls	r2, r5, #1
 8006ee2:	0d52      	lsrs	r2, r2, #21
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dd07      	ble.n	8006efa <sulp+0x2a>
 8006eea:	2400      	movs	r4, #0
 8006eec:	4a03      	ldr	r2, [pc, #12]	; (8006efc <sulp+0x2c>)
 8006eee:	051b      	lsls	r3, r3, #20
 8006ef0:	189d      	adds	r5, r3, r2
 8006ef2:	002b      	movs	r3, r5
 8006ef4:	0022      	movs	r2, r4
 8006ef6:	f7fa fa1b 	bl	8001330 <__aeabi_dmul>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	3ff00000 	.word	0x3ff00000

08006f00 <_strtod_l>:
 8006f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f02:	b0a7      	sub	sp, #156	; 0x9c
 8006f04:	9307      	str	r3, [sp, #28]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9004      	str	r0, [sp, #16]
 8006f0a:	9807      	ldr	r0, [sp, #28]
 8006f0c:	9322      	str	r3, [sp, #136]	; 0x88
 8006f0e:	9106      	str	r1, [sp, #24]
 8006f10:	921d      	str	r2, [sp, #116]	; 0x74
 8006f12:	f002 f86b 	bl	8008fec <__localeconv_l>
 8006f16:	0005      	movs	r5, r0
 8006f18:	6800      	ldr	r0, [r0, #0]
 8006f1a:	f7f9 f8f5 	bl	8000108 <strlen>
 8006f1e:	2600      	movs	r6, #0
 8006f20:	2700      	movs	r7, #0
 8006f22:	9b06      	ldr	r3, [sp, #24]
 8006f24:	9005      	str	r0, [sp, #20]
 8006f26:	9321      	str	r3, [sp, #132]	; 0x84
 8006f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	2a0d      	cmp	r2, #13
 8006f2e:	d839      	bhi.n	8006fa4 <_strtod_l+0xa4>
 8006f30:	2a09      	cmp	r2, #9
 8006f32:	d23d      	bcs.n	8006fb0 <_strtod_l+0xb0>
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d044      	beq.n	8006fc2 <_strtod_l+0xc2>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006f40:	920c      	str	r2, [sp, #48]	; 0x30
 8006f42:	7823      	ldrb	r3, [r4, #0]
 8006f44:	2b30      	cmp	r3, #48	; 0x30
 8006f46:	d000      	beq.n	8006f4a <_strtod_l+0x4a>
 8006f48:	e07e      	b.n	8007048 <_strtod_l+0x148>
 8006f4a:	7863      	ldrb	r3, [r4, #1]
 8006f4c:	2b58      	cmp	r3, #88	; 0x58
 8006f4e:	d002      	beq.n	8006f56 <_strtod_l+0x56>
 8006f50:	2b78      	cmp	r3, #120	; 0x78
 8006f52:	d000      	beq.n	8006f56 <_strtod_l+0x56>
 8006f54:	e06e      	b.n	8007034 <_strtod_l+0x134>
 8006f56:	9b07      	ldr	r3, [sp, #28]
 8006f58:	4a96      	ldr	r2, [pc, #600]	; (80071b4 <_strtod_l+0x2b4>)
 8006f5a:	9302      	str	r3, [sp, #8]
 8006f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f5e:	a921      	add	r1, sp, #132	; 0x84
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	ab22      	add	r3, sp, #136	; 0x88
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	9804      	ldr	r0, [sp, #16]
 8006f68:	ab23      	add	r3, sp, #140	; 0x8c
 8006f6a:	f001 fd54 	bl	8008a16 <__gethex>
 8006f6e:	2507      	movs	r5, #7
 8006f70:	9005      	str	r0, [sp, #20]
 8006f72:	4005      	ands	r5, r0
 8006f74:	d005      	beq.n	8006f82 <_strtod_l+0x82>
 8006f76:	2d06      	cmp	r5, #6
 8006f78:	d12f      	bne.n	8006fda <_strtod_l+0xda>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	3401      	adds	r4, #1
 8006f7e:	9421      	str	r4, [sp, #132]	; 0x84
 8006f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <_strtod_l+0x8e>
 8006f88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01d      	beq.n	8006fd0 <_strtod_l+0xd0>
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	0032      	movs	r2, r6
 8006f98:	061b      	lsls	r3, r3, #24
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	0010      	movs	r0, r2
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	b027      	add	sp, #156	; 0x9c
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8006fa6:	d016      	beq.n	8006fd6 <_strtod_l+0xd6>
 8006fa8:	2a2d      	cmp	r2, #45	; 0x2d
 8006faa:	d003      	beq.n	8006fb4 <_strtod_l+0xb4>
 8006fac:	2a20      	cmp	r2, #32
 8006fae:	d1c3      	bne.n	8006f38 <_strtod_l+0x38>
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	e7b8      	b.n	8006f26 <_strtod_l+0x26>
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	9213      	str	r2, [sp, #76]	; 0x4c
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	9221      	str	r2, [sp, #132]	; 0x84
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1bc      	bne.n	8006f3c <_strtod_l+0x3c>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	9321      	str	r3, [sp, #132]	; 0x84
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1db      	bne.n	8006f88 <_strtod_l+0x88>
 8006fd0:	0032      	movs	r2, r6
 8006fd2:	003b      	movs	r3, r7
 8006fd4:	e7e2      	b.n	8006f9c <_strtod_l+0x9c>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	e7ed      	b.n	8006fb6 <_strtod_l+0xb6>
 8006fda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d007      	beq.n	8006ff0 <_strtod_l+0xf0>
 8006fe0:	2135      	movs	r1, #53	; 0x35
 8006fe2:	a824      	add	r0, sp, #144	; 0x90
 8006fe4:	f002 fbf5 	bl	80097d2 <__copybits>
 8006fe8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006fea:	9804      	ldr	r0, [sp, #16]
 8006fec:	f002 f86b 	bl	80090c6 <_Bfree>
 8006ff0:	1e68      	subs	r0, r5, #1
 8006ff2:	2804      	cmp	r0, #4
 8006ff4:	d806      	bhi.n	8007004 <_strtod_l+0x104>
 8006ff6:	f7f9 f88f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006ffa:	030c      	.short	0x030c
 8006ffc:	1917      	.short	0x1917
 8006ffe:	0c          	.byte	0x0c
 8006fff:	00          	.byte	0x00
 8007000:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007002:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007004:	9b05      	ldr	r3, [sp, #20]
 8007006:	071b      	lsls	r3, r3, #28
 8007008:	d5bb      	bpl.n	8006f82 <_strtod_l+0x82>
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	061b      	lsls	r3, r3, #24
 800700e:	431f      	orrs	r7, r3
 8007010:	e7b7      	b.n	8006f82 <_strtod_l+0x82>
 8007012:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007014:	4a68      	ldr	r2, [pc, #416]	; (80071b8 <_strtod_l+0x2b8>)
 8007016:	4969      	ldr	r1, [pc, #420]	; (80071bc <_strtod_l+0x2bc>)
 8007018:	401a      	ands	r2, r3
 800701a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800701c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800701e:	185b      	adds	r3, r3, r1
 8007020:	051b      	lsls	r3, r3, #20
 8007022:	431a      	orrs	r2, r3
 8007024:	0017      	movs	r7, r2
 8007026:	e7ed      	b.n	8007004 <_strtod_l+0x104>
 8007028:	4f65      	ldr	r7, [pc, #404]	; (80071c0 <_strtod_l+0x2c0>)
 800702a:	e7eb      	b.n	8007004 <_strtod_l+0x104>
 800702c:	2601      	movs	r6, #1
 800702e:	4f65      	ldr	r7, [pc, #404]	; (80071c4 <_strtod_l+0x2c4>)
 8007030:	4276      	negs	r6, r6
 8007032:	e7e7      	b.n	8007004 <_strtod_l+0x104>
 8007034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	9221      	str	r2, [sp, #132]	; 0x84
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b30      	cmp	r3, #48	; 0x30
 800703e:	d0f9      	beq.n	8007034 <_strtod_l+0x134>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d09e      	beq.n	8006f82 <_strtod_l+0x82>
 8007044:	2301      	movs	r3, #1
 8007046:	930c      	str	r3, [sp, #48]	; 0x30
 8007048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800704a:	220a      	movs	r2, #10
 800704c:	9312      	str	r3, [sp, #72]	; 0x48
 800704e:	2300      	movs	r3, #0
 8007050:	930b      	str	r3, [sp, #44]	; 0x2c
 8007052:	9308      	str	r3, [sp, #32]
 8007054:	930a      	str	r3, [sp, #40]	; 0x28
 8007056:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007058:	7804      	ldrb	r4, [r0, #0]
 800705a:	0023      	movs	r3, r4
 800705c:	3b30      	subs	r3, #48	; 0x30
 800705e:	b2d9      	uxtb	r1, r3
 8007060:	2909      	cmp	r1, #9
 8007062:	d934      	bls.n	80070ce <_strtod_l+0x1ce>
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	6829      	ldr	r1, [r5, #0]
 8007068:	f002 fe14 	bl	8009c94 <strncmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	d040      	beq.n	80070f2 <_strtod_l+0x1f2>
 8007070:	2000      	movs	r0, #0
 8007072:	0023      	movs	r3, r4
 8007074:	4684      	mov	ip, r0
 8007076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007078:	9007      	str	r0, [sp, #28]
 800707a:	9205      	str	r2, [sp, #20]
 800707c:	2220      	movs	r2, #32
 800707e:	0019      	movs	r1, r3
 8007080:	4391      	bics	r1, r2
 8007082:	000a      	movs	r2, r1
 8007084:	2100      	movs	r1, #0
 8007086:	2a45      	cmp	r2, #69	; 0x45
 8007088:	d000      	beq.n	800708c <_strtod_l+0x18c>
 800708a:	e0bf      	b.n	800720c <_strtod_l+0x30c>
 800708c:	9b05      	ldr	r3, [sp, #20]
 800708e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007090:	4303      	orrs	r3, r0
 8007092:	4313      	orrs	r3, r2
 8007094:	428b      	cmp	r3, r1
 8007096:	d094      	beq.n	8006fc2 <_strtod_l+0xc2>
 8007098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800709a:	9306      	str	r3, [sp, #24]
 800709c:	3301      	adds	r3, #1
 800709e:	9321      	str	r3, [sp, #132]	; 0x84
 80070a0:	9b06      	ldr	r3, [sp, #24]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b2b      	cmp	r3, #43	; 0x2b
 80070a6:	d100      	bne.n	80070aa <_strtod_l+0x1aa>
 80070a8:	e082      	b.n	80071b0 <_strtod_l+0x2b0>
 80070aa:	000c      	movs	r4, r1
 80070ac:	2b2d      	cmp	r3, #45	; 0x2d
 80070ae:	d105      	bne.n	80070bc <_strtod_l+0x1bc>
 80070b0:	2401      	movs	r4, #1
 80070b2:	9b06      	ldr	r3, [sp, #24]
 80070b4:	3302      	adds	r3, #2
 80070b6:	9321      	str	r3, [sp, #132]	; 0x84
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	789b      	ldrb	r3, [r3, #2]
 80070bc:	001a      	movs	r2, r3
 80070be:	3a30      	subs	r2, #48	; 0x30
 80070c0:	2a09      	cmp	r2, #9
 80070c2:	d800      	bhi.n	80070c6 <_strtod_l+0x1c6>
 80070c4:	e084      	b.n	80071d0 <_strtod_l+0x2d0>
 80070c6:	9a06      	ldr	r2, [sp, #24]
 80070c8:	2100      	movs	r1, #0
 80070ca:	9221      	str	r2, [sp, #132]	; 0x84
 80070cc:	e09e      	b.n	800720c <_strtod_l+0x30c>
 80070ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070d0:	2908      	cmp	r1, #8
 80070d2:	dc09      	bgt.n	80070e8 <_strtod_l+0x1e8>
 80070d4:	9908      	ldr	r1, [sp, #32]
 80070d6:	4351      	muls	r1, r2
 80070d8:	18cb      	adds	r3, r1, r3
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070de:	3001      	adds	r0, #1
 80070e0:	3301      	adds	r3, #1
 80070e2:	930a      	str	r3, [sp, #40]	; 0x28
 80070e4:	9021      	str	r0, [sp, #132]	; 0x84
 80070e6:	e7b6      	b.n	8007056 <_strtod_l+0x156>
 80070e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ea:	4351      	muls	r1, r2
 80070ec:	18cb      	adds	r3, r1, r3
 80070ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80070f0:	e7f4      	b.n	80070dc <_strtod_l+0x1dc>
 80070f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070f4:	9b05      	ldr	r3, [sp, #20]
 80070f6:	4694      	mov	ip, r2
 80070f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070fa:	4463      	add	r3, ip
 80070fc:	9321      	str	r3, [sp, #132]	; 0x84
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2a00      	cmp	r2, #0
 8007102:	d036      	beq.n	8007172 <_strtod_l+0x272>
 8007104:	4684      	mov	ip, r0
 8007106:	9205      	str	r2, [sp, #20]
 8007108:	001a      	movs	r2, r3
 800710a:	3a30      	subs	r2, #48	; 0x30
 800710c:	2a09      	cmp	r2, #9
 800710e:	d912      	bls.n	8007136 <_strtod_l+0x236>
 8007110:	2201      	movs	r2, #1
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	e7b2      	b.n	800707c <_strtod_l+0x17c>
 8007116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007118:	3001      	adds	r0, #1
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	9221      	str	r2, [sp, #132]	; 0x84
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b30      	cmp	r3, #48	; 0x30
 8007122:	d0f8      	beq.n	8007116 <_strtod_l+0x216>
 8007124:	001a      	movs	r2, r3
 8007126:	3a31      	subs	r2, #49	; 0x31
 8007128:	2a08      	cmp	r2, #8
 800712a:	d83c      	bhi.n	80071a6 <_strtod_l+0x2a6>
 800712c:	4684      	mov	ip, r0
 800712e:	2000      	movs	r0, #0
 8007130:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007132:	9005      	str	r0, [sp, #20]
 8007134:	9212      	str	r2, [sp, #72]	; 0x48
 8007136:	3b30      	subs	r3, #48	; 0x30
 8007138:	1c42      	adds	r2, r0, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d013      	beq.n	8007166 <_strtod_l+0x266>
 800713e:	210a      	movs	r1, #10
 8007140:	4494      	add	ip, r2
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	1885      	adds	r5, r0, r2
 8007146:	42aa      	cmp	r2, r5
 8007148:	d115      	bne.n	8007176 <_strtod_l+0x276>
 800714a:	9905      	ldr	r1, [sp, #20]
 800714c:	9a05      	ldr	r2, [sp, #20]
 800714e:	3101      	adds	r1, #1
 8007150:	1809      	adds	r1, r1, r0
 8007152:	1812      	adds	r2, r2, r0
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	2a08      	cmp	r2, #8
 8007158:	dc1b      	bgt.n	8007192 <_strtod_l+0x292>
 800715a:	220a      	movs	r2, #10
 800715c:	9908      	ldr	r1, [sp, #32]
 800715e:	434a      	muls	r2, r1
 8007160:	189b      	adds	r3, r3, r2
 8007162:	2200      	movs	r2, #0
 8007164:	9308      	str	r3, [sp, #32]
 8007166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007168:	0010      	movs	r0, r2
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	9121      	str	r1, [sp, #132]	; 0x84
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	e7ca      	b.n	8007108 <_strtod_l+0x208>
 8007172:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007174:	e7d4      	b.n	8007120 <_strtod_l+0x220>
 8007176:	1c54      	adds	r4, r2, #1
 8007178:	2a08      	cmp	r2, #8
 800717a:	dc04      	bgt.n	8007186 <_strtod_l+0x286>
 800717c:	9a08      	ldr	r2, [sp, #32]
 800717e:	434a      	muls	r2, r1
 8007180:	9208      	str	r2, [sp, #32]
 8007182:	0022      	movs	r2, r4
 8007184:	e7df      	b.n	8007146 <_strtod_l+0x246>
 8007186:	2c10      	cmp	r4, #16
 8007188:	dcfb      	bgt.n	8007182 <_strtod_l+0x282>
 800718a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800718c:	434a      	muls	r2, r1
 800718e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007190:	e7f7      	b.n	8007182 <_strtod_l+0x282>
 8007192:	9905      	ldr	r1, [sp, #20]
 8007194:	2200      	movs	r2, #0
 8007196:	2910      	cmp	r1, #16
 8007198:	dce5      	bgt.n	8007166 <_strtod_l+0x266>
 800719a:	210a      	movs	r1, #10
 800719c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800719e:	4341      	muls	r1, r0
 80071a0:	185b      	adds	r3, r3, r1
 80071a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071a4:	e7df      	b.n	8007166 <_strtod_l+0x266>
 80071a6:	2200      	movs	r2, #0
 80071a8:	4694      	mov	ip, r2
 80071aa:	9205      	str	r2, [sp, #20]
 80071ac:	3201      	adds	r2, #1
 80071ae:	e7b0      	b.n	8007112 <_strtod_l+0x212>
 80071b0:	000c      	movs	r4, r1
 80071b2:	e77e      	b.n	80070b2 <_strtod_l+0x1b2>
 80071b4:	08009f54 	.word	0x08009f54
 80071b8:	ffefffff 	.word	0xffefffff
 80071bc:	00000433 	.word	0x00000433
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	7fffffff 	.word	0x7fffffff
 80071c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	9221      	str	r2, [sp, #132]	; 0x84
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b30      	cmp	r3, #48	; 0x30
 80071d2:	d0f9      	beq.n	80071c8 <_strtod_l+0x2c8>
 80071d4:	001a      	movs	r2, r3
 80071d6:	3a31      	subs	r2, #49	; 0x31
 80071d8:	2100      	movs	r1, #0
 80071da:	2a08      	cmp	r2, #8
 80071dc:	d816      	bhi.n	800720c <_strtod_l+0x30c>
 80071de:	3b30      	subs	r3, #48	; 0x30
 80071e0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80071e2:	930e      	str	r3, [sp, #56]	; 0x38
 80071e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	9121      	str	r1, [sp, #132]	; 0x84
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	001a      	movs	r2, r3
 80071ee:	3a30      	subs	r2, #48	; 0x30
 80071f0:	2a09      	cmp	r2, #9
 80071f2:	d932      	bls.n	800725a <_strtod_l+0x35a>
 80071f4:	1b4a      	subs	r2, r1, r5
 80071f6:	4dad      	ldr	r5, [pc, #692]	; (80074ac <_strtod_l+0x5ac>)
 80071f8:	0029      	movs	r1, r5
 80071fa:	2a08      	cmp	r2, #8
 80071fc:	dc03      	bgt.n	8007206 <_strtod_l+0x306>
 80071fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007200:	42a9      	cmp	r1, r5
 8007202:	dd00      	ble.n	8007206 <_strtod_l+0x306>
 8007204:	0029      	movs	r1, r5
 8007206:	2c00      	cmp	r4, #0
 8007208:	d000      	beq.n	800720c <_strtod_l+0x30c>
 800720a:	4249      	negs	r1, r1
 800720c:	9a05      	ldr	r2, [sp, #20]
 800720e:	2a00      	cmp	r2, #0
 8007210:	d149      	bne.n	80072a6 <_strtod_l+0x3a6>
 8007212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007214:	4310      	orrs	r0, r2
 8007216:	d000      	beq.n	800721a <_strtod_l+0x31a>
 8007218:	e6b3      	b.n	8006f82 <_strtod_l+0x82>
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	2a00      	cmp	r2, #0
 800721e:	d000      	beq.n	8007222 <_strtod_l+0x322>
 8007220:	e6cf      	b.n	8006fc2 <_strtod_l+0xc2>
 8007222:	2b4e      	cmp	r3, #78	; 0x4e
 8007224:	d025      	beq.n	8007272 <_strtod_l+0x372>
 8007226:	dc1f      	bgt.n	8007268 <_strtod_l+0x368>
 8007228:	2b49      	cmp	r3, #73	; 0x49
 800722a:	d000      	beq.n	800722e <_strtod_l+0x32e>
 800722c:	e6c9      	b.n	8006fc2 <_strtod_l+0xc2>
 800722e:	49a0      	ldr	r1, [pc, #640]	; (80074b0 <_strtod_l+0x5b0>)
 8007230:	a821      	add	r0, sp, #132	; 0x84
 8007232:	f001 fe2d 	bl	8008e90 <__match>
 8007236:	2800      	cmp	r0, #0
 8007238:	d100      	bne.n	800723c <_strtod_l+0x33c>
 800723a:	e6c2      	b.n	8006fc2 <_strtod_l+0xc2>
 800723c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800723e:	499d      	ldr	r1, [pc, #628]	; (80074b4 <_strtod_l+0x5b4>)
 8007240:	3b01      	subs	r3, #1
 8007242:	a821      	add	r0, sp, #132	; 0x84
 8007244:	9321      	str	r3, [sp, #132]	; 0x84
 8007246:	f001 fe23 	bl	8008e90 <__match>
 800724a:	2800      	cmp	r0, #0
 800724c:	d102      	bne.n	8007254 <_strtod_l+0x354>
 800724e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007250:	3301      	adds	r3, #1
 8007252:	9321      	str	r3, [sp, #132]	; 0x84
 8007254:	4f98      	ldr	r7, [pc, #608]	; (80074b8 <_strtod_l+0x5b8>)
 8007256:	2600      	movs	r6, #0
 8007258:	e693      	b.n	8006f82 <_strtod_l+0x82>
 800725a:	220a      	movs	r2, #10
 800725c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800725e:	434a      	muls	r2, r1
 8007260:	18d2      	adds	r2, r2, r3
 8007262:	3a30      	subs	r2, #48	; 0x30
 8007264:	920e      	str	r2, [sp, #56]	; 0x38
 8007266:	e7bd      	b.n	80071e4 <_strtod_l+0x2e4>
 8007268:	2b69      	cmp	r3, #105	; 0x69
 800726a:	d0e0      	beq.n	800722e <_strtod_l+0x32e>
 800726c:	2b6e      	cmp	r3, #110	; 0x6e
 800726e:	d000      	beq.n	8007272 <_strtod_l+0x372>
 8007270:	e6a7      	b.n	8006fc2 <_strtod_l+0xc2>
 8007272:	4992      	ldr	r1, [pc, #584]	; (80074bc <_strtod_l+0x5bc>)
 8007274:	a821      	add	r0, sp, #132	; 0x84
 8007276:	f001 fe0b 	bl	8008e90 <__match>
 800727a:	2800      	cmp	r0, #0
 800727c:	d100      	bne.n	8007280 <_strtod_l+0x380>
 800727e:	e6a0      	b.n	8006fc2 <_strtod_l+0xc2>
 8007280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b28      	cmp	r3, #40	; 0x28
 8007286:	d10c      	bne.n	80072a2 <_strtod_l+0x3a2>
 8007288:	aa24      	add	r2, sp, #144	; 0x90
 800728a:	498d      	ldr	r1, [pc, #564]	; (80074c0 <_strtod_l+0x5c0>)
 800728c:	a821      	add	r0, sp, #132	; 0x84
 800728e:	f001 fe13 	bl	8008eb8 <__hexnan>
 8007292:	2805      	cmp	r0, #5
 8007294:	d105      	bne.n	80072a2 <_strtod_l+0x3a2>
 8007296:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007298:	4a87      	ldr	r2, [pc, #540]	; (80074b8 <_strtod_l+0x5b8>)
 800729a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800729c:	431a      	orrs	r2, r3
 800729e:	0017      	movs	r7, r2
 80072a0:	e66f      	b.n	8006f82 <_strtod_l+0x82>
 80072a2:	4f88      	ldr	r7, [pc, #544]	; (80074c4 <_strtod_l+0x5c4>)
 80072a4:	e7d7      	b.n	8007256 <_strtod_l+0x356>
 80072a6:	4663      	mov	r3, ip
 80072a8:	1acb      	subs	r3, r1, r3
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <_strtod_l+0x3b6>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	930a      	str	r3, [sp, #40]	; 0x28
 80072b6:	9c05      	ldr	r4, [sp, #20]
 80072b8:	2c10      	cmp	r4, #16
 80072ba:	dd00      	ble.n	80072be <_strtod_l+0x3be>
 80072bc:	2410      	movs	r4, #16
 80072be:	9808      	ldr	r0, [sp, #32]
 80072c0:	f7fa fe7c 	bl	8001fbc <__aeabi_ui2d>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	0006      	movs	r6, r0
 80072c8:	000f      	movs	r7, r1
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	dc15      	bgt.n	80072fa <_strtod_l+0x3fa>
 80072ce:	9b07      	ldr	r3, [sp, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d100      	bne.n	80072d6 <_strtod_l+0x3d6>
 80072d4:	e655      	b.n	8006f82 <_strtod_l+0x82>
 80072d6:	9b07      	ldr	r3, [sp, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc00      	bgt.n	80072de <_strtod_l+0x3de>
 80072dc:	e07d      	b.n	80073da <_strtod_l+0x4da>
 80072de:	2b16      	cmp	r3, #22
 80072e0:	dc62      	bgt.n	80073a8 <_strtod_l+0x4a8>
 80072e2:	00dc      	lsls	r4, r3, #3
 80072e4:	4b78      	ldr	r3, [pc, #480]	; (80074c8 <_strtod_l+0x5c8>)
 80072e6:	0032      	movs	r2, r6
 80072e8:	1919      	adds	r1, r3, r4
 80072ea:	003b      	movs	r3, r7
 80072ec:	6808      	ldr	r0, [r1, #0]
 80072ee:	6849      	ldr	r1, [r1, #4]
 80072f0:	f7fa f81e 	bl	8001330 <__aeabi_dmul>
 80072f4:	0006      	movs	r6, r0
 80072f6:	000f      	movs	r7, r1
 80072f8:	e643      	b.n	8006f82 <_strtod_l+0x82>
 80072fa:	0022      	movs	r2, r4
 80072fc:	4b72      	ldr	r3, [pc, #456]	; (80074c8 <_strtod_l+0x5c8>)
 80072fe:	3a09      	subs	r2, #9
 8007300:	00d2      	lsls	r2, r2, #3
 8007302:	189b      	adds	r3, r3, r2
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f7fa f812 	bl	8001330 <__aeabi_dmul>
 800730c:	0006      	movs	r6, r0
 800730e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007310:	000f      	movs	r7, r1
 8007312:	f7fa fe53 	bl	8001fbc <__aeabi_ui2d>
 8007316:	000b      	movs	r3, r1
 8007318:	0002      	movs	r2, r0
 800731a:	0039      	movs	r1, r7
 800731c:	0030      	movs	r0, r6
 800731e:	f7f9 f8e1 	bl	80004e4 <__aeabi_dadd>
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	0006      	movs	r6, r0
 8007326:	000f      	movs	r7, r1
 8007328:	2b0f      	cmp	r3, #15
 800732a:	ddd0      	ble.n	80072ce <_strtod_l+0x3ce>
 800732c:	9b05      	ldr	r3, [sp, #20]
 800732e:	1b1c      	subs	r4, r3, r4
 8007330:	9b07      	ldr	r3, [sp, #28]
 8007332:	18e4      	adds	r4, r4, r3
 8007334:	2c00      	cmp	r4, #0
 8007336:	dc00      	bgt.n	800733a <_strtod_l+0x43a>
 8007338:	e094      	b.n	8007464 <_strtod_l+0x564>
 800733a:	230f      	movs	r3, #15
 800733c:	4023      	ands	r3, r4
 800733e:	d00a      	beq.n	8007356 <_strtod_l+0x456>
 8007340:	4961      	ldr	r1, [pc, #388]	; (80074c8 <_strtod_l+0x5c8>)
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	18c9      	adds	r1, r1, r3
 8007346:	0032      	movs	r2, r6
 8007348:	6808      	ldr	r0, [r1, #0]
 800734a:	6849      	ldr	r1, [r1, #4]
 800734c:	003b      	movs	r3, r7
 800734e:	f7f9 ffef 	bl	8001330 <__aeabi_dmul>
 8007352:	0006      	movs	r6, r0
 8007354:	000f      	movs	r7, r1
 8007356:	230f      	movs	r3, #15
 8007358:	439c      	bics	r4, r3
 800735a:	d06e      	beq.n	800743a <_strtod_l+0x53a>
 800735c:	3326      	adds	r3, #38	; 0x26
 800735e:	33ff      	adds	r3, #255	; 0xff
 8007360:	429c      	cmp	r4, r3
 8007362:	dd48      	ble.n	80073f6 <_strtod_l+0x4f6>
 8007364:	2400      	movs	r4, #0
 8007366:	9405      	str	r4, [sp, #20]
 8007368:	940b      	str	r4, [sp, #44]	; 0x2c
 800736a:	940a      	str	r4, [sp, #40]	; 0x28
 800736c:	2322      	movs	r3, #34	; 0x22
 800736e:	2600      	movs	r6, #0
 8007370:	9a04      	ldr	r2, [sp, #16]
 8007372:	4f51      	ldr	r7, [pc, #324]	; (80074b8 <_strtod_l+0x5b8>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007378:	42b3      	cmp	r3, r6
 800737a:	d100      	bne.n	800737e <_strtod_l+0x47e>
 800737c:	e601      	b.n	8006f82 <_strtod_l+0x82>
 800737e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007380:	9804      	ldr	r0, [sp, #16]
 8007382:	f001 fea0 	bl	80090c6 <_Bfree>
 8007386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007388:	9804      	ldr	r0, [sp, #16]
 800738a:	f001 fe9c 	bl	80090c6 <_Bfree>
 800738e:	9905      	ldr	r1, [sp, #20]
 8007390:	9804      	ldr	r0, [sp, #16]
 8007392:	f001 fe98 	bl	80090c6 <_Bfree>
 8007396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007398:	9804      	ldr	r0, [sp, #16]
 800739a:	f001 fe94 	bl	80090c6 <_Bfree>
 800739e:	0021      	movs	r1, r4
 80073a0:	9804      	ldr	r0, [sp, #16]
 80073a2:	f001 fe90 	bl	80090c6 <_Bfree>
 80073a6:	e5ec      	b.n	8006f82 <_strtod_l+0x82>
 80073a8:	2325      	movs	r3, #37	; 0x25
 80073aa:	9a05      	ldr	r2, [sp, #20]
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	9a07      	ldr	r2, [sp, #28]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	dbbb      	blt.n	800732c <_strtod_l+0x42c>
 80073b4:	230f      	movs	r3, #15
 80073b6:	9a05      	ldr	r2, [sp, #20]
 80073b8:	4c43      	ldr	r4, [pc, #268]	; (80074c8 <_strtod_l+0x5c8>)
 80073ba:	1a9d      	subs	r5, r3, r2
 80073bc:	00e9      	lsls	r1, r5, #3
 80073be:	1861      	adds	r1, r4, r1
 80073c0:	0032      	movs	r2, r6
 80073c2:	6808      	ldr	r0, [r1, #0]
 80073c4:	6849      	ldr	r1, [r1, #4]
 80073c6:	003b      	movs	r3, r7
 80073c8:	f7f9 ffb2 	bl	8001330 <__aeabi_dmul>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	1b5e      	subs	r6, r3, r5
 80073d0:	00f6      	lsls	r6, r6, #3
 80073d2:	19a6      	adds	r6, r4, r6
 80073d4:	6832      	ldr	r2, [r6, #0]
 80073d6:	6873      	ldr	r3, [r6, #4]
 80073d8:	e78a      	b.n	80072f0 <_strtod_l+0x3f0>
 80073da:	9b07      	ldr	r3, [sp, #28]
 80073dc:	3316      	adds	r3, #22
 80073de:	dba5      	blt.n	800732c <_strtod_l+0x42c>
 80073e0:	9b07      	ldr	r3, [sp, #28]
 80073e2:	0030      	movs	r0, r6
 80073e4:	00da      	lsls	r2, r3, #3
 80073e6:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <_strtod_l+0x5c8>)
 80073e8:	0039      	movs	r1, r7
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f7f9 fb94 	bl	8000b1c <__aeabi_ddiv>
 80073f4:	e77e      	b.n	80072f4 <_strtod_l+0x3f4>
 80073f6:	2300      	movs	r3, #0
 80073f8:	0030      	movs	r0, r6
 80073fa:	0039      	movs	r1, r7
 80073fc:	001d      	movs	r5, r3
 80073fe:	1124      	asrs	r4, r4, #4
 8007400:	2c01      	cmp	r4, #1
 8007402:	dc1d      	bgt.n	8007440 <_strtod_l+0x540>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <_strtod_l+0x50c>
 8007408:	0006      	movs	r6, r0
 800740a:	000f      	movs	r7, r1
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <_strtod_l+0x5cc>)
 800740e:	00ed      	lsls	r5, r5, #3
 8007410:	18ff      	adds	r7, r7, r3
 8007412:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <_strtod_l+0x5d0>)
 8007414:	0032      	movs	r2, r6
 8007416:	195d      	adds	r5, r3, r5
 8007418:	6828      	ldr	r0, [r5, #0]
 800741a:	6869      	ldr	r1, [r5, #4]
 800741c:	003b      	movs	r3, r7
 800741e:	f7f9 ff87 	bl	8001330 <__aeabi_dmul>
 8007422:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <_strtod_l+0x5b8>)
 8007424:	4a2b      	ldr	r2, [pc, #172]	; (80074d4 <_strtod_l+0x5d4>)
 8007426:	0006      	movs	r6, r0
 8007428:	400b      	ands	r3, r1
 800742a:	4293      	cmp	r3, r2
 800742c:	d89a      	bhi.n	8007364 <_strtod_l+0x464>
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <_strtod_l+0x5d8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d913      	bls.n	800745c <_strtod_l+0x55c>
 8007434:	2601      	movs	r6, #1
 8007436:	4f29      	ldr	r7, [pc, #164]	; (80074dc <_strtod_l+0x5dc>)
 8007438:	4276      	negs	r6, r6
 800743a:	2300      	movs	r3, #0
 800743c:	9306      	str	r3, [sp, #24]
 800743e:	e07b      	b.n	8007538 <_strtod_l+0x638>
 8007440:	2201      	movs	r2, #1
 8007442:	4214      	tst	r4, r2
 8007444:	d007      	beq.n	8007456 <_strtod_l+0x556>
 8007446:	4a22      	ldr	r2, [pc, #136]	; (80074d0 <_strtod_l+0x5d0>)
 8007448:	00eb      	lsls	r3, r5, #3
 800744a:	189b      	adds	r3, r3, r2
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f7f9 ff6e 	bl	8001330 <__aeabi_dmul>
 8007454:	2301      	movs	r3, #1
 8007456:	3501      	adds	r5, #1
 8007458:	1064      	asrs	r4, r4, #1
 800745a:	e7d1      	b.n	8007400 <_strtod_l+0x500>
 800745c:	23d4      	movs	r3, #212	; 0xd4
 800745e:	049b      	lsls	r3, r3, #18
 8007460:	18cf      	adds	r7, r1, r3
 8007462:	e7ea      	b.n	800743a <_strtod_l+0x53a>
 8007464:	2c00      	cmp	r4, #0
 8007466:	d0e8      	beq.n	800743a <_strtod_l+0x53a>
 8007468:	230f      	movs	r3, #15
 800746a:	4264      	negs	r4, r4
 800746c:	4023      	ands	r3, r4
 800746e:	d00a      	beq.n	8007486 <_strtod_l+0x586>
 8007470:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <_strtod_l+0x5c8>)
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	18d3      	adds	r3, r2, r3
 8007476:	0030      	movs	r0, r6
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	0039      	movs	r1, r7
 800747e:	f7f9 fb4d 	bl	8000b1c <__aeabi_ddiv>
 8007482:	0006      	movs	r6, r0
 8007484:	000f      	movs	r7, r1
 8007486:	1124      	asrs	r4, r4, #4
 8007488:	d0d7      	beq.n	800743a <_strtod_l+0x53a>
 800748a:	2c1f      	cmp	r4, #31
 800748c:	dd28      	ble.n	80074e0 <_strtod_l+0x5e0>
 800748e:	2400      	movs	r4, #0
 8007490:	9405      	str	r4, [sp, #20]
 8007492:	940b      	str	r4, [sp, #44]	; 0x2c
 8007494:	940a      	str	r4, [sp, #40]	; 0x28
 8007496:	2322      	movs	r3, #34	; 0x22
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	2600      	movs	r6, #0
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a0:	2700      	movs	r7, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d000      	beq.n	80074a8 <_strtod_l+0x5a8>
 80074a6:	e76a      	b.n	800737e <_strtod_l+0x47e>
 80074a8:	e56b      	b.n	8006f82 <_strtod_l+0x82>
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	00004e1f 	.word	0x00004e1f
 80074b0:	08009f1e 	.word	0x08009f1e
 80074b4:	08009fab 	.word	0x08009fab
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	08009f26 	.word	0x08009f26
 80074c0:	08009f68 	.word	0x08009f68
 80074c4:	fff80000 	.word	0xfff80000
 80074c8:	08009fe8 	.word	0x08009fe8
 80074cc:	fcb00000 	.word	0xfcb00000
 80074d0:	08009fc0 	.word	0x08009fc0
 80074d4:	7ca00000 	.word	0x7ca00000
 80074d8:	7c900000 	.word	0x7c900000
 80074dc:	7fefffff 	.word	0x7fefffff
 80074e0:	2310      	movs	r3, #16
 80074e2:	4023      	ands	r3, r4
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	d001      	beq.n	80074ec <_strtod_l+0x5ec>
 80074e8:	236a      	movs	r3, #106	; 0x6a
 80074ea:	9306      	str	r3, [sp, #24]
 80074ec:	2300      	movs	r3, #0
 80074ee:	0030      	movs	r0, r6
 80074f0:	0039      	movs	r1, r7
 80074f2:	001d      	movs	r5, r3
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	dd00      	ble.n	80074fa <_strtod_l+0x5fa>
 80074f8:	e10e      	b.n	8007718 <_strtod_l+0x818>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <_strtod_l+0x602>
 80074fe:	0006      	movs	r6, r0
 8007500:	000f      	movs	r7, r1
 8007502:	9b06      	ldr	r3, [sp, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00f      	beq.n	8007528 <_strtod_l+0x628>
 8007508:	236b      	movs	r3, #107	; 0x6b
 800750a:	0079      	lsls	r1, r7, #1
 800750c:	0d49      	lsrs	r1, r1, #21
 800750e:	003a      	movs	r2, r7
 8007510:	1a5b      	subs	r3, r3, r1
 8007512:	2b00      	cmp	r3, #0
 8007514:	dd08      	ble.n	8007528 <_strtod_l+0x628>
 8007516:	2b1f      	cmp	r3, #31
 8007518:	dc00      	bgt.n	800751c <_strtod_l+0x61c>
 800751a:	e112      	b.n	8007742 <_strtod_l+0x842>
 800751c:	2600      	movs	r6, #0
 800751e:	2b34      	cmp	r3, #52	; 0x34
 8007520:	dc00      	bgt.n	8007524 <_strtod_l+0x624>
 8007522:	e107      	b.n	8007734 <_strtod_l+0x834>
 8007524:	27dc      	movs	r7, #220	; 0xdc
 8007526:	04bf      	lsls	r7, r7, #18
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	0030      	movs	r0, r6
 800752e:	0039      	movs	r1, r7
 8007530:	f7f8 ff8c 	bl	800044c <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d1aa      	bne.n	800748e <_strtod_l+0x58e>
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	9804      	ldr	r0, [sp, #16]
 8007544:	f001 fe16 	bl	8009174 <__s2b>
 8007548:	900b      	str	r0, [sp, #44]	; 0x2c
 800754a:	2800      	cmp	r0, #0
 800754c:	d100      	bne.n	8007550 <_strtod_l+0x650>
 800754e:	e709      	b.n	8007364 <_strtod_l+0x464>
 8007550:	9b07      	ldr	r3, [sp, #28]
 8007552:	9a07      	ldr	r2, [sp, #28]
 8007554:	17db      	asrs	r3, r3, #31
 8007556:	4252      	negs	r2, r2
 8007558:	4013      	ands	r3, r2
 800755a:	9315      	str	r3, [sp, #84]	; 0x54
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2400      	movs	r4, #0
 8007560:	43db      	mvns	r3, r3
 8007562:	9a07      	ldr	r2, [sp, #28]
 8007564:	17db      	asrs	r3, r3, #31
 8007566:	401a      	ands	r2, r3
 8007568:	921c      	str	r2, [sp, #112]	; 0x70
 800756a:	9405      	str	r4, [sp, #20]
 800756c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756e:	9804      	ldr	r0, [sp, #16]
 8007570:	6859      	ldr	r1, [r3, #4]
 8007572:	f001 fd70 	bl	8009056 <_Balloc>
 8007576:	900a      	str	r0, [sp, #40]	; 0x28
 8007578:	2800      	cmp	r0, #0
 800757a:	d100      	bne.n	800757e <_strtod_l+0x67e>
 800757c:	e6f6      	b.n	800736c <_strtod_l+0x46c>
 800757e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	310c      	adds	r1, #12
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	0092      	lsls	r2, r2, #2
 800758a:	300c      	adds	r0, #12
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	f7fe fe0d 	bl	80061ac <memcpy>
 8007592:	ab24      	add	r3, sp, #144	; 0x90
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	ab23      	add	r3, sp, #140	; 0x8c
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	0032      	movs	r2, r6
 800759c:	003b      	movs	r3, r7
 800759e:	9804      	ldr	r0, [sp, #16]
 80075a0:	960e      	str	r6, [sp, #56]	; 0x38
 80075a2:	970f      	str	r7, [sp, #60]	; 0x3c
 80075a4:	f002 f89a 	bl	80096dc <__d2b>
 80075a8:	9022      	str	r0, [sp, #136]	; 0x88
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d100      	bne.n	80075b0 <_strtod_l+0x6b0>
 80075ae:	e6dd      	b.n	800736c <_strtod_l+0x46c>
 80075b0:	2101      	movs	r1, #1
 80075b2:	9804      	ldr	r0, [sp, #16]
 80075b4:	f001 fe65 	bl	8009282 <__i2b>
 80075b8:	9005      	str	r0, [sp, #20]
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d100      	bne.n	80075c0 <_strtod_l+0x6c0>
 80075be:	e6d5      	b.n	800736c <_strtod_l+0x46c>
 80075c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da00      	bge.n	80075c8 <_strtod_l+0x6c8>
 80075c6:	e0c1      	b.n	800774c <_strtod_l+0x84c>
 80075c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075ca:	189d      	adds	r5, r3, r2
 80075cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075ce:	4694      	mov	ip, r2
 80075d0:	9906      	ldr	r1, [sp, #24]
 80075d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075d4:	1a5b      	subs	r3, r3, r1
 80075d6:	2136      	movs	r1, #54	; 0x36
 80075d8:	189b      	adds	r3, r3, r2
 80075da:	1a8a      	subs	r2, r1, r2
 80075dc:	49b2      	ldr	r1, [pc, #712]	; (80078a8 <_strtod_l+0x9a8>)
 80075de:	3b01      	subs	r3, #1
 80075e0:	2001      	movs	r0, #1
 80075e2:	428b      	cmp	r3, r1
 80075e4:	db00      	blt.n	80075e8 <_strtod_l+0x6e8>
 80075e6:	e0bd      	b.n	8007764 <_strtod_l+0x864>
 80075e8:	1ac9      	subs	r1, r1, r3
 80075ea:	1a52      	subs	r2, r2, r1
 80075ec:	291f      	cmp	r1, #31
 80075ee:	dd00      	ble.n	80075f2 <_strtod_l+0x6f2>
 80075f0:	e0b1      	b.n	8007756 <_strtod_l+0x856>
 80075f2:	4088      	lsls	r0, r1
 80075f4:	2300      	movs	r3, #0
 80075f6:	9014      	str	r0, [sp, #80]	; 0x50
 80075f8:	9310      	str	r3, [sp, #64]	; 0x40
 80075fa:	18ab      	adds	r3, r5, r2
 80075fc:	9308      	str	r3, [sp, #32]
 80075fe:	0013      	movs	r3, r2
 8007600:	9a06      	ldr	r2, [sp, #24]
 8007602:	4463      	add	r3, ip
 8007604:	18d3      	adds	r3, r2, r3
 8007606:	9a08      	ldr	r2, [sp, #32]
 8007608:	930c      	str	r3, [sp, #48]	; 0x30
 800760a:	002b      	movs	r3, r5
 800760c:	4295      	cmp	r5, r2
 800760e:	dd00      	ble.n	8007612 <_strtod_l+0x712>
 8007610:	0013      	movs	r3, r2
 8007612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007614:	4293      	cmp	r3, r2
 8007616:	dd00      	ble.n	800761a <_strtod_l+0x71a>
 8007618:	0013      	movs	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	dd06      	ble.n	800762c <_strtod_l+0x72c>
 800761e:	9a08      	ldr	r2, [sp, #32]
 8007620:	1aed      	subs	r5, r5, r3
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	9208      	str	r2, [sp, #32]
 8007626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	920c      	str	r2, [sp, #48]	; 0x30
 800762c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800762e:	2b00      	cmp	r3, #0
 8007630:	d017      	beq.n	8007662 <_strtod_l+0x762>
 8007632:	001a      	movs	r2, r3
 8007634:	9905      	ldr	r1, [sp, #20]
 8007636:	9804      	ldr	r0, [sp, #16]
 8007638:	f001 febc 	bl	80093b4 <__pow5mult>
 800763c:	9005      	str	r0, [sp, #20]
 800763e:	2800      	cmp	r0, #0
 8007640:	d100      	bne.n	8007644 <_strtod_l+0x744>
 8007642:	e693      	b.n	800736c <_strtod_l+0x46c>
 8007644:	0001      	movs	r1, r0
 8007646:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007648:	9804      	ldr	r0, [sp, #16]
 800764a:	f001 fe23 	bl	8009294 <__multiply>
 800764e:	9012      	str	r0, [sp, #72]	; 0x48
 8007650:	2800      	cmp	r0, #0
 8007652:	d100      	bne.n	8007656 <_strtod_l+0x756>
 8007654:	e68a      	b.n	800736c <_strtod_l+0x46c>
 8007656:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007658:	9804      	ldr	r0, [sp, #16]
 800765a:	f001 fd34 	bl	80090c6 <_Bfree>
 800765e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007660:	9322      	str	r3, [sp, #136]	; 0x88
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd00      	ble.n	800766a <_strtod_l+0x76a>
 8007668:	e07f      	b.n	800776a <_strtod_l+0x86a>
 800766a:	9b07      	ldr	r3, [sp, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd08      	ble.n	8007682 <_strtod_l+0x782>
 8007670:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007672:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007674:	9804      	ldr	r0, [sp, #16]
 8007676:	f001 fe9d 	bl	80093b4 <__pow5mult>
 800767a:	900a      	str	r0, [sp, #40]	; 0x28
 800767c:	2800      	cmp	r0, #0
 800767e:	d100      	bne.n	8007682 <_strtod_l+0x782>
 8007680:	e674      	b.n	800736c <_strtod_l+0x46c>
 8007682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007684:	2b00      	cmp	r3, #0
 8007686:	dd08      	ble.n	800769a <_strtod_l+0x79a>
 8007688:	001a      	movs	r2, r3
 800768a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800768c:	9804      	ldr	r0, [sp, #16]
 800768e:	f001 fee3 	bl	8009458 <__lshift>
 8007692:	900a      	str	r0, [sp, #40]	; 0x28
 8007694:	2800      	cmp	r0, #0
 8007696:	d100      	bne.n	800769a <_strtod_l+0x79a>
 8007698:	e668      	b.n	800736c <_strtod_l+0x46c>
 800769a:	2d00      	cmp	r5, #0
 800769c:	dd08      	ble.n	80076b0 <_strtod_l+0x7b0>
 800769e:	002a      	movs	r2, r5
 80076a0:	9905      	ldr	r1, [sp, #20]
 80076a2:	9804      	ldr	r0, [sp, #16]
 80076a4:	f001 fed8 	bl	8009458 <__lshift>
 80076a8:	9005      	str	r0, [sp, #20]
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d100      	bne.n	80076b0 <_strtod_l+0x7b0>
 80076ae:	e65d      	b.n	800736c <_strtod_l+0x46c>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076b4:	9804      	ldr	r0, [sp, #16]
 80076b6:	f001 ff3b 	bl	8009530 <__mdiff>
 80076ba:	1e04      	subs	r4, r0, #0
 80076bc:	d100      	bne.n	80076c0 <_strtod_l+0x7c0>
 80076be:	e655      	b.n	800736c <_strtod_l+0x46c>
 80076c0:	2500      	movs	r5, #0
 80076c2:	68c3      	ldr	r3, [r0, #12]
 80076c4:	9905      	ldr	r1, [sp, #20]
 80076c6:	60c5      	str	r5, [r0, #12]
 80076c8:	9312      	str	r3, [sp, #72]	; 0x48
 80076ca:	f001 ff17 	bl	80094fc <__mcmp>
 80076ce:	42a8      	cmp	r0, r5
 80076d0:	da55      	bge.n	800777e <_strtod_l+0x87e>
 80076d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	d11b      	bne.n	8007710 <_strtod_l+0x810>
 80076d8:	42ae      	cmp	r6, r5
 80076da:	d119      	bne.n	8007710 <_strtod_l+0x810>
 80076dc:	033b      	lsls	r3, r7, #12
 80076de:	42ab      	cmp	r3, r5
 80076e0:	d116      	bne.n	8007710 <_strtod_l+0x810>
 80076e2:	22d6      	movs	r2, #214	; 0xd6
 80076e4:	4b71      	ldr	r3, [pc, #452]	; (80078ac <_strtod_l+0x9ac>)
 80076e6:	04d2      	lsls	r2, r2, #19
 80076e8:	403b      	ands	r3, r7
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d910      	bls.n	8007710 <_strtod_l+0x810>
 80076ee:	6963      	ldr	r3, [r4, #20]
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	d102      	bne.n	80076fa <_strtod_l+0x7fa>
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	dd0a      	ble.n	8007710 <_strtod_l+0x810>
 80076fa:	0021      	movs	r1, r4
 80076fc:	2201      	movs	r2, #1
 80076fe:	9804      	ldr	r0, [sp, #16]
 8007700:	f001 feaa 	bl	8009458 <__lshift>
 8007704:	9905      	ldr	r1, [sp, #20]
 8007706:	0004      	movs	r4, r0
 8007708:	f001 fef8 	bl	80094fc <__mcmp>
 800770c:	2800      	cmp	r0, #0
 800770e:	dc6b      	bgt.n	80077e8 <_strtod_l+0x8e8>
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d178      	bne.n	8007808 <_strtod_l+0x908>
 8007716:	e632      	b.n	800737e <_strtod_l+0x47e>
 8007718:	2201      	movs	r2, #1
 800771a:	4214      	tst	r4, r2
 800771c:	d007      	beq.n	800772e <_strtod_l+0x82e>
 800771e:	4a64      	ldr	r2, [pc, #400]	; (80078b0 <_strtod_l+0x9b0>)
 8007720:	00eb      	lsls	r3, r5, #3
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f7f9 fe02 	bl	8001330 <__aeabi_dmul>
 800772c:	2301      	movs	r3, #1
 800772e:	3501      	adds	r5, #1
 8007730:	1064      	asrs	r4, r4, #1
 8007732:	e6df      	b.n	80074f4 <_strtod_l+0x5f4>
 8007734:	2101      	movs	r1, #1
 8007736:	3b20      	subs	r3, #32
 8007738:	4249      	negs	r1, r1
 800773a:	4099      	lsls	r1, r3
 800773c:	400a      	ands	r2, r1
 800773e:	0017      	movs	r7, r2
 8007740:	e6f2      	b.n	8007528 <_strtod_l+0x628>
 8007742:	2201      	movs	r2, #1
 8007744:	4252      	negs	r2, r2
 8007746:	409a      	lsls	r2, r3
 8007748:	4016      	ands	r6, r2
 800774a:	e6ed      	b.n	8007528 <_strtod_l+0x628>
 800774c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800774e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	4694      	mov	ip, r2
 8007754:	e73c      	b.n	80075d0 <_strtod_l+0x6d0>
 8007756:	4957      	ldr	r1, [pc, #348]	; (80078b4 <_strtod_l+0x9b4>)
 8007758:	1acb      	subs	r3, r1, r3
 800775a:	0001      	movs	r1, r0
 800775c:	4099      	lsls	r1, r3
 800775e:	9110      	str	r1, [sp, #64]	; 0x40
 8007760:	9014      	str	r0, [sp, #80]	; 0x50
 8007762:	e74a      	b.n	80075fa <_strtod_l+0x6fa>
 8007764:	2300      	movs	r3, #0
 8007766:	9310      	str	r3, [sp, #64]	; 0x40
 8007768:	e7fa      	b.n	8007760 <_strtod_l+0x860>
 800776a:	9a08      	ldr	r2, [sp, #32]
 800776c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800776e:	9804      	ldr	r0, [sp, #16]
 8007770:	f001 fe72 	bl	8009458 <__lshift>
 8007774:	9022      	str	r0, [sp, #136]	; 0x88
 8007776:	2800      	cmp	r0, #0
 8007778:	d000      	beq.n	800777c <_strtod_l+0x87c>
 800777a:	e776      	b.n	800766a <_strtod_l+0x76a>
 800777c:	e5f6      	b.n	800736c <_strtod_l+0x46c>
 800777e:	970c      	str	r7, [sp, #48]	; 0x30
 8007780:	2800      	cmp	r0, #0
 8007782:	d000      	beq.n	8007786 <_strtod_l+0x886>
 8007784:	e0a0      	b.n	80078c8 <_strtod_l+0x9c8>
 8007786:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007788:	033b      	lsls	r3, r7, #12
 800778a:	0b1b      	lsrs	r3, r3, #12
 800778c:	2a00      	cmp	r2, #0
 800778e:	d027      	beq.n	80077e0 <_strtod_l+0x8e0>
 8007790:	4a49      	ldr	r2, [pc, #292]	; (80078b8 <_strtod_l+0x9b8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d157      	bne.n	8007846 <_strtod_l+0x946>
 8007796:	2201      	movs	r2, #1
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	4252      	negs	r2, r2
 800779c:	0031      	movs	r1, r6
 800779e:	0010      	movs	r0, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <_strtod_l+0x8bc>
 80077a4:	25d4      	movs	r5, #212	; 0xd4
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <_strtod_l+0x9ac>)
 80077a8:	04ed      	lsls	r5, r5, #19
 80077aa:	403b      	ands	r3, r7
 80077ac:	0010      	movs	r0, r2
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	d804      	bhi.n	80077bc <_strtod_l+0x8bc>
 80077b2:	306c      	adds	r0, #108	; 0x6c
 80077b4:	0d1b      	lsrs	r3, r3, #20
 80077b6:	1ac3      	subs	r3, r0, r3
 80077b8:	409a      	lsls	r2, r3
 80077ba:	0010      	movs	r0, r2
 80077bc:	4281      	cmp	r1, r0
 80077be:	d142      	bne.n	8007846 <_strtod_l+0x946>
 80077c0:	4b3e      	ldr	r3, [pc, #248]	; (80078bc <_strtod_l+0x9bc>)
 80077c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d102      	bne.n	80077ce <_strtod_l+0x8ce>
 80077c8:	1c4b      	adds	r3, r1, #1
 80077ca:	d100      	bne.n	80077ce <_strtod_l+0x8ce>
 80077cc:	e5ce      	b.n	800736c <_strtod_l+0x46c>
 80077ce:	4b37      	ldr	r3, [pc, #220]	; (80078ac <_strtod_l+0x9ac>)
 80077d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d2:	2600      	movs	r6, #0
 80077d4:	401a      	ands	r2, r3
 80077d6:	0013      	movs	r3, r2
 80077d8:	2280      	movs	r2, #128	; 0x80
 80077da:	0352      	lsls	r2, r2, #13
 80077dc:	189f      	adds	r7, r3, r2
 80077de:	e797      	b.n	8007710 <_strtod_l+0x810>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d130      	bne.n	8007846 <_strtod_l+0x946>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	d12e      	bne.n	8007846 <_strtod_l+0x946>
 80077e8:	9906      	ldr	r1, [sp, #24]
 80077ea:	003b      	movs	r3, r7
 80077ec:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <_strtod_l+0x9ac>)
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d020      	beq.n	8007834 <_strtod_l+0x934>
 80077f2:	0011      	movs	r1, r2
 80077f4:	20d6      	movs	r0, #214	; 0xd6
 80077f6:	4039      	ands	r1, r7
 80077f8:	04c0      	lsls	r0, r0, #19
 80077fa:	4281      	cmp	r1, r0
 80077fc:	dc1a      	bgt.n	8007834 <_strtod_l+0x934>
 80077fe:	23dc      	movs	r3, #220	; 0xdc
 8007800:	049b      	lsls	r3, r3, #18
 8007802:	4299      	cmp	r1, r3
 8007804:	dc00      	bgt.n	8007808 <_strtod_l+0x908>
 8007806:	e646      	b.n	8007496 <_strtod_l+0x596>
 8007808:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <_strtod_l+0x9c0>)
 800780a:	0030      	movs	r0, r6
 800780c:	931b      	str	r3, [sp, #108]	; 0x6c
 800780e:	2300      	movs	r3, #0
 8007810:	931a      	str	r3, [sp, #104]	; 0x68
 8007812:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007816:	0039      	movs	r1, r7
 8007818:	f7f9 fd8a 	bl	8001330 <__aeabi_dmul>
 800781c:	0006      	movs	r6, r0
 800781e:	000f      	movs	r7, r1
 8007820:	1e0b      	subs	r3, r1, #0
 8007822:	d000      	beq.n	8007826 <_strtod_l+0x926>
 8007824:	e5ab      	b.n	800737e <_strtod_l+0x47e>
 8007826:	2800      	cmp	r0, #0
 8007828:	d000      	beq.n	800782c <_strtod_l+0x92c>
 800782a:	e5a8      	b.n	800737e <_strtod_l+0x47e>
 800782c:	9a04      	ldr	r2, [sp, #16]
 800782e:	3322      	adds	r3, #34	; 0x22
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	e5a4      	b.n	800737e <_strtod_l+0x47e>
 8007834:	2601      	movs	r6, #1
 8007836:	4013      	ands	r3, r2
 8007838:	4a22      	ldr	r2, [pc, #136]	; (80078c4 <_strtod_l+0x9c4>)
 800783a:	4276      	negs	r6, r6
 800783c:	189b      	adds	r3, r3, r2
 800783e:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <_strtod_l+0x9b8>)
 8007840:	431a      	orrs	r2, r3
 8007842:	0017      	movs	r7, r2
 8007844:	e764      	b.n	8007710 <_strtod_l+0x810>
 8007846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d015      	beq.n	8007878 <_strtod_l+0x978>
 800784c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800784e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007850:	4213      	tst	r3, r2
 8007852:	d100      	bne.n	8007856 <_strtod_l+0x956>
 8007854:	e75c      	b.n	8007710 <_strtod_l+0x810>
 8007856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007858:	9a06      	ldr	r2, [sp, #24]
 800785a:	0030      	movs	r0, r6
 800785c:	0039      	movs	r1, r7
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00f      	beq.n	8007882 <_strtod_l+0x982>
 8007862:	f7ff fb35 	bl	8006ed0 <sulp>
 8007866:	0002      	movs	r2, r0
 8007868:	000b      	movs	r3, r1
 800786a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800786c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800786e:	f7f8 fe39 	bl	80004e4 <__aeabi_dadd>
 8007872:	0006      	movs	r6, r0
 8007874:	000f      	movs	r7, r1
 8007876:	e74b      	b.n	8007710 <_strtod_l+0x810>
 8007878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800787a:	4233      	tst	r3, r6
 800787c:	d100      	bne.n	8007880 <_strtod_l+0x980>
 800787e:	e747      	b.n	8007710 <_strtod_l+0x810>
 8007880:	e7e9      	b.n	8007856 <_strtod_l+0x956>
 8007882:	f7ff fb25 	bl	8006ed0 <sulp>
 8007886:	0002      	movs	r2, r0
 8007888:	000b      	movs	r3, r1
 800788a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800788c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800788e:	f7f9 ffc1 	bl	8001814 <__aeabi_dsub>
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	0006      	movs	r6, r0
 8007898:	000f      	movs	r7, r1
 800789a:	f7f8 fdd7 	bl	800044c <__aeabi_dcmpeq>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d000      	beq.n	80078a4 <_strtod_l+0x9a4>
 80078a2:	e5f8      	b.n	8007496 <_strtod_l+0x596>
 80078a4:	e734      	b.n	8007710 <_strtod_l+0x810>
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	fffffc02 	.word	0xfffffc02
 80078ac:	7ff00000 	.word	0x7ff00000
 80078b0:	08009f80 	.word	0x08009f80
 80078b4:	fffffbe2 	.word	0xfffffbe2
 80078b8:	000fffff 	.word	0x000fffff
 80078bc:	7fefffff 	.word	0x7fefffff
 80078c0:	39500000 	.word	0x39500000
 80078c4:	fff00000 	.word	0xfff00000
 80078c8:	9905      	ldr	r1, [sp, #20]
 80078ca:	0020      	movs	r0, r4
 80078cc:	f001 ff5a 	bl	8009784 <__ratio>
 80078d0:	2380      	movs	r3, #128	; 0x80
 80078d2:	2200      	movs	r2, #0
 80078d4:	05db      	lsls	r3, r3, #23
 80078d6:	9008      	str	r0, [sp, #32]
 80078d8:	9109      	str	r1, [sp, #36]	; 0x24
 80078da:	f7f8 fdc7 	bl	800046c <__aeabi_dcmple>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d100      	bne.n	80078e4 <_strtod_l+0x9e4>
 80078e2:	e07f      	b.n	80079e4 <_strtod_l+0xae4>
 80078e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d04b      	beq.n	8007982 <_strtod_l+0xa82>
 80078ea:	2200      	movs	r2, #0
 80078ec:	4b8a      	ldr	r3, [pc, #552]	; (8007b18 <_strtod_l+0xc18>)
 80078ee:	9210      	str	r2, [sp, #64]	; 0x40
 80078f0:	9311      	str	r3, [sp, #68]	; 0x44
 80078f2:	4b89      	ldr	r3, [pc, #548]	; (8007b18 <_strtod_l+0xc18>)
 80078f4:	9308      	str	r3, [sp, #32]
 80078f6:	4a89      	ldr	r2, [pc, #548]	; (8007b1c <_strtod_l+0xc1c>)
 80078f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078fa:	4013      	ands	r3, r2
 80078fc:	9314      	str	r3, [sp, #80]	; 0x50
 80078fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007900:	4b87      	ldr	r3, [pc, #540]	; (8007b20 <_strtod_l+0xc20>)
 8007902:	429a      	cmp	r2, r3
 8007904:	d000      	beq.n	8007908 <_strtod_l+0xa08>
 8007906:	e0ba      	b.n	8007a7e <_strtod_l+0xb7e>
 8007908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800790c:	921a      	str	r2, [sp, #104]	; 0x68
 800790e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007910:	4a84      	ldr	r2, [pc, #528]	; (8007b24 <_strtod_l+0xc24>)
 8007912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007914:	4694      	mov	ip, r2
 8007916:	4463      	add	r3, ip
 8007918:	001f      	movs	r7, r3
 800791a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800791c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800791e:	0030      	movs	r0, r6
 8007920:	0039      	movs	r1, r7
 8007922:	920c      	str	r2, [sp, #48]	; 0x30
 8007924:	930d      	str	r3, [sp, #52]	; 0x34
 8007926:	f001 fe67 	bl	80095f8 <__ulp>
 800792a:	0002      	movs	r2, r0
 800792c:	000b      	movs	r3, r1
 800792e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007930:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007932:	f7f9 fcfd 	bl	8001330 <__aeabi_dmul>
 8007936:	0032      	movs	r2, r6
 8007938:	003b      	movs	r3, r7
 800793a:	f7f8 fdd3 	bl	80004e4 <__aeabi_dadd>
 800793e:	4a77      	ldr	r2, [pc, #476]	; (8007b1c <_strtod_l+0xc1c>)
 8007940:	4b79      	ldr	r3, [pc, #484]	; (8007b28 <_strtod_l+0xc28>)
 8007942:	0006      	movs	r6, r0
 8007944:	400a      	ands	r2, r1
 8007946:	429a      	cmp	r2, r3
 8007948:	d964      	bls.n	8007a14 <_strtod_l+0xb14>
 800794a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794c:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <_strtod_l+0xc2c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d103      	bne.n	800795a <_strtod_l+0xa5a>
 8007952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007954:	3301      	adds	r3, #1
 8007956:	d100      	bne.n	800795a <_strtod_l+0xa5a>
 8007958:	e508      	b.n	800736c <_strtod_l+0x46c>
 800795a:	2601      	movs	r6, #1
 800795c:	4f73      	ldr	r7, [pc, #460]	; (8007b2c <_strtod_l+0xc2c>)
 800795e:	4276      	negs	r6, r6
 8007960:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007962:	9804      	ldr	r0, [sp, #16]
 8007964:	f001 fbaf 	bl	80090c6 <_Bfree>
 8007968:	990a      	ldr	r1, [sp, #40]	; 0x28
 800796a:	9804      	ldr	r0, [sp, #16]
 800796c:	f001 fbab 	bl	80090c6 <_Bfree>
 8007970:	9905      	ldr	r1, [sp, #20]
 8007972:	9804      	ldr	r0, [sp, #16]
 8007974:	f001 fba7 	bl	80090c6 <_Bfree>
 8007978:	0021      	movs	r1, r4
 800797a:	9804      	ldr	r0, [sp, #16]
 800797c:	f001 fba3 	bl	80090c6 <_Bfree>
 8007980:	e5f4      	b.n	800756c <_strtod_l+0x66c>
 8007982:	2e00      	cmp	r6, #0
 8007984:	d11e      	bne.n	80079c4 <_strtod_l+0xac4>
 8007986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	d121      	bne.n	80079d0 <_strtod_l+0xad0>
 800798c:	9808      	ldr	r0, [sp, #32]
 800798e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007990:	2200      	movs	r2, #0
 8007992:	4b61      	ldr	r3, [pc, #388]	; (8007b18 <_strtod_l+0xc18>)
 8007994:	f7f8 fd60 	bl	8000458 <__aeabi_dcmplt>
 8007998:	2800      	cmp	r0, #0
 800799a:	d11f      	bne.n	80079dc <_strtod_l+0xadc>
 800799c:	9808      	ldr	r0, [sp, #32]
 800799e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a0:	2200      	movs	r2, #0
 80079a2:	4b63      	ldr	r3, [pc, #396]	; (8007b30 <_strtod_l+0xc30>)
 80079a4:	f7f9 fcc4 	bl	8001330 <__aeabi_dmul>
 80079a8:	0005      	movs	r5, r0
 80079aa:	9108      	str	r1, [sp, #32]
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	0612      	lsls	r2, r2, #24
 80079b0:	4694      	mov	ip, r2
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	951e      	str	r5, [sp, #120]	; 0x78
 80079b6:	4463      	add	r3, ip
 80079b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80079ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079be:	9210      	str	r2, [sp, #64]	; 0x40
 80079c0:	9311      	str	r3, [sp, #68]	; 0x44
 80079c2:	e798      	b.n	80078f6 <_strtod_l+0x9f6>
 80079c4:	2e01      	cmp	r6, #1
 80079c6:	d103      	bne.n	80079d0 <_strtod_l+0xad0>
 80079c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d100      	bne.n	80079d0 <_strtod_l+0xad0>
 80079ce:	e562      	b.n	8007496 <_strtod_l+0x596>
 80079d0:	2200      	movs	r2, #0
 80079d2:	4b58      	ldr	r3, [pc, #352]	; (8007b34 <_strtod_l+0xc34>)
 80079d4:	2500      	movs	r5, #0
 80079d6:	9210      	str	r2, [sp, #64]	; 0x40
 80079d8:	9311      	str	r3, [sp, #68]	; 0x44
 80079da:	e78a      	b.n	80078f2 <_strtod_l+0x9f2>
 80079dc:	4b54      	ldr	r3, [pc, #336]	; (8007b30 <_strtod_l+0xc30>)
 80079de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	e7e3      	b.n	80079ac <_strtod_l+0xaac>
 80079e4:	4b52      	ldr	r3, [pc, #328]	; (8007b30 <_strtod_l+0xc30>)
 80079e6:	9808      	ldr	r0, [sp, #32]
 80079e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f9 fca0 	bl	8001330 <__aeabi_dmul>
 80079f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079f2:	0005      	movs	r5, r0
 80079f4:	9108      	str	r1, [sp, #32]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d107      	bne.n	8007a0a <_strtod_l+0xb0a>
 80079fa:	2380      	movs	r3, #128	; 0x80
 80079fc:	061b      	lsls	r3, r3, #24
 80079fe:	18cb      	adds	r3, r1, r3
 8007a00:	9016      	str	r0, [sp, #88]	; 0x58
 8007a02:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a08:	e7d9      	b.n	80079be <_strtod_l+0xabe>
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	9216      	str	r2, [sp, #88]	; 0x58
 8007a10:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a12:	e7f7      	b.n	8007a04 <_strtod_l+0xb04>
 8007a14:	23d4      	movs	r3, #212	; 0xd4
 8007a16:	049b      	lsls	r3, r3, #18
 8007a18:	18cf      	adds	r7, r1, r3
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d19f      	bne.n	8007960 <_strtod_l+0xa60>
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <_strtod_l+0xc1c>)
 8007a22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a24:	970c      	str	r7, [sp, #48]	; 0x30
 8007a26:	403b      	ands	r3, r7
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d199      	bne.n	8007960 <_strtod_l+0xa60>
 8007a2c:	9908      	ldr	r1, [sp, #32]
 8007a2e:	0028      	movs	r0, r5
 8007a30:	f7fa fa54 	bl	8001edc <__aeabi_d2iz>
 8007a34:	f7fa fa88 	bl	8001f48 <__aeabi_i2d>
 8007a38:	000b      	movs	r3, r1
 8007a3a:	0002      	movs	r2, r0
 8007a3c:	9908      	ldr	r1, [sp, #32]
 8007a3e:	0028      	movs	r0, r5
 8007a40:	f7f9 fee8 	bl	8001814 <__aeabi_dsub>
 8007a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a46:	9008      	str	r0, [sp, #32]
 8007a48:	9109      	str	r1, [sp, #36]	; 0x24
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <_strtod_l+0xb58>
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	d102      	bne.n	8007a58 <_strtod_l+0xb58>
 8007a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	d058      	beq.n	8007b0a <_strtod_l+0xc0a>
 8007a58:	9808      	ldr	r0, [sp, #32]
 8007a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a5c:	4a36      	ldr	r2, [pc, #216]	; (8007b38 <_strtod_l+0xc38>)
 8007a5e:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <_strtod_l+0xc3c>)
 8007a60:	f7f8 fcfa 	bl	8000458 <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d000      	beq.n	8007a6a <_strtod_l+0xb6a>
 8007a68:	e489      	b.n	800737e <_strtod_l+0x47e>
 8007a6a:	9808      	ldr	r0, [sp, #32]
 8007a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a6e:	4a34      	ldr	r2, [pc, #208]	; (8007b40 <_strtod_l+0xc40>)
 8007a70:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <_strtod_l+0xc30>)
 8007a72:	f7f8 fd05 	bl	8000480 <__aeabi_dcmpgt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d100      	bne.n	8007a7c <_strtod_l+0xb7c>
 8007a7a:	e771      	b.n	8007960 <_strtod_l+0xa60>
 8007a7c:	e47f      	b.n	800737e <_strtod_l+0x47e>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d02a      	beq.n	8007ada <_strtod_l+0xbda>
 8007a84:	23d4      	movs	r3, #212	; 0xd4
 8007a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a88:	04db      	lsls	r3, r3, #19
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d825      	bhi.n	8007ada <_strtod_l+0xbda>
 8007a8e:	4a2d      	ldr	r2, [pc, #180]	; (8007b44 <_strtod_l+0xc44>)
 8007a90:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <_strtod_l+0xc48>)
 8007a92:	0028      	movs	r0, r5
 8007a94:	9908      	ldr	r1, [sp, #32]
 8007a96:	f7f8 fce9 	bl	800046c <__aeabi_dcmple>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d016      	beq.n	8007acc <_strtod_l+0xbcc>
 8007a9e:	0028      	movs	r0, r5
 8007aa0:	9908      	ldr	r1, [sp, #32]
 8007aa2:	f7f8 fd01 	bl	80004a8 <__aeabi_d2uiz>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d100      	bne.n	8007aac <_strtod_l+0xbac>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f7fa fa86 	bl	8001fbc <__aeabi_ui2d>
 8007ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ab2:	0005      	movs	r5, r0
 8007ab4:	9108      	str	r1, [sp, #32]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d122      	bne.n	8007b00 <_strtod_l+0xc00>
 8007aba:	2380      	movs	r3, #128	; 0x80
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	18cb      	adds	r3, r1, r3
 8007ac0:	9018      	str	r0, [sp, #96]	; 0x60
 8007ac2:	9319      	str	r3, [sp, #100]	; 0x64
 8007ac4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ac8:	9210      	str	r2, [sp, #64]	; 0x40
 8007aca:	9311      	str	r3, [sp, #68]	; 0x44
 8007acc:	22d6      	movs	r2, #214	; 0xd6
 8007ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ad0:	04d2      	lsls	r2, r2, #19
 8007ad2:	189b      	adds	r3, r3, r2
 8007ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8007ada:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007adc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ade:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007ae0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007ae2:	f001 fd89 	bl	80095f8 <__ulp>
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	000b      	movs	r3, r1
 8007aea:	0030      	movs	r0, r6
 8007aec:	0039      	movs	r1, r7
 8007aee:	f7f9 fc1f 	bl	8001330 <__aeabi_dmul>
 8007af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007af6:	f7f8 fcf5 	bl	80004e4 <__aeabi_dadd>
 8007afa:	0006      	movs	r6, r0
 8007afc:	000f      	movs	r7, r1
 8007afe:	e78c      	b.n	8007a1a <_strtod_l+0xb1a>
 8007b00:	0002      	movs	r2, r0
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	9218      	str	r2, [sp, #96]	; 0x60
 8007b06:	9319      	str	r3, [sp, #100]	; 0x64
 8007b08:	e7dc      	b.n	8007ac4 <_strtod_l+0xbc4>
 8007b0a:	4a0b      	ldr	r2, [pc, #44]	; (8007b38 <_strtod_l+0xc38>)
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <_strtod_l+0xc4c>)
 8007b0e:	9808      	ldr	r0, [sp, #32]
 8007b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b12:	f7f8 fca1 	bl	8000458 <__aeabi_dcmplt>
 8007b16:	e7ae      	b.n	8007a76 <_strtod_l+0xb76>
 8007b18:	3ff00000 	.word	0x3ff00000
 8007b1c:	7ff00000 	.word	0x7ff00000
 8007b20:	7fe00000 	.word	0x7fe00000
 8007b24:	fcb00000 	.word	0xfcb00000
 8007b28:	7c9fffff 	.word	0x7c9fffff
 8007b2c:	7fefffff 	.word	0x7fefffff
 8007b30:	3fe00000 	.word	0x3fe00000
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	94a03595 	.word	0x94a03595
 8007b3c:	3fdfffff 	.word	0x3fdfffff
 8007b40:	35afe535 	.word	0x35afe535
 8007b44:	ffc00000 	.word	0xffc00000
 8007b48:	41dfffff 	.word	0x41dfffff
 8007b4c:	3fcfffff 	.word	0x3fcfffff

08007b50 <_strtod_r>:
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <_strtod_r+0x14>)
 8007b52:	b510      	push	{r4, lr}
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d100      	bne.n	8007b5e <_strtod_r+0xe>
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <_strtod_r+0x18>)
 8007b5e:	f7ff f9cf 	bl	8006f00 <_strtod_l>
 8007b62:	bd10      	pop	{r4, pc}
 8007b64:	20000184 	.word	0x20000184
 8007b68:	200001e8 	.word	0x200001e8

08007b6c <_strtol_l.isra.0>:
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6e:	001f      	movs	r7, r3
 8007b70:	000e      	movs	r6, r1
 8007b72:	b087      	sub	sp, #28
 8007b74:	9005      	str	r0, [sp, #20]
 8007b76:	9101      	str	r1, [sp, #4]
 8007b78:	9202      	str	r2, [sp, #8]
 8007b7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b7c:	7834      	ldrb	r4, [r6, #0]
 8007b7e:	f001 fa32 	bl	8008fe6 <__locale_ctype_ptr_l>
 8007b82:	2208      	movs	r2, #8
 8007b84:	1900      	adds	r0, r0, r4
 8007b86:	7843      	ldrb	r3, [r0, #1]
 8007b88:	1c75      	adds	r5, r6, #1
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	d136      	bne.n	8007bfc <_strtol_l.isra.0+0x90>
 8007b8e:	2c2d      	cmp	r4, #45	; 0x2d
 8007b90:	d136      	bne.n	8007c00 <_strtol_l.isra.0+0x94>
 8007b92:	1cb5      	adds	r5, r6, #2
 8007b94:	7874      	ldrb	r4, [r6, #1]
 8007b96:	2601      	movs	r6, #1
 8007b98:	2f00      	cmp	r7, #0
 8007b9a:	d062      	beq.n	8007c62 <_strtol_l.isra.0+0xf6>
 8007b9c:	2f10      	cmp	r7, #16
 8007b9e:	d109      	bne.n	8007bb4 <_strtol_l.isra.0+0x48>
 8007ba0:	2c30      	cmp	r4, #48	; 0x30
 8007ba2:	d107      	bne.n	8007bb4 <_strtol_l.isra.0+0x48>
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	782b      	ldrb	r3, [r5, #0]
 8007ba8:	4393      	bics	r3, r2
 8007baa:	2b58      	cmp	r3, #88	; 0x58
 8007bac:	d154      	bne.n	8007c58 <_strtol_l.isra.0+0xec>
 8007bae:	2710      	movs	r7, #16
 8007bb0:	786c      	ldrb	r4, [r5, #1]
 8007bb2:	3502      	adds	r5, #2
 8007bb4:	4b2d      	ldr	r3, [pc, #180]	; (8007c6c <_strtol_l.isra.0+0x100>)
 8007bb6:	0039      	movs	r1, r7
 8007bb8:	18f3      	adds	r3, r6, r3
 8007bba:	0018      	movs	r0, r3
 8007bbc:	9303      	str	r3, [sp, #12]
 8007bbe:	f7f8 fb45 	bl	800024c <__aeabi_uidivmod>
 8007bc2:	9104      	str	r1, [sp, #16]
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	4249      	negs	r1, r1
 8007bca:	0002      	movs	r2, r0
 8007bcc:	468c      	mov	ip, r1
 8007bce:	0018      	movs	r0, r3
 8007bd0:	0021      	movs	r1, r4
 8007bd2:	3930      	subs	r1, #48	; 0x30
 8007bd4:	2909      	cmp	r1, #9
 8007bd6:	d81a      	bhi.n	8007c0e <_strtol_l.isra.0+0xa2>
 8007bd8:	000c      	movs	r4, r1
 8007bda:	42a7      	cmp	r7, r4
 8007bdc:	dd23      	ble.n	8007c26 <_strtol_l.isra.0+0xba>
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	d009      	beq.n	8007bf6 <_strtol_l.isra.0+0x8a>
 8007be2:	4663      	mov	r3, ip
 8007be4:	4282      	cmp	r2, r0
 8007be6:	d306      	bcc.n	8007bf6 <_strtol_l.isra.0+0x8a>
 8007be8:	d102      	bne.n	8007bf0 <_strtol_l.isra.0+0x84>
 8007bea:	9904      	ldr	r1, [sp, #16]
 8007bec:	42a1      	cmp	r1, r4
 8007bee:	db02      	blt.n	8007bf6 <_strtol_l.isra.0+0x8a>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4378      	muls	r0, r7
 8007bf4:	1820      	adds	r0, r4, r0
 8007bf6:	782c      	ldrb	r4, [r5, #0]
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	e7e9      	b.n	8007bd0 <_strtol_l.isra.0+0x64>
 8007bfc:	002e      	movs	r6, r5
 8007bfe:	e7bc      	b.n	8007b7a <_strtol_l.isra.0+0xe>
 8007c00:	2c2b      	cmp	r4, #43	; 0x2b
 8007c02:	d001      	beq.n	8007c08 <_strtol_l.isra.0+0x9c>
 8007c04:	001e      	movs	r6, r3
 8007c06:	e7c7      	b.n	8007b98 <_strtol_l.isra.0+0x2c>
 8007c08:	1cb5      	adds	r5, r6, #2
 8007c0a:	7874      	ldrb	r4, [r6, #1]
 8007c0c:	e7fa      	b.n	8007c04 <_strtol_l.isra.0+0x98>
 8007c0e:	0021      	movs	r1, r4
 8007c10:	3941      	subs	r1, #65	; 0x41
 8007c12:	2919      	cmp	r1, #25
 8007c14:	d801      	bhi.n	8007c1a <_strtol_l.isra.0+0xae>
 8007c16:	3c37      	subs	r4, #55	; 0x37
 8007c18:	e7df      	b.n	8007bda <_strtol_l.isra.0+0x6e>
 8007c1a:	0021      	movs	r1, r4
 8007c1c:	3961      	subs	r1, #97	; 0x61
 8007c1e:	2919      	cmp	r1, #25
 8007c20:	d801      	bhi.n	8007c26 <_strtol_l.isra.0+0xba>
 8007c22:	3c57      	subs	r4, #87	; 0x57
 8007c24:	e7d9      	b.n	8007bda <_strtol_l.isra.0+0x6e>
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	d108      	bne.n	8007c3c <_strtol_l.isra.0+0xd0>
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	3323      	adds	r3, #35	; 0x23
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	9803      	ldr	r0, [sp, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <_strtol_l.isra.0+0xe0>
 8007c38:	b007      	add	sp, #28
 8007c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	d000      	beq.n	8007c42 <_strtol_l.isra.0+0xd6>
 8007c40:	4240      	negs	r0, r0
 8007c42:	9a02      	ldr	r2, [sp, #8]
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	d0f7      	beq.n	8007c38 <_strtol_l.isra.0+0xcc>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <_strtol_l.isra.0+0xe4>
 8007c4c:	1e6b      	subs	r3, r5, #1
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	9b02      	ldr	r3, [sp, #8]
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e7ef      	b.n	8007c38 <_strtol_l.isra.0+0xcc>
 8007c58:	2430      	movs	r4, #48	; 0x30
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d1aa      	bne.n	8007bb4 <_strtol_l.isra.0+0x48>
 8007c5e:	2708      	movs	r7, #8
 8007c60:	e7a8      	b.n	8007bb4 <_strtol_l.isra.0+0x48>
 8007c62:	2c30      	cmp	r4, #48	; 0x30
 8007c64:	d09e      	beq.n	8007ba4 <_strtol_l.isra.0+0x38>
 8007c66:	270a      	movs	r7, #10
 8007c68:	e7a4      	b.n	8007bb4 <_strtol_l.isra.0+0x48>
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	7fffffff 	.word	0x7fffffff

08007c70 <_strtol_r>:
 8007c70:	b513      	push	{r0, r1, r4, lr}
 8007c72:	4c05      	ldr	r4, [pc, #20]	; (8007c88 <_strtol_r+0x18>)
 8007c74:	6824      	ldr	r4, [r4, #0]
 8007c76:	6a24      	ldr	r4, [r4, #32]
 8007c78:	2c00      	cmp	r4, #0
 8007c7a:	d100      	bne.n	8007c7e <_strtol_r+0xe>
 8007c7c:	4c03      	ldr	r4, [pc, #12]	; (8007c8c <_strtol_r+0x1c>)
 8007c7e:	9400      	str	r4, [sp, #0]
 8007c80:	f7ff ff74 	bl	8007b6c <_strtol_l.isra.0>
 8007c84:	bd16      	pop	{r1, r2, r4, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	20000184 	.word	0x20000184
 8007c8c:	200001e8 	.word	0x200001e8

08007c90 <strtol>:
 8007c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c92:	0013      	movs	r3, r2
 8007c94:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <strtol+0x20>)
 8007c96:	0005      	movs	r5, r0
 8007c98:	6810      	ldr	r0, [r2, #0]
 8007c9a:	6a04      	ldr	r4, [r0, #32]
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	d100      	bne.n	8007ca2 <strtol+0x12>
 8007ca0:	4c04      	ldr	r4, [pc, #16]	; (8007cb4 <strtol+0x24>)
 8007ca2:	000a      	movs	r2, r1
 8007ca4:	9400      	str	r4, [sp, #0]
 8007ca6:	0029      	movs	r1, r5
 8007ca8:	f7ff ff60 	bl	8007b6c <_strtol_l.isra.0>
 8007cac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	20000184 	.word	0x20000184
 8007cb4:	200001e8 	.word	0x200001e8

08007cb8 <quorem>:
 8007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cba:	6903      	ldr	r3, [r0, #16]
 8007cbc:	690c      	ldr	r4, [r1, #16]
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	0007      	movs	r7, r0
 8007cc2:	9105      	str	r1, [sp, #20]
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	db65      	blt.n	8007d96 <quorem+0xde>
 8007cca:	000b      	movs	r3, r1
 8007ccc:	3c01      	subs	r4, #1
 8007cce:	3314      	adds	r3, #20
 8007cd0:	00a5      	lsls	r5, r4, #2
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	195b      	adds	r3, r3, r5
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	0003      	movs	r3, r0
 8007cda:	3314      	adds	r3, #20
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	195d      	adds	r5, r3, r5
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	6828      	ldr	r0, [r5, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	f7f8 fa29 	bl	8000140 <__udivsi3>
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	42b0      	cmp	r0, r6
 8007cf2:	d029      	beq.n	8007d48 <quorem+0x90>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	9802      	ldr	r0, [sp, #8]
 8007cf8:	469c      	mov	ip, r3
 8007cfa:	9606      	str	r6, [sp, #24]
 8007cfc:	4662      	mov	r2, ip
 8007cfe:	ca08      	ldmia	r2!, {r3}
 8007d00:	4694      	mov	ip, r2
 8007d02:	9a01      	ldr	r2, [sp, #4]
 8007d04:	b299      	uxth	r1, r3
 8007d06:	4351      	muls	r1, r2
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	4353      	muls	r3, r2
 8007d0c:	1989      	adds	r1, r1, r6
 8007d0e:	0c0a      	lsrs	r2, r1, #16
 8007d10:	189b      	adds	r3, r3, r2
 8007d12:	9307      	str	r3, [sp, #28]
 8007d14:	0c1e      	lsrs	r6, r3, #16
 8007d16:	6803      	ldr	r3, [r0, #0]
 8007d18:	b289      	uxth	r1, r1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	18d2      	adds	r2, r2, r3
 8007d20:	6803      	ldr	r3, [r0, #0]
 8007d22:	1a52      	subs	r2, r2, r1
 8007d24:	0c19      	lsrs	r1, r3, #16
 8007d26:	466b      	mov	r3, sp
 8007d28:	8b9b      	ldrh	r3, [r3, #28]
 8007d2a:	1acb      	subs	r3, r1, r3
 8007d2c:	1411      	asrs	r1, r2, #16
 8007d2e:	185b      	adds	r3, r3, r1
 8007d30:	1419      	asrs	r1, r3, #16
 8007d32:	b292      	uxth	r2, r2
 8007d34:	041b      	lsls	r3, r3, #16
 8007d36:	431a      	orrs	r2, r3
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	9106      	str	r1, [sp, #24]
 8007d3c:	c004      	stmia	r0!, {r2}
 8007d3e:	4563      	cmp	r3, ip
 8007d40:	d2dc      	bcs.n	8007cfc <quorem+0x44>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02d      	beq.n	8007da4 <quorem+0xec>
 8007d48:	9905      	ldr	r1, [sp, #20]
 8007d4a:	0038      	movs	r0, r7
 8007d4c:	f001 fbd6 	bl	80094fc <__mcmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	db1f      	blt.n	8007d94 <quorem+0xdc>
 8007d54:	2500      	movs	r5, #0
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	9802      	ldr	r0, [sp, #8]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	6802      	ldr	r2, [r0, #0]
 8007d62:	c908      	ldmia	r1!, {r3}
 8007d64:	b292      	uxth	r2, r2
 8007d66:	1955      	adds	r5, r2, r5
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	1aaa      	subs	r2, r5, r2
 8007d6c:	6805      	ldr	r5, [r0, #0]
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	0c2d      	lsrs	r5, r5, #16
 8007d72:	1aeb      	subs	r3, r5, r3
 8007d74:	1415      	asrs	r5, r2, #16
 8007d76:	195b      	adds	r3, r3, r5
 8007d78:	141d      	asrs	r5, r3, #16
 8007d7a:	b292      	uxth	r2, r2
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	c008      	stmia	r0!, {r3}
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	428b      	cmp	r3, r1
 8007d86:	d2eb      	bcs.n	8007d60 <quorem+0xa8>
 8007d88:	9a02      	ldr	r2, [sp, #8]
 8007d8a:	00a3      	lsls	r3, r4, #2
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d011      	beq.n	8007db8 <quorem+0x100>
 8007d94:	9e01      	ldr	r6, [sp, #4]
 8007d96:	0030      	movs	r0, r6
 8007d98:	b009      	add	sp, #36	; 0x24
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <quorem+0xf4>
 8007da2:	3c01      	subs	r4, #1
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	3d04      	subs	r5, #4
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	d3f7      	bcc.n	8007d9c <quorem+0xe4>
 8007dac:	613c      	str	r4, [r7, #16]
 8007dae:	e7cb      	b.n	8007d48 <quorem+0x90>
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	d104      	bne.n	8007dc0 <quorem+0x108>
 8007db6:	3c01      	subs	r4, #1
 8007db8:	9a02      	ldr	r2, [sp, #8]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3f7      	bcc.n	8007db0 <quorem+0xf8>
 8007dc0:	613c      	str	r4, [r7, #16]
 8007dc2:	e7e7      	b.n	8007d94 <quorem+0xdc>

08007dc4 <_dtoa_r>:
 8007dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc6:	0016      	movs	r6, r2
 8007dc8:	001f      	movs	r7, r3
 8007dca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007dcc:	b09b      	sub	sp, #108	; 0x6c
 8007dce:	9002      	str	r0, [sp, #8]
 8007dd0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007dd2:	9606      	str	r6, [sp, #24]
 8007dd4:	9707      	str	r7, [sp, #28]
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d108      	bne.n	8007dec <_dtoa_r+0x28>
 8007dda:	2010      	movs	r0, #16
 8007ddc:	f001 f914 	bl	8009008 <malloc>
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	6258      	str	r0, [r3, #36]	; 0x24
 8007de4:	6044      	str	r4, [r0, #4]
 8007de6:	6084      	str	r4, [r0, #8]
 8007de8:	6004      	str	r4, [r0, #0]
 8007dea:	60c4      	str	r4, [r0, #12]
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	6819      	ldr	r1, [r3, #0]
 8007df2:	2900      	cmp	r1, #0
 8007df4:	d00b      	beq.n	8007e0e <_dtoa_r+0x4a>
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4093      	lsls	r3, r2
 8007dfc:	604a      	str	r2, [r1, #4]
 8007dfe:	608b      	str	r3, [r1, #8]
 8007e00:	9802      	ldr	r0, [sp, #8]
 8007e02:	f001 f960 	bl	80090c6 <_Bfree>
 8007e06:	2200      	movs	r2, #0
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	da20      	bge.n	8007e54 <_dtoa_r+0x90>
 8007e12:	2301      	movs	r3, #1
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	007b      	lsls	r3, r7, #1
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	9307      	str	r3, [sp, #28]
 8007e1c:	9c07      	ldr	r4, [sp, #28]
 8007e1e:	4bb2      	ldr	r3, [pc, #712]	; (80080e8 <_dtoa_r+0x324>)
 8007e20:	0022      	movs	r2, r4
 8007e22:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e24:	401a      	ands	r2, r3
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d117      	bne.n	8007e5a <_dtoa_r+0x96>
 8007e2a:	4bb0      	ldr	r3, [pc, #704]	; (80080ec <_dtoa_r+0x328>)
 8007e2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <_dtoa_r+0x7a>
 8007e36:	0324      	lsls	r4, r4, #12
 8007e38:	d101      	bne.n	8007e3e <_dtoa_r+0x7a>
 8007e3a:	f000 fd87 	bl	800894c <_dtoa_r+0xb88>
 8007e3e:	4bac      	ldr	r3, [pc, #688]	; (80080f0 <_dtoa_r+0x32c>)
 8007e40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e42:	9308      	str	r3, [sp, #32]
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	d002      	beq.n	8007e4e <_dtoa_r+0x8a>
 8007e48:	4baa      	ldr	r3, [pc, #680]	; (80080f4 <_dtoa_r+0x330>)
 8007e4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	9808      	ldr	r0, [sp, #32]
 8007e50:	b01b      	add	sp, #108	; 0x6c
 8007e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e54:	2300      	movs	r3, #0
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	e7e0      	b.n	8007e1c <_dtoa_r+0x58>
 8007e5a:	9e06      	ldr	r6, [sp, #24]
 8007e5c:	9f07      	ldr	r7, [sp, #28]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2300      	movs	r3, #0
 8007e62:	0030      	movs	r0, r6
 8007e64:	0039      	movs	r1, r7
 8007e66:	f7f8 faf1 	bl	800044c <__aeabi_dcmpeq>
 8007e6a:	1e05      	subs	r5, r0, #0
 8007e6c:	d00b      	beq.n	8007e86 <_dtoa_r+0xc2>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	4ba0      	ldr	r3, [pc, #640]	; (80080f8 <_dtoa_r+0x334>)
 8007e76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d0e7      	beq.n	8007e4e <_dtoa_r+0x8a>
 8007e7e:	4a9f      	ldr	r2, [pc, #636]	; (80080fc <_dtoa_r+0x338>)
 8007e80:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007e82:	600a      	str	r2, [r1, #0]
 8007e84:	e7e3      	b.n	8007e4e <_dtoa_r+0x8a>
 8007e86:	ab18      	add	r3, sp, #96	; 0x60
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	ab19      	add	r3, sp, #100	; 0x64
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	0032      	movs	r2, r6
 8007e90:	003b      	movs	r3, r7
 8007e92:	9802      	ldr	r0, [sp, #8]
 8007e94:	f001 fc22 	bl	80096dc <__d2b>
 8007e98:	0063      	lsls	r3, r4, #1
 8007e9a:	9003      	str	r0, [sp, #12]
 8007e9c:	0d5b      	lsrs	r3, r3, #21
 8007e9e:	d074      	beq.n	8007f8a <_dtoa_r+0x1c6>
 8007ea0:	033a      	lsls	r2, r7, #12
 8007ea2:	4c97      	ldr	r4, [pc, #604]	; (8008100 <_dtoa_r+0x33c>)
 8007ea4:	0b12      	lsrs	r2, r2, #12
 8007ea6:	4314      	orrs	r4, r2
 8007ea8:	0021      	movs	r1, r4
 8007eaa:	4a96      	ldr	r2, [pc, #600]	; (8008104 <_dtoa_r+0x340>)
 8007eac:	0030      	movs	r0, r6
 8007eae:	9516      	str	r5, [sp, #88]	; 0x58
 8007eb0:	189e      	adds	r6, r3, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4b94      	ldr	r3, [pc, #592]	; (8008108 <_dtoa_r+0x344>)
 8007eb6:	f7f9 fcad 	bl	8001814 <__aeabi_dsub>
 8007eba:	4a94      	ldr	r2, [pc, #592]	; (800810c <_dtoa_r+0x348>)
 8007ebc:	4b94      	ldr	r3, [pc, #592]	; (8008110 <_dtoa_r+0x34c>)
 8007ebe:	f7f9 fa37 	bl	8001330 <__aeabi_dmul>
 8007ec2:	4a94      	ldr	r2, [pc, #592]	; (8008114 <_dtoa_r+0x350>)
 8007ec4:	4b94      	ldr	r3, [pc, #592]	; (8008118 <_dtoa_r+0x354>)
 8007ec6:	f7f8 fb0d 	bl	80004e4 <__aeabi_dadd>
 8007eca:	0004      	movs	r4, r0
 8007ecc:	0030      	movs	r0, r6
 8007ece:	000d      	movs	r5, r1
 8007ed0:	f7fa f83a 	bl	8001f48 <__aeabi_i2d>
 8007ed4:	4a91      	ldr	r2, [pc, #580]	; (800811c <_dtoa_r+0x358>)
 8007ed6:	4b92      	ldr	r3, [pc, #584]	; (8008120 <_dtoa_r+0x35c>)
 8007ed8:	f7f9 fa2a 	bl	8001330 <__aeabi_dmul>
 8007edc:	0002      	movs	r2, r0
 8007ede:	000b      	movs	r3, r1
 8007ee0:	0020      	movs	r0, r4
 8007ee2:	0029      	movs	r1, r5
 8007ee4:	f7f8 fafe 	bl	80004e4 <__aeabi_dadd>
 8007ee8:	0004      	movs	r4, r0
 8007eea:	000d      	movs	r5, r1
 8007eec:	f7f9 fff6 	bl	8001edc <__aeabi_d2iz>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	0007      	movs	r7, r0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	0020      	movs	r0, r4
 8007ef8:	0029      	movs	r1, r5
 8007efa:	f7f8 faad 	bl	8000458 <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d009      	beq.n	8007f16 <_dtoa_r+0x152>
 8007f02:	0038      	movs	r0, r7
 8007f04:	f7fa f820 	bl	8001f48 <__aeabi_i2d>
 8007f08:	002b      	movs	r3, r5
 8007f0a:	0022      	movs	r2, r4
 8007f0c:	f7f8 fa9e 	bl	800044c <__aeabi_dcmpeq>
 8007f10:	4243      	negs	r3, r0
 8007f12:	4158      	adcs	r0, r3
 8007f14:	1a3f      	subs	r7, r7, r0
 8007f16:	2301      	movs	r3, #1
 8007f18:	9314      	str	r3, [sp, #80]	; 0x50
 8007f1a:	2f16      	cmp	r7, #22
 8007f1c:	d80d      	bhi.n	8007f3a <_dtoa_r+0x176>
 8007f1e:	4981      	ldr	r1, [pc, #516]	; (8008124 <_dtoa_r+0x360>)
 8007f20:	00fb      	lsls	r3, r7, #3
 8007f22:	18c9      	adds	r1, r1, r3
 8007f24:	6808      	ldr	r0, [r1, #0]
 8007f26:	6849      	ldr	r1, [r1, #4]
 8007f28:	9a06      	ldr	r2, [sp, #24]
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	f7f8 faa8 	bl	8000480 <__aeabi_dcmpgt>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d046      	beq.n	8007fc2 <_dtoa_r+0x1fe>
 8007f34:	2300      	movs	r3, #0
 8007f36:	3f01      	subs	r7, #1
 8007f38:	9314      	str	r3, [sp, #80]	; 0x50
 8007f3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f3c:	1b9e      	subs	r6, r3, r6
 8007f3e:	2300      	movs	r3, #0
 8007f40:	930a      	str	r3, [sp, #40]	; 0x28
 8007f42:	0033      	movs	r3, r6
 8007f44:	3b01      	subs	r3, #1
 8007f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f48:	d504      	bpl.n	8007f54 <_dtoa_r+0x190>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	1b9b      	subs	r3, r3, r6
 8007f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f50:	2300      	movs	r3, #0
 8007f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	db36      	blt.n	8007fc6 <_dtoa_r+0x202>
 8007f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5a:	9711      	str	r7, [sp, #68]	; 0x44
 8007f5c:	19db      	adds	r3, r3, r7
 8007f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f60:	2300      	movs	r3, #0
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f66:	2401      	movs	r4, #1
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d900      	bls.n	8007f6e <_dtoa_r+0x1aa>
 8007f6c:	e084      	b.n	8008078 <_dtoa_r+0x2b4>
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	dd02      	ble.n	8007f78 <_dtoa_r+0x1b4>
 8007f72:	2400      	movs	r4, #0
 8007f74:	3b04      	subs	r3, #4
 8007f76:	9320      	str	r3, [sp, #128]	; 0x80
 8007f78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f7a:	1e98      	subs	r0, r3, #2
 8007f7c:	2803      	cmp	r0, #3
 8007f7e:	d900      	bls.n	8007f82 <_dtoa_r+0x1be>
 8007f80:	e084      	b.n	800808c <_dtoa_r+0x2c8>
 8007f82:	f7f8 f8c9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007f86:	7775      	.short	0x7775
 8007f88:	6a28      	.short	0x6a28
 8007f8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f8e:	189e      	adds	r6, r3, r2
 8007f90:	4b65      	ldr	r3, [pc, #404]	; (8008128 <_dtoa_r+0x364>)
 8007f92:	18f2      	adds	r2, r6, r3
 8007f94:	2a20      	cmp	r2, #32
 8007f96:	dd0f      	ble.n	8007fb8 <_dtoa_r+0x1f4>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	409c      	lsls	r4, r3
 8007f9e:	4b63      	ldr	r3, [pc, #396]	; (800812c <_dtoa_r+0x368>)
 8007fa0:	9806      	ldr	r0, [sp, #24]
 8007fa2:	18f3      	adds	r3, r6, r3
 8007fa4:	40d8      	lsrs	r0, r3
 8007fa6:	4320      	orrs	r0, r4
 8007fa8:	f7fa f808 	bl	8001fbc <__aeabi_ui2d>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4c60      	ldr	r4, [pc, #384]	; (8008130 <_dtoa_r+0x36c>)
 8007fb0:	3e01      	subs	r6, #1
 8007fb2:	1909      	adds	r1, r1, r4
 8007fb4:	9316      	str	r3, [sp, #88]	; 0x58
 8007fb6:	e77c      	b.n	8007eb2 <_dtoa_r+0xee>
 8007fb8:	2320      	movs	r3, #32
 8007fba:	9806      	ldr	r0, [sp, #24]
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	4098      	lsls	r0, r3
 8007fc0:	e7f2      	b.n	8007fa8 <_dtoa_r+0x1e4>
 8007fc2:	9014      	str	r0, [sp, #80]	; 0x50
 8007fc4:	e7b9      	b.n	8007f3a <_dtoa_r+0x176>
 8007fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc8:	1bdb      	subs	r3, r3, r7
 8007fca:	930a      	str	r3, [sp, #40]	; 0x28
 8007fcc:	427b      	negs	r3, r7
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8007fd4:	e7c6      	b.n	8007f64 <_dtoa_r+0x1a0>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8007fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dd59      	ble.n	8008094 <_dtoa_r+0x2d0>
 8007fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	9a02      	ldr	r2, [sp, #8]
 8007fe6:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	606a      	str	r2, [r5, #4]
 8007fec:	3204      	adds	r2, #4
 8007fee:	0010      	movs	r0, r2
 8007ff0:	3014      	adds	r0, #20
 8007ff2:	6869      	ldr	r1, [r5, #4]
 8007ff4:	4298      	cmp	r0, r3
 8007ff6:	d952      	bls.n	800809e <_dtoa_r+0x2da>
 8007ff8:	9802      	ldr	r0, [sp, #8]
 8007ffa:	f001 f82c 	bl	8009056 <_Balloc>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	6028      	str	r0, [r5, #0]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	9308      	str	r3, [sp, #32]
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	2b0e      	cmp	r3, #14
 800800c:	d900      	bls.n	8008010 <_dtoa_r+0x24c>
 800800e:	e10a      	b.n	8008226 <_dtoa_r+0x462>
 8008010:	2c00      	cmp	r4, #0
 8008012:	d100      	bne.n	8008016 <_dtoa_r+0x252>
 8008014:	e107      	b.n	8008226 <_dtoa_r+0x462>
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	9c07      	ldr	r4, [sp, #28]
 800801a:	9312      	str	r3, [sp, #72]	; 0x48
 800801c:	9413      	str	r4, [sp, #76]	; 0x4c
 800801e:	2f00      	cmp	r7, #0
 8008020:	dc00      	bgt.n	8008024 <_dtoa_r+0x260>
 8008022:	e089      	b.n	8008138 <_dtoa_r+0x374>
 8008024:	210f      	movs	r1, #15
 8008026:	003a      	movs	r2, r7
 8008028:	4b3e      	ldr	r3, [pc, #248]	; (8008124 <_dtoa_r+0x360>)
 800802a:	400a      	ands	r2, r1
 800802c:	00d2      	lsls	r2, r2, #3
 800802e:	189b      	adds	r3, r3, r2
 8008030:	681d      	ldr	r5, [r3, #0]
 8008032:	685e      	ldr	r6, [r3, #4]
 8008034:	2302      	movs	r3, #2
 8008036:	113c      	asrs	r4, r7, #4
 8008038:	930e      	str	r3, [sp, #56]	; 0x38
 800803a:	06e3      	lsls	r3, r4, #27
 800803c:	d50b      	bpl.n	8008056 <_dtoa_r+0x292>
 800803e:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <_dtoa_r+0x370>)
 8008040:	400c      	ands	r4, r1
 8008042:	6a1a      	ldr	r2, [r3, #32]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008048:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800804a:	f7f8 fd67 	bl	8000b1c <__aeabi_ddiv>
 800804e:	2303      	movs	r3, #3
 8008050:	9006      	str	r0, [sp, #24]
 8008052:	9107      	str	r1, [sp, #28]
 8008054:	930e      	str	r3, [sp, #56]	; 0x38
 8008056:	2300      	movs	r3, #0
 8008058:	e03a      	b.n	80080d0 <_dtoa_r+0x30c>
 800805a:	2301      	movs	r3, #1
 800805c:	930d      	str	r3, [sp, #52]	; 0x34
 800805e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008060:	18fb      	adds	r3, r7, r3
 8008062:	930c      	str	r3, [sp, #48]	; 0x30
 8008064:	3301      	adds	r3, #1
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	dcbb      	bgt.n	8007fe4 <_dtoa_r+0x220>
 800806c:	2301      	movs	r3, #1
 800806e:	e7b9      	b.n	8007fe4 <_dtoa_r+0x220>
 8008070:	2300      	movs	r3, #0
 8008072:	e7b1      	b.n	8007fd8 <_dtoa_r+0x214>
 8008074:	2300      	movs	r3, #0
 8008076:	e7f1      	b.n	800805c <_dtoa_r+0x298>
 8008078:	2300      	movs	r3, #0
 800807a:	940d      	str	r4, [sp, #52]	; 0x34
 800807c:	9320      	str	r3, [sp, #128]	; 0x80
 800807e:	3b01      	subs	r3, #1
 8008080:	2200      	movs	r2, #0
 8008082:	930c      	str	r3, [sp, #48]	; 0x30
 8008084:	9309      	str	r3, [sp, #36]	; 0x24
 8008086:	3313      	adds	r3, #19
 8008088:	9221      	str	r2, [sp, #132]	; 0x84
 800808a:	e7ab      	b.n	8007fe4 <_dtoa_r+0x220>
 800808c:	2301      	movs	r3, #1
 800808e:	930d      	str	r3, [sp, #52]	; 0x34
 8008090:	3b02      	subs	r3, #2
 8008092:	e7f5      	b.n	8008080 <_dtoa_r+0x2bc>
 8008094:	2301      	movs	r3, #1
 8008096:	930c      	str	r3, [sp, #48]	; 0x30
 8008098:	9309      	str	r3, [sp, #36]	; 0x24
 800809a:	001a      	movs	r2, r3
 800809c:	e7f4      	b.n	8008088 <_dtoa_r+0x2c4>
 800809e:	3101      	adds	r1, #1
 80080a0:	6069      	str	r1, [r5, #4]
 80080a2:	0052      	lsls	r2, r2, #1
 80080a4:	e7a3      	b.n	8007fee <_dtoa_r+0x22a>
 80080a6:	2301      	movs	r3, #1
 80080a8:	421c      	tst	r4, r3
 80080aa:	d00e      	beq.n	80080ca <_dtoa_r+0x306>
 80080ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <_dtoa_r+0x370>)
 80080b0:	3301      	adds	r3, #1
 80080b2:	930e      	str	r3, [sp, #56]	; 0x38
 80080b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080b6:	0028      	movs	r0, r5
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	189b      	adds	r3, r3, r2
 80080bc:	0031      	movs	r1, r6
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f7f9 f935 	bl	8001330 <__aeabi_dmul>
 80080c6:	0005      	movs	r5, r0
 80080c8:	000e      	movs	r6, r1
 80080ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080cc:	1064      	asrs	r4, r4, #1
 80080ce:	3301      	adds	r3, #1
 80080d0:	9310      	str	r3, [sp, #64]	; 0x40
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	d1e7      	bne.n	80080a6 <_dtoa_r+0x2e2>
 80080d6:	9806      	ldr	r0, [sp, #24]
 80080d8:	9907      	ldr	r1, [sp, #28]
 80080da:	002a      	movs	r2, r5
 80080dc:	0033      	movs	r3, r6
 80080de:	f7f8 fd1d 	bl	8000b1c <__aeabi_ddiv>
 80080e2:	9006      	str	r0, [sp, #24]
 80080e4:	9107      	str	r1, [sp, #28]
 80080e6:	e042      	b.n	800816e <_dtoa_r+0x3aa>
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	0000270f 	.word	0x0000270f
 80080f0:	08009fb1 	.word	0x08009fb1
 80080f4:	08009fb4 	.word	0x08009fb4
 80080f8:	08009f29 	.word	0x08009f29
 80080fc:	08009f2a 	.word	0x08009f2a
 8008100:	3ff00000 	.word	0x3ff00000
 8008104:	fffffc01 	.word	0xfffffc01
 8008108:	3ff80000 	.word	0x3ff80000
 800810c:	636f4361 	.word	0x636f4361
 8008110:	3fd287a7 	.word	0x3fd287a7
 8008114:	8b60c8b3 	.word	0x8b60c8b3
 8008118:	3fc68a28 	.word	0x3fc68a28
 800811c:	509f79fb 	.word	0x509f79fb
 8008120:	3fd34413 	.word	0x3fd34413
 8008124:	08009fe8 	.word	0x08009fe8
 8008128:	00000432 	.word	0x00000432
 800812c:	00000412 	.word	0x00000412
 8008130:	fe100000 	.word	0xfe100000
 8008134:	08009fc0 	.word	0x08009fc0
 8008138:	2302      	movs	r3, #2
 800813a:	930e      	str	r3, [sp, #56]	; 0x38
 800813c:	2f00      	cmp	r7, #0
 800813e:	d016      	beq.n	800816e <_dtoa_r+0x3aa>
 8008140:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008142:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008144:	427c      	negs	r4, r7
 8008146:	330d      	adds	r3, #13
 8008148:	4023      	ands	r3, r4
 800814a:	4ace      	ldr	r2, [pc, #824]	; (8008484 <_dtoa_r+0x6c0>)
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	18d3      	adds	r3, r2, r3
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f7f9 f8ec 	bl	8001330 <__aeabi_dmul>
 8008158:	2300      	movs	r3, #0
 800815a:	2601      	movs	r6, #1
 800815c:	001d      	movs	r5, r3
 800815e:	9006      	str	r0, [sp, #24]
 8008160:	9107      	str	r1, [sp, #28]
 8008162:	1124      	asrs	r4, r4, #4
 8008164:	2c00      	cmp	r4, #0
 8008166:	d000      	beq.n	800816a <_dtoa_r+0x3a6>
 8008168:	e08c      	b.n	8008284 <_dtoa_r+0x4c0>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1b9      	bne.n	80080e2 <_dtoa_r+0x31e>
 800816e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008170:	2b00      	cmp	r3, #0
 8008172:	d100      	bne.n	8008176 <_dtoa_r+0x3b2>
 8008174:	e096      	b.n	80082a4 <_dtoa_r+0x4e0>
 8008176:	9c06      	ldr	r4, [sp, #24]
 8008178:	9d07      	ldr	r5, [sp, #28]
 800817a:	2200      	movs	r2, #0
 800817c:	4bc2      	ldr	r3, [pc, #776]	; (8008488 <_dtoa_r+0x6c4>)
 800817e:	0020      	movs	r0, r4
 8008180:	0029      	movs	r1, r5
 8008182:	f7f8 f969 	bl	8000458 <__aeabi_dcmplt>
 8008186:	2800      	cmp	r0, #0
 8008188:	d100      	bne.n	800818c <_dtoa_r+0x3c8>
 800818a:	e08b      	b.n	80082a4 <_dtoa_r+0x4e0>
 800818c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d100      	bne.n	8008194 <_dtoa_r+0x3d0>
 8008192:	e087      	b.n	80082a4 <_dtoa_r+0x4e0>
 8008194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd41      	ble.n	800821e <_dtoa_r+0x45a>
 800819a:	4bbc      	ldr	r3, [pc, #752]	; (800848c <_dtoa_r+0x6c8>)
 800819c:	2200      	movs	r2, #0
 800819e:	0020      	movs	r0, r4
 80081a0:	0029      	movs	r1, r5
 80081a2:	f7f9 f8c5 	bl	8001330 <__aeabi_dmul>
 80081a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a8:	9006      	str	r0, [sp, #24]
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	3301      	adds	r3, #1
 80081ae:	930e      	str	r3, [sp, #56]	; 0x38
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	1e7e      	subs	r6, r7, #1
 80081b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80081b6:	9310      	str	r3, [sp, #64]	; 0x40
 80081b8:	f7f9 fec6 	bl	8001f48 <__aeabi_i2d>
 80081bc:	9a06      	ldr	r2, [sp, #24]
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	f7f9 f8b6 	bl	8001330 <__aeabi_dmul>
 80081c4:	2200      	movs	r2, #0
 80081c6:	4bb2      	ldr	r3, [pc, #712]	; (8008490 <_dtoa_r+0x6cc>)
 80081c8:	f7f8 f98c 	bl	80004e4 <__aeabi_dadd>
 80081cc:	4ab1      	ldr	r2, [pc, #708]	; (8008494 <_dtoa_r+0x6d0>)
 80081ce:	900e      	str	r0, [sp, #56]	; 0x38
 80081d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80081d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80081d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081d6:	4694      	mov	ip, r2
 80081d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081da:	4463      	add	r3, ip
 80081dc:	9315      	str	r3, [sp, #84]	; 0x54
 80081de:	001d      	movs	r5, r3
 80081e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d161      	bne.n	80082aa <_dtoa_r+0x4e6>
 80081e6:	9806      	ldr	r0, [sp, #24]
 80081e8:	9907      	ldr	r1, [sp, #28]
 80081ea:	2200      	movs	r2, #0
 80081ec:	4baa      	ldr	r3, [pc, #680]	; (8008498 <_dtoa_r+0x6d4>)
 80081ee:	f7f9 fb11 	bl	8001814 <__aeabi_dsub>
 80081f2:	0022      	movs	r2, r4
 80081f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f6:	9006      	str	r0, [sp, #24]
 80081f8:	9107      	str	r1, [sp, #28]
 80081fa:	f7f8 f941 	bl	8000480 <__aeabi_dcmpgt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d000      	beq.n	8008204 <_dtoa_r+0x440>
 8008202:	e2a8      	b.n	8008756 <_dtoa_r+0x992>
 8008204:	48a5      	ldr	r0, [pc, #660]	; (800849c <_dtoa_r+0x6d8>)
 8008206:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008208:	4684      	mov	ip, r0
 800820a:	4461      	add	r1, ip
 800820c:	000b      	movs	r3, r1
 800820e:	9806      	ldr	r0, [sp, #24]
 8008210:	9907      	ldr	r1, [sp, #28]
 8008212:	0022      	movs	r2, r4
 8008214:	f7f8 f920 	bl	8000458 <__aeabi_dcmplt>
 8008218:	2800      	cmp	r0, #0
 800821a:	d000      	beq.n	800821e <_dtoa_r+0x45a>
 800821c:	e295      	b.n	800874a <_dtoa_r+0x986>
 800821e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008220:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008222:	9306      	str	r3, [sp, #24]
 8008224:	9407      	str	r4, [sp, #28]
 8008226:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008228:	2b00      	cmp	r3, #0
 800822a:	da00      	bge.n	800822e <_dtoa_r+0x46a>
 800822c:	e15c      	b.n	80084e8 <_dtoa_r+0x724>
 800822e:	2f0e      	cmp	r7, #14
 8008230:	dd00      	ble.n	8008234 <_dtoa_r+0x470>
 8008232:	e159      	b.n	80084e8 <_dtoa_r+0x724>
 8008234:	4b93      	ldr	r3, [pc, #588]	; (8008484 <_dtoa_r+0x6c0>)
 8008236:	00fa      	lsls	r2, r7, #3
 8008238:	189b      	adds	r3, r3, r2
 800823a:	685c      	ldr	r4, [r3, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	9405      	str	r4, [sp, #20]
 8008242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008244:	2b00      	cmp	r3, #0
 8008246:	db00      	blt.n	800824a <_dtoa_r+0x486>
 8008248:	e0d8      	b.n	80083fc <_dtoa_r+0x638>
 800824a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	dd00      	ble.n	8008252 <_dtoa_r+0x48e>
 8008250:	e0d4      	b.n	80083fc <_dtoa_r+0x638>
 8008252:	d000      	beq.n	8008256 <_dtoa_r+0x492>
 8008254:	e27d      	b.n	8008752 <_dtoa_r+0x98e>
 8008256:	9804      	ldr	r0, [sp, #16]
 8008258:	9905      	ldr	r1, [sp, #20]
 800825a:	2200      	movs	r2, #0
 800825c:	4b8e      	ldr	r3, [pc, #568]	; (8008498 <_dtoa_r+0x6d4>)
 800825e:	f7f9 f867 	bl	8001330 <__aeabi_dmul>
 8008262:	9a06      	ldr	r2, [sp, #24]
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	f7f8 f915 	bl	8000494 <__aeabi_dcmpge>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	001e      	movs	r6, r3
 8008270:	2800      	cmp	r0, #0
 8008272:	d000      	beq.n	8008276 <_dtoa_r+0x4b2>
 8008274:	e24f      	b.n	8008716 <_dtoa_r+0x952>
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	9a08      	ldr	r2, [sp, #32]
 800827a:	1c5d      	adds	r5, r3, #1
 800827c:	2331      	movs	r3, #49	; 0x31
 800827e:	3701      	adds	r7, #1
 8008280:	7013      	strb	r3, [r2, #0]
 8008282:	e24b      	b.n	800871c <_dtoa_r+0x958>
 8008284:	4234      	tst	r4, r6
 8008286:	d00a      	beq.n	800829e <_dtoa_r+0x4da>
 8008288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800828a:	4a85      	ldr	r2, [pc, #532]	; (80084a0 <_dtoa_r+0x6dc>)
 800828c:	3301      	adds	r3, #1
 800828e:	930e      	str	r3, [sp, #56]	; 0x38
 8008290:	00eb      	lsls	r3, r5, #3
 8008292:	189b      	adds	r3, r3, r2
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f7f9 f84a 	bl	8001330 <__aeabi_dmul>
 800829c:	0033      	movs	r3, r6
 800829e:	1064      	asrs	r4, r4, #1
 80082a0:	3501      	adds	r5, #1
 80082a2:	e75f      	b.n	8008164 <_dtoa_r+0x3a0>
 80082a4:	003e      	movs	r6, r7
 80082a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a8:	e784      	b.n	80081b4 <_dtoa_r+0x3f0>
 80082aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	4b74      	ldr	r3, [pc, #464]	; (8008484 <_dtoa_r+0x6c0>)
 80082b2:	00d2      	lsls	r2, r2, #3
 80082b4:	189b      	adds	r3, r3, r2
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2900      	cmp	r1, #0
 80082bc:	d049      	beq.n	8008352 <_dtoa_r+0x58e>
 80082be:	2000      	movs	r0, #0
 80082c0:	4978      	ldr	r1, [pc, #480]	; (80084a4 <_dtoa_r+0x6e0>)
 80082c2:	f7f8 fc2b 	bl	8000b1c <__aeabi_ddiv>
 80082c6:	002b      	movs	r3, r5
 80082c8:	0022      	movs	r2, r4
 80082ca:	f7f9 faa3 	bl	8001814 <__aeabi_dsub>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	900e      	str	r0, [sp, #56]	; 0x38
 80082d2:	910f      	str	r1, [sp, #60]	; 0x3c
 80082d4:	9315      	str	r3, [sp, #84]	; 0x54
 80082d6:	9806      	ldr	r0, [sp, #24]
 80082d8:	9907      	ldr	r1, [sp, #28]
 80082da:	f7f9 fdff 	bl	8001edc <__aeabi_d2iz>
 80082de:	0004      	movs	r4, r0
 80082e0:	f7f9 fe32 	bl	8001f48 <__aeabi_i2d>
 80082e4:	0002      	movs	r2, r0
 80082e6:	000b      	movs	r3, r1
 80082e8:	9806      	ldr	r0, [sp, #24]
 80082ea:	9907      	ldr	r1, [sp, #28]
 80082ec:	f7f9 fa92 	bl	8001814 <__aeabi_dsub>
 80082f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082f2:	3430      	adds	r4, #48	; 0x30
 80082f4:	1c5d      	adds	r5, r3, #1
 80082f6:	701c      	strb	r4, [r3, #0]
 80082f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082fc:	9006      	str	r0, [sp, #24]
 80082fe:	9107      	str	r1, [sp, #28]
 8008300:	f7f8 f8aa 	bl	8000458 <__aeabi_dcmplt>
 8008304:	2800      	cmp	r0, #0
 8008306:	d16c      	bne.n	80083e2 <_dtoa_r+0x61e>
 8008308:	9a06      	ldr	r2, [sp, #24]
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	2000      	movs	r0, #0
 800830e:	495e      	ldr	r1, [pc, #376]	; (8008488 <_dtoa_r+0x6c4>)
 8008310:	f7f9 fa80 	bl	8001814 <__aeabi_dsub>
 8008314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008318:	f7f8 f89e 	bl	8000458 <__aeabi_dcmplt>
 800831c:	2800      	cmp	r0, #0
 800831e:	d000      	beq.n	8008322 <_dtoa_r+0x55e>
 8008320:	e0c3      	b.n	80084aa <_dtoa_r+0x6e6>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008326:	1aeb      	subs	r3, r5, r3
 8008328:	429a      	cmp	r2, r3
 800832a:	dc00      	bgt.n	800832e <_dtoa_r+0x56a>
 800832c:	e777      	b.n	800821e <_dtoa_r+0x45a>
 800832e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008330:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008332:	2200      	movs	r2, #0
 8008334:	4b55      	ldr	r3, [pc, #340]	; (800848c <_dtoa_r+0x6c8>)
 8008336:	f7f8 fffb 	bl	8001330 <__aeabi_dmul>
 800833a:	2200      	movs	r2, #0
 800833c:	900e      	str	r0, [sp, #56]	; 0x38
 800833e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008340:	9806      	ldr	r0, [sp, #24]
 8008342:	9907      	ldr	r1, [sp, #28]
 8008344:	4b51      	ldr	r3, [pc, #324]	; (800848c <_dtoa_r+0x6c8>)
 8008346:	f7f8 fff3 	bl	8001330 <__aeabi_dmul>
 800834a:	9515      	str	r5, [sp, #84]	; 0x54
 800834c:	9006      	str	r0, [sp, #24]
 800834e:	9107      	str	r1, [sp, #28]
 8008350:	e7c1      	b.n	80082d6 <_dtoa_r+0x512>
 8008352:	0020      	movs	r0, r4
 8008354:	0029      	movs	r1, r5
 8008356:	f7f8 ffeb 	bl	8001330 <__aeabi_dmul>
 800835a:	9c08      	ldr	r4, [sp, #32]
 800835c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800835e:	0023      	movs	r3, r4
 8008360:	4694      	mov	ip, r2
 8008362:	900e      	str	r0, [sp, #56]	; 0x38
 8008364:	910f      	str	r1, [sp, #60]	; 0x3c
 8008366:	4463      	add	r3, ip
 8008368:	9315      	str	r3, [sp, #84]	; 0x54
 800836a:	9806      	ldr	r0, [sp, #24]
 800836c:	9907      	ldr	r1, [sp, #28]
 800836e:	f7f9 fdb5 	bl	8001edc <__aeabi_d2iz>
 8008372:	0005      	movs	r5, r0
 8008374:	f7f9 fde8 	bl	8001f48 <__aeabi_i2d>
 8008378:	000b      	movs	r3, r1
 800837a:	0002      	movs	r2, r0
 800837c:	9806      	ldr	r0, [sp, #24]
 800837e:	9907      	ldr	r1, [sp, #28]
 8008380:	f7f9 fa48 	bl	8001814 <__aeabi_dsub>
 8008384:	3530      	adds	r5, #48	; 0x30
 8008386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008388:	7025      	strb	r5, [r4, #0]
 800838a:	3401      	adds	r4, #1
 800838c:	9006      	str	r0, [sp, #24]
 800838e:	9107      	str	r1, [sp, #28]
 8008390:	42a3      	cmp	r3, r4
 8008392:	d12a      	bne.n	80083ea <_dtoa_r+0x626>
 8008394:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008396:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008398:	9a08      	ldr	r2, [sp, #32]
 800839a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800839c:	4694      	mov	ip, r2
 800839e:	4463      	add	r3, ip
 80083a0:	2200      	movs	r2, #0
 80083a2:	001d      	movs	r5, r3
 80083a4:	4b3f      	ldr	r3, [pc, #252]	; (80084a4 <_dtoa_r+0x6e0>)
 80083a6:	f7f8 f89d 	bl	80004e4 <__aeabi_dadd>
 80083aa:	0002      	movs	r2, r0
 80083ac:	000b      	movs	r3, r1
 80083ae:	9806      	ldr	r0, [sp, #24]
 80083b0:	9907      	ldr	r1, [sp, #28]
 80083b2:	f7f8 f865 	bl	8000480 <__aeabi_dcmpgt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d000      	beq.n	80083bc <_dtoa_r+0x5f8>
 80083ba:	e076      	b.n	80084aa <_dtoa_r+0x6e6>
 80083bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083c0:	2000      	movs	r0, #0
 80083c2:	4938      	ldr	r1, [pc, #224]	; (80084a4 <_dtoa_r+0x6e0>)
 80083c4:	f7f9 fa26 	bl	8001814 <__aeabi_dsub>
 80083c8:	0002      	movs	r2, r0
 80083ca:	000b      	movs	r3, r1
 80083cc:	9806      	ldr	r0, [sp, #24]
 80083ce:	9907      	ldr	r1, [sp, #28]
 80083d0:	f7f8 f842 	bl	8000458 <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d100      	bne.n	80083da <_dtoa_r+0x616>
 80083d8:	e721      	b.n	800821e <_dtoa_r+0x45a>
 80083da:	1e6b      	subs	r3, r5, #1
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	2a30      	cmp	r2, #48	; 0x30
 80083e0:	d001      	beq.n	80083e6 <_dtoa_r+0x622>
 80083e2:	0037      	movs	r7, r6
 80083e4:	e03f      	b.n	8008466 <_dtoa_r+0x6a2>
 80083e6:	001d      	movs	r5, r3
 80083e8:	e7f7      	b.n	80083da <_dtoa_r+0x616>
 80083ea:	9806      	ldr	r0, [sp, #24]
 80083ec:	9907      	ldr	r1, [sp, #28]
 80083ee:	2200      	movs	r2, #0
 80083f0:	4b26      	ldr	r3, [pc, #152]	; (800848c <_dtoa_r+0x6c8>)
 80083f2:	f7f8 ff9d 	bl	8001330 <__aeabi_dmul>
 80083f6:	9006      	str	r0, [sp, #24]
 80083f8:	9107      	str	r1, [sp, #28]
 80083fa:	e7b6      	b.n	800836a <_dtoa_r+0x5a6>
 80083fc:	9e08      	ldr	r6, [sp, #32]
 80083fe:	9a04      	ldr	r2, [sp, #16]
 8008400:	9b05      	ldr	r3, [sp, #20]
 8008402:	9806      	ldr	r0, [sp, #24]
 8008404:	9907      	ldr	r1, [sp, #28]
 8008406:	f7f8 fb89 	bl	8000b1c <__aeabi_ddiv>
 800840a:	f7f9 fd67 	bl	8001edc <__aeabi_d2iz>
 800840e:	0004      	movs	r4, r0
 8008410:	f7f9 fd9a 	bl	8001f48 <__aeabi_i2d>
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	9b05      	ldr	r3, [sp, #20]
 8008418:	f7f8 ff8a 	bl	8001330 <__aeabi_dmul>
 800841c:	0002      	movs	r2, r0
 800841e:	000b      	movs	r3, r1
 8008420:	9806      	ldr	r0, [sp, #24]
 8008422:	9907      	ldr	r1, [sp, #28]
 8008424:	f7f9 f9f6 	bl	8001814 <__aeabi_dsub>
 8008428:	0023      	movs	r3, r4
 800842a:	3330      	adds	r3, #48	; 0x30
 800842c:	7033      	strb	r3, [r6, #0]
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	1c75      	adds	r5, r6, #1
 8008434:	1aeb      	subs	r3, r5, r3
 8008436:	429a      	cmp	r2, r3
 8008438:	d148      	bne.n	80084cc <_dtoa_r+0x708>
 800843a:	0002      	movs	r2, r0
 800843c:	000b      	movs	r3, r1
 800843e:	f7f8 f851 	bl	80004e4 <__aeabi_dadd>
 8008442:	9a04      	ldr	r2, [sp, #16]
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	9006      	str	r0, [sp, #24]
 8008448:	9107      	str	r1, [sp, #28]
 800844a:	f7f8 f819 	bl	8000480 <__aeabi_dcmpgt>
 800844e:	2800      	cmp	r0, #0
 8008450:	d12a      	bne.n	80084a8 <_dtoa_r+0x6e4>
 8008452:	9a04      	ldr	r2, [sp, #16]
 8008454:	9b05      	ldr	r3, [sp, #20]
 8008456:	9806      	ldr	r0, [sp, #24]
 8008458:	9907      	ldr	r1, [sp, #28]
 800845a:	f7f7 fff7 	bl	800044c <__aeabi_dcmpeq>
 800845e:	2800      	cmp	r0, #0
 8008460:	d001      	beq.n	8008466 <_dtoa_r+0x6a2>
 8008462:	07e3      	lsls	r3, r4, #31
 8008464:	d420      	bmi.n	80084a8 <_dtoa_r+0x6e4>
 8008466:	9903      	ldr	r1, [sp, #12]
 8008468:	9802      	ldr	r0, [sp, #8]
 800846a:	f000 fe2c 	bl	80090c6 <_Bfree>
 800846e:	2300      	movs	r3, #0
 8008470:	702b      	strb	r3, [r5, #0]
 8008472:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008474:	3701      	adds	r7, #1
 8008476:	601f      	str	r7, [r3, #0]
 8008478:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800847a:	2b00      	cmp	r3, #0
 800847c:	d100      	bne.n	8008480 <_dtoa_r+0x6bc>
 800847e:	e4e6      	b.n	8007e4e <_dtoa_r+0x8a>
 8008480:	601d      	str	r5, [r3, #0]
 8008482:	e4e4      	b.n	8007e4e <_dtoa_r+0x8a>
 8008484:	08009fe8 	.word	0x08009fe8
 8008488:	3ff00000 	.word	0x3ff00000
 800848c:	40240000 	.word	0x40240000
 8008490:	401c0000 	.word	0x401c0000
 8008494:	fcc00000 	.word	0xfcc00000
 8008498:	40140000 	.word	0x40140000
 800849c:	7cc00000 	.word	0x7cc00000
 80084a0:	08009fc0 	.word	0x08009fc0
 80084a4:	3fe00000 	.word	0x3fe00000
 80084a8:	003e      	movs	r6, r7
 80084aa:	1e6b      	subs	r3, r5, #1
 80084ac:	781a      	ldrb	r2, [r3, #0]
 80084ae:	2a39      	cmp	r2, #57	; 0x39
 80084b0:	d106      	bne.n	80084c0 <_dtoa_r+0x6fc>
 80084b2:	9a08      	ldr	r2, [sp, #32]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d107      	bne.n	80084c8 <_dtoa_r+0x704>
 80084b8:	2330      	movs	r3, #48	; 0x30
 80084ba:	7013      	strb	r3, [r2, #0]
 80084bc:	0013      	movs	r3, r2
 80084be:	3601      	adds	r6, #1
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	3201      	adds	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e78c      	b.n	80083e2 <_dtoa_r+0x61e>
 80084c8:	001d      	movs	r5, r3
 80084ca:	e7ee      	b.n	80084aa <_dtoa_r+0x6e6>
 80084cc:	2200      	movs	r2, #0
 80084ce:	4ba4      	ldr	r3, [pc, #656]	; (8008760 <_dtoa_r+0x99c>)
 80084d0:	f7f8 ff2e 	bl	8001330 <__aeabi_dmul>
 80084d4:	2200      	movs	r2, #0
 80084d6:	2300      	movs	r3, #0
 80084d8:	9006      	str	r0, [sp, #24]
 80084da:	9107      	str	r1, [sp, #28]
 80084dc:	002e      	movs	r6, r5
 80084de:	f7f7 ffb5 	bl	800044c <__aeabi_dcmpeq>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d08b      	beq.n	80083fe <_dtoa_r+0x63a>
 80084e6:	e7be      	b.n	8008466 <_dtoa_r+0x6a2>
 80084e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	d100      	bne.n	80084f0 <_dtoa_r+0x72c>
 80084ee:	e0da      	b.n	80086a6 <_dtoa_r+0x8e2>
 80084f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084f2:	2a01      	cmp	r2, #1
 80084f4:	dd00      	ble.n	80084f8 <_dtoa_r+0x734>
 80084f6:	e0bd      	b.n	8008674 <_dtoa_r+0x8b0>
 80084f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	d100      	bne.n	8008500 <_dtoa_r+0x73c>
 80084fe:	e0b5      	b.n	800866c <_dtoa_r+0x8a8>
 8008500:	4a98      	ldr	r2, [pc, #608]	; (8008764 <_dtoa_r+0x9a0>)
 8008502:	189b      	adds	r3, r3, r2
 8008504:	9d04      	ldr	r5, [sp, #16]
 8008506:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800850a:	2101      	movs	r1, #1
 800850c:	18d2      	adds	r2, r2, r3
 800850e:	920a      	str	r2, [sp, #40]	; 0x28
 8008510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008512:	9802      	ldr	r0, [sp, #8]
 8008514:	18d3      	adds	r3, r2, r3
 8008516:	930b      	str	r3, [sp, #44]	; 0x2c
 8008518:	f000 feb3 	bl	8009282 <__i2b>
 800851c:	0006      	movs	r6, r0
 800851e:	2c00      	cmp	r4, #0
 8008520:	dd0e      	ble.n	8008540 <_dtoa_r+0x77c>
 8008522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd0b      	ble.n	8008540 <_dtoa_r+0x77c>
 8008528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800852a:	0023      	movs	r3, r4
 800852c:	4294      	cmp	r4, r2
 800852e:	dd00      	ble.n	8008532 <_dtoa_r+0x76e>
 8008530:	0013      	movs	r3, r2
 8008532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008534:	1ae4      	subs	r4, r4, r3
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	920a      	str	r2, [sp, #40]	; 0x28
 800853a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d01f      	beq.n	8008586 <_dtoa_r+0x7c2>
 8008546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008548:	2b00      	cmp	r3, #0
 800854a:	d100      	bne.n	800854e <_dtoa_r+0x78a>
 800854c:	e0af      	b.n	80086ae <_dtoa_r+0x8ea>
 800854e:	2d00      	cmp	r5, #0
 8008550:	d011      	beq.n	8008576 <_dtoa_r+0x7b2>
 8008552:	0031      	movs	r1, r6
 8008554:	002a      	movs	r2, r5
 8008556:	9802      	ldr	r0, [sp, #8]
 8008558:	f000 ff2c 	bl	80093b4 <__pow5mult>
 800855c:	9a03      	ldr	r2, [sp, #12]
 800855e:	0001      	movs	r1, r0
 8008560:	0006      	movs	r6, r0
 8008562:	9802      	ldr	r0, [sp, #8]
 8008564:	f000 fe96 	bl	8009294 <__multiply>
 8008568:	9903      	ldr	r1, [sp, #12]
 800856a:	9010      	str	r0, [sp, #64]	; 0x40
 800856c:	9802      	ldr	r0, [sp, #8]
 800856e:	f000 fdaa 	bl	80090c6 <_Bfree>
 8008572:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	1b5a      	subs	r2, r3, r5
 800857a:	d004      	beq.n	8008586 <_dtoa_r+0x7c2>
 800857c:	9903      	ldr	r1, [sp, #12]
 800857e:	9802      	ldr	r0, [sp, #8]
 8008580:	f000 ff18 	bl	80093b4 <__pow5mult>
 8008584:	9003      	str	r0, [sp, #12]
 8008586:	2101      	movs	r1, #1
 8008588:	9802      	ldr	r0, [sp, #8]
 800858a:	f000 fe7a 	bl	8009282 <__i2b>
 800858e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008590:	9004      	str	r0, [sp, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d100      	bne.n	8008598 <_dtoa_r+0x7d4>
 8008596:	e1e3      	b.n	8008960 <_dtoa_r+0xb9c>
 8008598:	001a      	movs	r2, r3
 800859a:	0001      	movs	r1, r0
 800859c:	9802      	ldr	r0, [sp, #8]
 800859e:	f000 ff09 	bl	80093b4 <__pow5mult>
 80085a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085a4:	9004      	str	r0, [sp, #16]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	dd00      	ble.n	80085ac <_dtoa_r+0x7e8>
 80085aa:	e082      	b.n	80086b2 <_dtoa_r+0x8ee>
 80085ac:	2500      	movs	r5, #0
 80085ae:	9b06      	ldr	r3, [sp, #24]
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	d10e      	bne.n	80085d2 <_dtoa_r+0x80e>
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	d10a      	bne.n	80085d2 <_dtoa_r+0x80e>
 80085bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085be:	9a07      	ldr	r2, [sp, #28]
 80085c0:	4213      	tst	r3, r2
 80085c2:	d006      	beq.n	80085d2 <_dtoa_r+0x80e>
 80085c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c6:	3501      	adds	r5, #1
 80085c8:	3301      	adds	r3, #1
 80085ca:	930a      	str	r3, [sp, #40]	; 0x28
 80085cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ce:	3301      	adds	r3, #1
 80085d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085d4:	2001      	movs	r0, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d16c      	bne.n	80086b4 <_dtoa_r+0x8f0>
 80085da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085dc:	1818      	adds	r0, r3, r0
 80085de:	231f      	movs	r3, #31
 80085e0:	4018      	ands	r0, r3
 80085e2:	d07e      	beq.n	80086e2 <_dtoa_r+0x91e>
 80085e4:	3301      	adds	r3, #1
 80085e6:	1a1b      	subs	r3, r3, r0
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	dd70      	ble.n	80086ce <_dtoa_r+0x90a>
 80085ec:	231c      	movs	r3, #28
 80085ee:	1a18      	subs	r0, r3, r0
 80085f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f2:	1824      	adds	r4, r4, r0
 80085f4:	181b      	adds	r3, r3, r0
 80085f6:	930a      	str	r3, [sp, #40]	; 0x28
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	181b      	adds	r3, r3, r0
 80085fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	2b00      	cmp	r3, #0
 8008602:	dd05      	ble.n	8008610 <_dtoa_r+0x84c>
 8008604:	001a      	movs	r2, r3
 8008606:	9903      	ldr	r1, [sp, #12]
 8008608:	9802      	ldr	r0, [sp, #8]
 800860a:	f000 ff25 	bl	8009458 <__lshift>
 800860e:	9003      	str	r0, [sp, #12]
 8008610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	dd05      	ble.n	8008622 <_dtoa_r+0x85e>
 8008616:	001a      	movs	r2, r3
 8008618:	9904      	ldr	r1, [sp, #16]
 800861a:	9802      	ldr	r0, [sp, #8]
 800861c:	f000 ff1c 	bl	8009458 <__lshift>
 8008620:	9004      	str	r0, [sp, #16]
 8008622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008624:	2b00      	cmp	r3, #0
 8008626:	d05e      	beq.n	80086e6 <_dtoa_r+0x922>
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	9803      	ldr	r0, [sp, #12]
 800862c:	f000 ff66 	bl	80094fc <__mcmp>
 8008630:	2800      	cmp	r0, #0
 8008632:	da58      	bge.n	80086e6 <_dtoa_r+0x922>
 8008634:	2300      	movs	r3, #0
 8008636:	220a      	movs	r2, #10
 8008638:	9903      	ldr	r1, [sp, #12]
 800863a:	9802      	ldr	r0, [sp, #8]
 800863c:	f000 fd5c 	bl	80090f8 <__multadd>
 8008640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008642:	3f01      	subs	r7, #1
 8008644:	9003      	str	r0, [sp, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d100      	bne.n	800864c <_dtoa_r+0x888>
 800864a:	e190      	b.n	800896e <_dtoa_r+0xbaa>
 800864c:	2300      	movs	r3, #0
 800864e:	0031      	movs	r1, r6
 8008650:	220a      	movs	r2, #10
 8008652:	9802      	ldr	r0, [sp, #8]
 8008654:	f000 fd50 	bl	80090f8 <__multadd>
 8008658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800865a:	0006      	movs	r6, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd00      	ble.n	8008662 <_dtoa_r+0x89e>
 8008660:	e088      	b.n	8008774 <_dtoa_r+0x9b0>
 8008662:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008664:	2b02      	cmp	r3, #2
 8008666:	dc00      	bgt.n	800866a <_dtoa_r+0x8a6>
 8008668:	e084      	b.n	8008774 <_dtoa_r+0x9b0>
 800866a:	e044      	b.n	80086f6 <_dtoa_r+0x932>
 800866c:	2336      	movs	r3, #54	; 0x36
 800866e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	e747      	b.n	8008504 <_dtoa_r+0x740>
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	1e5d      	subs	r5, r3, #1
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	42ab      	cmp	r3, r5
 800867c:	db08      	blt.n	8008690 <_dtoa_r+0x8cc>
 800867e:	1b5d      	subs	r5, r3, r5
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	da0c      	bge.n	80086a0 <_dtoa_r+0x8dc>
 8008686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868a:	1a9c      	subs	r4, r3, r2
 800868c:	2300      	movs	r3, #0
 800868e:	e73b      	b.n	8008508 <_dtoa_r+0x744>
 8008690:	9b04      	ldr	r3, [sp, #16]
 8008692:	9504      	str	r5, [sp, #16]
 8008694:	1aea      	subs	r2, r5, r3
 8008696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008698:	2500      	movs	r5, #0
 800869a:	189b      	adds	r3, r3, r2
 800869c:	9311      	str	r3, [sp, #68]	; 0x44
 800869e:	e7ef      	b.n	8008680 <_dtoa_r+0x8bc>
 80086a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a4:	e730      	b.n	8008508 <_dtoa_r+0x744>
 80086a6:	9d04      	ldr	r5, [sp, #16]
 80086a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80086ac:	e737      	b.n	800851e <_dtoa_r+0x75a>
 80086ae:	9a04      	ldr	r2, [sp, #16]
 80086b0:	e764      	b.n	800857c <_dtoa_r+0x7b8>
 80086b2:	2500      	movs	r5, #0
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	9a04      	ldr	r2, [sp, #16]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	9310      	str	r3, [sp, #64]	; 0x40
 80086bc:	3303      	adds	r3, #3
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	18d3      	adds	r3, r2, r3
 80086c2:	6858      	ldr	r0, [r3, #4]
 80086c4:	f000 fd94 	bl	80091f0 <__hi0bits>
 80086c8:	2320      	movs	r3, #32
 80086ca:	1a18      	subs	r0, r3, r0
 80086cc:	e785      	b.n	80085da <_dtoa_r+0x816>
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d095      	beq.n	80085fe <_dtoa_r+0x83a>
 80086d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d4:	331c      	adds	r3, #28
 80086d6:	18d2      	adds	r2, r2, r3
 80086d8:	920a      	str	r2, [sp, #40]	; 0x28
 80086da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086dc:	18e4      	adds	r4, r4, r3
 80086de:	18d3      	adds	r3, r2, r3
 80086e0:	e78c      	b.n	80085fc <_dtoa_r+0x838>
 80086e2:	0003      	movs	r3, r0
 80086e4:	e7f5      	b.n	80086d2 <_dtoa_r+0x90e>
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc3d      	bgt.n	8008768 <_dtoa_r+0x9a4>
 80086ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	dd3a      	ble.n	8008768 <_dtoa_r+0x9a4>
 80086f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f4:	930c      	str	r3, [sp, #48]	; 0x30
 80086f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10c      	bne.n	8008716 <_dtoa_r+0x952>
 80086fc:	9904      	ldr	r1, [sp, #16]
 80086fe:	2205      	movs	r2, #5
 8008700:	9802      	ldr	r0, [sp, #8]
 8008702:	f000 fcf9 	bl	80090f8 <__multadd>
 8008706:	9004      	str	r0, [sp, #16]
 8008708:	0001      	movs	r1, r0
 800870a:	9803      	ldr	r0, [sp, #12]
 800870c:	f000 fef6 	bl	80094fc <__mcmp>
 8008710:	2800      	cmp	r0, #0
 8008712:	dd00      	ble.n	8008716 <_dtoa_r+0x952>
 8008714:	e5af      	b.n	8008276 <_dtoa_r+0x4b2>
 8008716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008718:	9d08      	ldr	r5, [sp, #32]
 800871a:	43df      	mvns	r7, r3
 800871c:	2300      	movs	r3, #0
 800871e:	9309      	str	r3, [sp, #36]	; 0x24
 8008720:	9904      	ldr	r1, [sp, #16]
 8008722:	9802      	ldr	r0, [sp, #8]
 8008724:	f000 fccf 	bl	80090c6 <_Bfree>
 8008728:	2e00      	cmp	r6, #0
 800872a:	d100      	bne.n	800872e <_dtoa_r+0x96a>
 800872c:	e69b      	b.n	8008466 <_dtoa_r+0x6a2>
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <_dtoa_r+0x97c>
 8008734:	42b3      	cmp	r3, r6
 8008736:	d003      	beq.n	8008740 <_dtoa_r+0x97c>
 8008738:	0019      	movs	r1, r3
 800873a:	9802      	ldr	r0, [sp, #8]
 800873c:	f000 fcc3 	bl	80090c6 <_Bfree>
 8008740:	0031      	movs	r1, r6
 8008742:	9802      	ldr	r0, [sp, #8]
 8008744:	f000 fcbf 	bl	80090c6 <_Bfree>
 8008748:	e68d      	b.n	8008466 <_dtoa_r+0x6a2>
 800874a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	001e      	movs	r6, r3
 8008750:	e7e1      	b.n	8008716 <_dtoa_r+0x952>
 8008752:	2300      	movs	r3, #0
 8008754:	e7fa      	b.n	800874c <_dtoa_r+0x988>
 8008756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008758:	0037      	movs	r7, r6
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	001e      	movs	r6, r3
 800875e:	e58a      	b.n	8008276 <_dtoa_r+0x4b2>
 8008760:	40240000 	.word	0x40240000
 8008764:	00000433 	.word	0x00000433
 8008768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876a:	2b00      	cmp	r3, #0
 800876c:	d100      	bne.n	8008770 <_dtoa_r+0x9ac>
 800876e:	e0b2      	b.n	80088d6 <_dtoa_r+0xb12>
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	930c      	str	r3, [sp, #48]	; 0x30
 8008774:	2c00      	cmp	r4, #0
 8008776:	dd05      	ble.n	8008784 <_dtoa_r+0x9c0>
 8008778:	0031      	movs	r1, r6
 800877a:	0022      	movs	r2, r4
 800877c:	9802      	ldr	r0, [sp, #8]
 800877e:	f000 fe6b 	bl	8009458 <__lshift>
 8008782:	0006      	movs	r6, r0
 8008784:	0030      	movs	r0, r6
 8008786:	2d00      	cmp	r5, #0
 8008788:	d011      	beq.n	80087ae <_dtoa_r+0x9ea>
 800878a:	6871      	ldr	r1, [r6, #4]
 800878c:	9802      	ldr	r0, [sp, #8]
 800878e:	f000 fc62 	bl	8009056 <_Balloc>
 8008792:	0031      	movs	r1, r6
 8008794:	0004      	movs	r4, r0
 8008796:	6933      	ldr	r3, [r6, #16]
 8008798:	310c      	adds	r1, #12
 800879a:	1c9a      	adds	r2, r3, #2
 800879c:	0092      	lsls	r2, r2, #2
 800879e:	300c      	adds	r0, #12
 80087a0:	f7fd fd04 	bl	80061ac <memcpy>
 80087a4:	2201      	movs	r2, #1
 80087a6:	0021      	movs	r1, r4
 80087a8:	9802      	ldr	r0, [sp, #8]
 80087aa:	f000 fe55 	bl	8009458 <__lshift>
 80087ae:	9609      	str	r6, [sp, #36]	; 0x24
 80087b0:	0006      	movs	r6, r0
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	930a      	str	r3, [sp, #40]	; 0x28
 80087b6:	9904      	ldr	r1, [sp, #16]
 80087b8:	9803      	ldr	r0, [sp, #12]
 80087ba:	f7ff fa7d 	bl	8007cb8 <quorem>
 80087be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c0:	900d      	str	r0, [sp, #52]	; 0x34
 80087c2:	0004      	movs	r4, r0
 80087c4:	9803      	ldr	r0, [sp, #12]
 80087c6:	f000 fe99 	bl	80094fc <__mcmp>
 80087ca:	0032      	movs	r2, r6
 80087cc:	9010      	str	r0, [sp, #64]	; 0x40
 80087ce:	9904      	ldr	r1, [sp, #16]
 80087d0:	9802      	ldr	r0, [sp, #8]
 80087d2:	f000 fead 	bl	8009530 <__mdiff>
 80087d6:	2301      	movs	r3, #1
 80087d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087da:	68c3      	ldr	r3, [r0, #12]
 80087dc:	3430      	adds	r4, #48	; 0x30
 80087de:	0005      	movs	r5, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d104      	bne.n	80087ee <_dtoa_r+0xa2a>
 80087e4:	0001      	movs	r1, r0
 80087e6:	9803      	ldr	r0, [sp, #12]
 80087e8:	f000 fe88 	bl	80094fc <__mcmp>
 80087ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80087ee:	0029      	movs	r1, r5
 80087f0:	9802      	ldr	r0, [sp, #8]
 80087f2:	f000 fc68 	bl	80090c6 <_Bfree>
 80087f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d10e      	bne.n	800881c <_dtoa_r+0xa58>
 80087fe:	9a06      	ldr	r2, [sp, #24]
 8008800:	3301      	adds	r3, #1
 8008802:	4213      	tst	r3, r2
 8008804:	d10a      	bne.n	800881c <_dtoa_r+0xa58>
 8008806:	2c39      	cmp	r4, #57	; 0x39
 8008808:	d026      	beq.n	8008858 <_dtoa_r+0xa94>
 800880a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	dd01      	ble.n	8008814 <_dtoa_r+0xa50>
 8008810:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008812:	3431      	adds	r4, #49	; 0x31
 8008814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008816:	1c5d      	adds	r5, r3, #1
 8008818:	701c      	strb	r4, [r3, #0]
 800881a:	e781      	b.n	8008720 <_dtoa_r+0x95c>
 800881c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	db07      	blt.n	8008832 <_dtoa_r+0xa6e>
 8008822:	001d      	movs	r5, r3
 8008824:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008826:	431d      	orrs	r5, r3
 8008828:	d122      	bne.n	8008870 <_dtoa_r+0xaac>
 800882a:	2301      	movs	r3, #1
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	4213      	tst	r3, r2
 8008830:	d11e      	bne.n	8008870 <_dtoa_r+0xaac>
 8008832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	dded      	ble.n	8008814 <_dtoa_r+0xa50>
 8008838:	9903      	ldr	r1, [sp, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	9802      	ldr	r0, [sp, #8]
 800883e:	f000 fe0b 	bl	8009458 <__lshift>
 8008842:	9904      	ldr	r1, [sp, #16]
 8008844:	9003      	str	r0, [sp, #12]
 8008846:	f000 fe59 	bl	80094fc <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	dc02      	bgt.n	8008854 <_dtoa_r+0xa90>
 800884e:	d1e1      	bne.n	8008814 <_dtoa_r+0xa50>
 8008850:	07e3      	lsls	r3, r4, #31
 8008852:	d5df      	bpl.n	8008814 <_dtoa_r+0xa50>
 8008854:	2c39      	cmp	r4, #57	; 0x39
 8008856:	d1db      	bne.n	8008810 <_dtoa_r+0xa4c>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800885c:	1c5d      	adds	r5, r3, #1
 800885e:	2339      	movs	r3, #57	; 0x39
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	1e6b      	subs	r3, r5, #1
 8008864:	781a      	ldrb	r2, [r3, #0]
 8008866:	2a39      	cmp	r2, #57	; 0x39
 8008868:	d067      	beq.n	800893a <_dtoa_r+0xb76>
 800886a:	3201      	adds	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e757      	b.n	8008720 <_dtoa_r+0x95c>
 8008870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008872:	1c5d      	adds	r5, r3, #1
 8008874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd04      	ble.n	8008884 <_dtoa_r+0xac0>
 800887a:	2c39      	cmp	r4, #57	; 0x39
 800887c:	d0ec      	beq.n	8008858 <_dtoa_r+0xa94>
 800887e:	3401      	adds	r4, #1
 8008880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008882:	e7c9      	b.n	8008818 <_dtoa_r+0xa54>
 8008884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008888:	701c      	strb	r4, [r3, #0]
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	1aeb      	subs	r3, r5, r3
 800888e:	4293      	cmp	r3, r2
 8008890:	d03e      	beq.n	8008910 <_dtoa_r+0xb4c>
 8008892:	2300      	movs	r3, #0
 8008894:	220a      	movs	r2, #10
 8008896:	9903      	ldr	r1, [sp, #12]
 8008898:	9802      	ldr	r0, [sp, #8]
 800889a:	f000 fc2d 	bl	80090f8 <__multadd>
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	9003      	str	r0, [sp, #12]
 80088a2:	42b3      	cmp	r3, r6
 80088a4:	d109      	bne.n	80088ba <_dtoa_r+0xaf6>
 80088a6:	2300      	movs	r3, #0
 80088a8:	220a      	movs	r2, #10
 80088aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ac:	9802      	ldr	r0, [sp, #8]
 80088ae:	f000 fc23 	bl	80090f8 <__multadd>
 80088b2:	9009      	str	r0, [sp, #36]	; 0x24
 80088b4:	0006      	movs	r6, r0
 80088b6:	950a      	str	r5, [sp, #40]	; 0x28
 80088b8:	e77d      	b.n	80087b6 <_dtoa_r+0x9f2>
 80088ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088bc:	2300      	movs	r3, #0
 80088be:	220a      	movs	r2, #10
 80088c0:	9802      	ldr	r0, [sp, #8]
 80088c2:	f000 fc19 	bl	80090f8 <__multadd>
 80088c6:	2300      	movs	r3, #0
 80088c8:	9009      	str	r0, [sp, #36]	; 0x24
 80088ca:	220a      	movs	r2, #10
 80088cc:	0031      	movs	r1, r6
 80088ce:	9802      	ldr	r0, [sp, #8]
 80088d0:	f000 fc12 	bl	80090f8 <__multadd>
 80088d4:	e7ee      	b.n	80088b4 <_dtoa_r+0xaf0>
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	930c      	str	r3, [sp, #48]	; 0x30
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	9904      	ldr	r1, [sp, #16]
 80088e0:	9803      	ldr	r0, [sp, #12]
 80088e2:	f7ff f9e9 	bl	8007cb8 <quorem>
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	3030      	adds	r0, #48	; 0x30
 80088ea:	1c5d      	adds	r5, r3, #1
 80088ec:	7018      	strb	r0, [r3, #0]
 80088ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	0004      	movs	r4, r0
 80088f4:	1aeb      	subs	r3, r5, r3
 80088f6:	429a      	cmp	r2, r3
 80088f8:	dd08      	ble.n	800890c <_dtoa_r+0xb48>
 80088fa:	2300      	movs	r3, #0
 80088fc:	220a      	movs	r2, #10
 80088fe:	9903      	ldr	r1, [sp, #12]
 8008900:	9802      	ldr	r0, [sp, #8]
 8008902:	f000 fbf9 	bl	80090f8 <__multadd>
 8008906:	9506      	str	r5, [sp, #24]
 8008908:	9003      	str	r0, [sp, #12]
 800890a:	e7e8      	b.n	80088de <_dtoa_r+0xb1a>
 800890c:	2300      	movs	r3, #0
 800890e:	9309      	str	r3, [sp, #36]	; 0x24
 8008910:	9903      	ldr	r1, [sp, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	9802      	ldr	r0, [sp, #8]
 8008916:	f000 fd9f 	bl	8009458 <__lshift>
 800891a:	9904      	ldr	r1, [sp, #16]
 800891c:	9003      	str	r0, [sp, #12]
 800891e:	f000 fded 	bl	80094fc <__mcmp>
 8008922:	2800      	cmp	r0, #0
 8008924:	dc9d      	bgt.n	8008862 <_dtoa_r+0xa9e>
 8008926:	d101      	bne.n	800892c <_dtoa_r+0xb68>
 8008928:	07e3      	lsls	r3, r4, #31
 800892a:	d49a      	bmi.n	8008862 <_dtoa_r+0xa9e>
 800892c:	1e6b      	subs	r3, r5, #1
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	2a30      	cmp	r2, #48	; 0x30
 8008932:	d000      	beq.n	8008936 <_dtoa_r+0xb72>
 8008934:	e6f4      	b.n	8008720 <_dtoa_r+0x95c>
 8008936:	001d      	movs	r5, r3
 8008938:	e7f8      	b.n	800892c <_dtoa_r+0xb68>
 800893a:	9a08      	ldr	r2, [sp, #32]
 800893c:	429a      	cmp	r2, r3
 800893e:	d103      	bne.n	8008948 <_dtoa_r+0xb84>
 8008940:	2331      	movs	r3, #49	; 0x31
 8008942:	3701      	adds	r7, #1
 8008944:	7013      	strb	r3, [r2, #0]
 8008946:	e6eb      	b.n	8008720 <_dtoa_r+0x95c>
 8008948:	001d      	movs	r5, r3
 800894a:	e78a      	b.n	8008862 <_dtoa_r+0xa9e>
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <_dtoa_r+0xbb8>)
 800894e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008950:	9308      	str	r3, [sp, #32]
 8008952:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <_dtoa_r+0xbbc>)
 8008954:	2a00      	cmp	r2, #0
 8008956:	d001      	beq.n	800895c <_dtoa_r+0xb98>
 8008958:	f7ff fa77 	bl	8007e4a <_dtoa_r+0x86>
 800895c:	f7ff fa77 	bl	8007e4e <_dtoa_r+0x8a>
 8008960:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008962:	2b01      	cmp	r3, #1
 8008964:	dc00      	bgt.n	8008968 <_dtoa_r+0xba4>
 8008966:	e621      	b.n	80085ac <_dtoa_r+0x7e8>
 8008968:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800896a:	2001      	movs	r0, #1
 800896c:	e635      	b.n	80085da <_dtoa_r+0x816>
 800896e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008970:	2b00      	cmp	r3, #0
 8008972:	dcb2      	bgt.n	80088da <_dtoa_r+0xb16>
 8008974:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008976:	2b02      	cmp	r3, #2
 8008978:	ddaf      	ble.n	80088da <_dtoa_r+0xb16>
 800897a:	e6bc      	b.n	80086f6 <_dtoa_r+0x932>
 800897c:	08009fa8 	.word	0x08009fa8
 8008980:	08009fb0 	.word	0x08009fb0

08008984 <rshift>:
 8008984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008986:	0004      	movs	r4, r0
 8008988:	6905      	ldr	r5, [r0, #16]
 800898a:	3414      	adds	r4, #20
 800898c:	114b      	asrs	r3, r1, #5
 800898e:	0026      	movs	r6, r4
 8008990:	429d      	cmp	r5, r3
 8008992:	dd14      	ble.n	80089be <rshift+0x3a>
 8008994:	221f      	movs	r2, #31
 8008996:	00ad      	lsls	r5, r5, #2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4011      	ands	r1, r2
 800899c:	1965      	adds	r5, r4, r5
 800899e:	18e3      	adds	r3, r4, r3
 80089a0:	0022      	movs	r2, r4
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d01e      	beq.n	80089e4 <rshift+0x60>
 80089a6:	cb04      	ldmia	r3!, {r2}
 80089a8:	2720      	movs	r7, #32
 80089aa:	40ca      	lsrs	r2, r1
 80089ac:	46a4      	mov	ip, r4
 80089ae:	1a7f      	subs	r7, r7, r1
 80089b0:	4666      	mov	r6, ip
 80089b2:	429d      	cmp	r5, r3
 80089b4:	d80b      	bhi.n	80089ce <rshift+0x4a>
 80089b6:	6032      	str	r2, [r6, #0]
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d000      	beq.n	80089be <rshift+0x3a>
 80089bc:	3604      	adds	r6, #4
 80089be:	1b33      	subs	r3, r6, r4
 80089c0:	109b      	asrs	r3, r3, #2
 80089c2:	6103      	str	r3, [r0, #16]
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d101      	bne.n	80089cc <rshift+0x48>
 80089c8:	2300      	movs	r3, #0
 80089ca:	6143      	str	r3, [r0, #20]
 80089cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ce:	681e      	ldr	r6, [r3, #0]
 80089d0:	40be      	lsls	r6, r7
 80089d2:	4332      	orrs	r2, r6
 80089d4:	4666      	mov	r6, ip
 80089d6:	c604      	stmia	r6!, {r2}
 80089d8:	cb04      	ldmia	r3!, {r2}
 80089da:	46b4      	mov	ip, r6
 80089dc:	40ca      	lsrs	r2, r1
 80089de:	e7e7      	b.n	80089b0 <rshift+0x2c>
 80089e0:	cb02      	ldmia	r3!, {r1}
 80089e2:	c202      	stmia	r2!, {r1}
 80089e4:	0016      	movs	r6, r2
 80089e6:	429d      	cmp	r5, r3
 80089e8:	d8fa      	bhi.n	80089e0 <rshift+0x5c>
 80089ea:	e7e8      	b.n	80089be <rshift+0x3a>

080089ec <__hexdig_fun>:
 80089ec:	0003      	movs	r3, r0
 80089ee:	3b30      	subs	r3, #48	; 0x30
 80089f0:	2b09      	cmp	r3, #9
 80089f2:	d803      	bhi.n	80089fc <__hexdig_fun+0x10>
 80089f4:	3820      	subs	r0, #32
 80089f6:	b2c3      	uxtb	r3, r0
 80089f8:	0018      	movs	r0, r3
 80089fa:	4770      	bx	lr
 80089fc:	0003      	movs	r3, r0
 80089fe:	3b61      	subs	r3, #97	; 0x61
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	d801      	bhi.n	8008a08 <__hexdig_fun+0x1c>
 8008a04:	3847      	subs	r0, #71	; 0x47
 8008a06:	e7f6      	b.n	80089f6 <__hexdig_fun+0xa>
 8008a08:	0002      	movs	r2, r0
 8008a0a:	3a41      	subs	r2, #65	; 0x41
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2a05      	cmp	r2, #5
 8008a10:	d8f2      	bhi.n	80089f8 <__hexdig_fun+0xc>
 8008a12:	3827      	subs	r0, #39	; 0x27
 8008a14:	e7ef      	b.n	80089f6 <__hexdig_fun+0xa>

08008a16 <__gethex>:
 8008a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a18:	b08d      	sub	sp, #52	; 0x34
 8008a1a:	9005      	str	r0, [sp, #20]
 8008a1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8008a20:	9202      	str	r2, [sp, #8]
 8008a22:	930a      	str	r3, [sp, #40]	; 0x28
 8008a24:	f000 fae2 	bl	8008fec <__localeconv_l>
 8008a28:	6803      	ldr	r3, [r0, #0]
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	f7f7 fb6b 	bl	8000108 <strlen>
 8008a32:	2202      	movs	r2, #2
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	4252      	negs	r2, r2
 8008a38:	181b      	adds	r3, r3, r0
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	9004      	str	r0, [sp, #16]
 8008a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a44:	6819      	ldr	r1, [r3, #0]
 8008a46:	1c8b      	adds	r3, r1, #2
 8008a48:	1a52      	subs	r2, r2, r1
 8008a4a:	18d1      	adds	r1, r2, r3
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	9108      	str	r1, [sp, #32]
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	3301      	adds	r3, #1
 8008a54:	7808      	ldrb	r0, [r1, #0]
 8008a56:	2830      	cmp	r0, #48	; 0x30
 8008a58:	d0f7      	beq.n	8008a4a <__gethex+0x34>
 8008a5a:	f7ff ffc7 	bl	80089ec <__hexdig_fun>
 8008a5e:	1e07      	subs	r7, r0, #0
 8008a60:	d000      	beq.n	8008a64 <__gethex+0x4e>
 8008a62:	e06f      	b.n	8008b44 <__gethex+0x12e>
 8008a64:	9a04      	ldr	r2, [sp, #16]
 8008a66:	9907      	ldr	r1, [sp, #28]
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	f001 f913 	bl	8009c94 <strncmp>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d000      	beq.n	8008a74 <__gethex+0x5e>
 8008a72:	e06d      	b.n	8008b50 <__gethex+0x13a>
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	189c      	adds	r4, r3, r2
 8008a7a:	7820      	ldrb	r0, [r4, #0]
 8008a7c:	f7ff ffb6 	bl	80089ec <__hexdig_fun>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d069      	beq.n	8008b58 <__gethex+0x142>
 8008a84:	9401      	str	r4, [sp, #4]
 8008a86:	9b01      	ldr	r3, [sp, #4]
 8008a88:	7818      	ldrb	r0, [r3, #0]
 8008a8a:	2830      	cmp	r0, #48	; 0x30
 8008a8c:	d009      	beq.n	8008aa2 <__gethex+0x8c>
 8008a8e:	f7ff ffad 	bl	80089ec <__hexdig_fun>
 8008a92:	4243      	negs	r3, r0
 8008a94:	4143      	adcs	r3, r0
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	0026      	movs	r6, r4
 8008a9c:	9308      	str	r3, [sp, #32]
 8008a9e:	9c01      	ldr	r4, [sp, #4]
 8008aa0:	e004      	b.n	8008aac <__gethex+0x96>
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	e7ed      	b.n	8008a86 <__gethex+0x70>
 8008aaa:	3401      	adds	r4, #1
 8008aac:	7820      	ldrb	r0, [r4, #0]
 8008aae:	f7ff ff9d 	bl	80089ec <__hexdig_fun>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d1f9      	bne.n	8008aaa <__gethex+0x94>
 8008ab6:	9a04      	ldr	r2, [sp, #16]
 8008ab8:	9907      	ldr	r1, [sp, #28]
 8008aba:	0020      	movs	r0, r4
 8008abc:	f001 f8ea 	bl	8009c94 <strncmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d109      	bne.n	8008ad8 <__gethex+0xc2>
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	d10a      	bne.n	8008ade <__gethex+0xc8>
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	18e4      	adds	r4, r4, r3
 8008acc:	0026      	movs	r6, r4
 8008ace:	7820      	ldrb	r0, [r4, #0]
 8008ad0:	f7ff ff8c 	bl	80089ec <__hexdig_fun>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d139      	bne.n	8008b4c <__gethex+0x136>
 8008ad8:	2700      	movs	r7, #0
 8008ada:	42be      	cmp	r6, r7
 8008adc:	d001      	beq.n	8008ae2 <__gethex+0xcc>
 8008ade:	1b37      	subs	r7, r6, r4
 8008ae0:	00bf      	lsls	r7, r7, #2
 8008ae2:	7823      	ldrb	r3, [r4, #0]
 8008ae4:	2b50      	cmp	r3, #80	; 0x50
 8008ae6:	d001      	beq.n	8008aec <__gethex+0xd6>
 8008ae8:	2b70      	cmp	r3, #112	; 0x70
 8008aea:	d142      	bne.n	8008b72 <__gethex+0x15c>
 8008aec:	7863      	ldrb	r3, [r4, #1]
 8008aee:	2b2b      	cmp	r3, #43	; 0x2b
 8008af0:	d034      	beq.n	8008b5c <__gethex+0x146>
 8008af2:	2b2d      	cmp	r3, #45	; 0x2d
 8008af4:	d036      	beq.n	8008b64 <__gethex+0x14e>
 8008af6:	2300      	movs	r3, #0
 8008af8:	1c66      	adds	r6, r4, #1
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	7830      	ldrb	r0, [r6, #0]
 8008afe:	f7ff ff75 	bl	80089ec <__hexdig_fun>
 8008b02:	1e43      	subs	r3, r0, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b18      	cmp	r3, #24
 8008b08:	d833      	bhi.n	8008b72 <__gethex+0x15c>
 8008b0a:	3810      	subs	r0, #16
 8008b0c:	0005      	movs	r5, r0
 8008b0e:	3601      	adds	r6, #1
 8008b10:	7830      	ldrb	r0, [r6, #0]
 8008b12:	f7ff ff6b 	bl	80089ec <__hexdig_fun>
 8008b16:	1e43      	subs	r3, r0, #1
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b18      	cmp	r3, #24
 8008b1c:	d924      	bls.n	8008b68 <__gethex+0x152>
 8008b1e:	9b06      	ldr	r3, [sp, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d000      	beq.n	8008b26 <__gethex+0x110>
 8008b24:	426d      	negs	r5, r5
 8008b26:	197f      	adds	r7, r7, r5
 8008b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2a:	601e      	str	r6, [r3, #0]
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d021      	beq.n	8008b76 <__gethex+0x160>
 8008b32:	9b08      	ldr	r3, [sp, #32]
 8008b34:	2606      	movs	r6, #6
 8008b36:	425a      	negs	r2, r3
 8008b38:	4153      	adcs	r3, r2
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	401e      	ands	r6, r3
 8008b3e:	0030      	movs	r0, r6
 8008b40:	b00d      	add	sp, #52	; 0x34
 8008b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b44:	2300      	movs	r3, #0
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	001e      	movs	r6, r3
 8008b4a:	e7a8      	b.n	8008a9e <__gethex+0x88>
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	e7be      	b.n	8008ace <__gethex+0xb8>
 8008b50:	9c01      	ldr	r4, [sp, #4]
 8008b52:	2301      	movs	r3, #1
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	e7c4      	b.n	8008ae2 <__gethex+0xcc>
 8008b58:	0007      	movs	r7, r0
 8008b5a:	e7fa      	b.n	8008b52 <__gethex+0x13c>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9306      	str	r3, [sp, #24]
 8008b60:	1ca6      	adds	r6, r4, #2
 8008b62:	e7cb      	b.n	8008afc <__gethex+0xe6>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e7fa      	b.n	8008b5e <__gethex+0x148>
 8008b68:	230a      	movs	r3, #10
 8008b6a:	435d      	muls	r5, r3
 8008b6c:	182d      	adds	r5, r5, r0
 8008b6e:	3d10      	subs	r5, #16
 8008b70:	e7cd      	b.n	8008b0e <__gethex+0xf8>
 8008b72:	0026      	movs	r6, r4
 8008b74:	e7d8      	b.n	8008b28 <__gethex+0x112>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	9903      	ldr	r1, [sp, #12]
 8008b7a:	1ae3      	subs	r3, r4, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	2b07      	cmp	r3, #7
 8008b80:	dc47      	bgt.n	8008c12 <__gethex+0x1fc>
 8008b82:	9805      	ldr	r0, [sp, #20]
 8008b84:	f000 fa67 	bl	8009056 <_Balloc>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	2300      	movs	r3, #0
 8008b92:	0005      	movs	r5, r0
 8008b94:	001e      	movs	r6, r3
 8008b96:	9306      	str	r3, [sp, #24]
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	d33c      	bcc.n	8008c18 <__gethex+0x202>
 8008b9e:	9c08      	ldr	r4, [sp, #32]
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	c440      	stmia	r4!, {r6}
 8008ba4:	1ae4      	subs	r4, r4, r3
 8008ba6:	10a4      	asrs	r4, r4, #2
 8008ba8:	612c      	str	r4, [r5, #16]
 8008baa:	0030      	movs	r0, r6
 8008bac:	f000 fb20 	bl	80091f0 <__hi0bits>
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	0164      	lsls	r4, r4, #5
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	1a26      	subs	r6, r4, r0
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	dd5f      	ble.n	8008c7e <__gethex+0x268>
 8008bbe:	1af6      	subs	r6, r6, r3
 8008bc0:	0031      	movs	r1, r6
 8008bc2:	0028      	movs	r0, r5
 8008bc4:	f000 fe1b 	bl	80097fe <__any_on>
 8008bc8:	1e04      	subs	r4, r0, #0
 8008bca:	d00f      	beq.n	8008bec <__gethex+0x1d6>
 8008bcc:	2401      	movs	r4, #1
 8008bce:	211f      	movs	r1, #31
 8008bd0:	0020      	movs	r0, r4
 8008bd2:	1e73      	subs	r3, r6, #1
 8008bd4:	4019      	ands	r1, r3
 8008bd6:	4088      	lsls	r0, r1
 8008bd8:	0001      	movs	r1, r0
 8008bda:	115a      	asrs	r2, r3, #5
 8008bdc:	9803      	ldr	r0, [sp, #12]
 8008bde:	0092      	lsls	r2, r2, #2
 8008be0:	5812      	ldr	r2, [r2, r0]
 8008be2:	420a      	tst	r2, r1
 8008be4:	d002      	beq.n	8008bec <__gethex+0x1d6>
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	dc41      	bgt.n	8008c6e <__gethex+0x258>
 8008bea:	2402      	movs	r4, #2
 8008bec:	0031      	movs	r1, r6
 8008bee:	0028      	movs	r0, r5
 8008bf0:	f7ff fec8 	bl	8008984 <rshift>
 8008bf4:	19bf      	adds	r7, r7, r6
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	42bb      	cmp	r3, r7
 8008bfe:	da4e      	bge.n	8008c9e <__gethex+0x288>
 8008c00:	0029      	movs	r1, r5
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	f000 fa5f 	bl	80090c6 <_Bfree>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c0c:	26a3      	movs	r6, #163	; 0xa3
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e795      	b.n	8008b3e <__gethex+0x128>
 8008c12:	3101      	adds	r1, #1
 8008c14:	105b      	asrs	r3, r3, #1
 8008c16:	e7b2      	b.n	8008b7e <__gethex+0x168>
 8008c18:	1e63      	subs	r3, r4, #1
 8008c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d015      	beq.n	8008c50 <__gethex+0x23a>
 8008c24:	9b06      	ldr	r3, [sp, #24]
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d105      	bne.n	8008c36 <__gethex+0x220>
 8008c2a:	9b08      	ldr	r3, [sp, #32]
 8008c2c:	601e      	str	r6, [r3, #0]
 8008c2e:	2600      	movs	r6, #0
 8008c30:	3304      	adds	r3, #4
 8008c32:	9308      	str	r3, [sp, #32]
 8008c34:	9606      	str	r6, [sp, #24]
 8008c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c38:	7818      	ldrb	r0, [r3, #0]
 8008c3a:	f7ff fed7 	bl	80089ec <__hexdig_fun>
 8008c3e:	230f      	movs	r3, #15
 8008c40:	4018      	ands	r0, r3
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008c46:	4098      	lsls	r0, r3
 8008c48:	3304      	adds	r3, #4
 8008c4a:	4306      	orrs	r6, r0
 8008c4c:	9306      	str	r3, [sp, #24]
 8008c4e:	e7a3      	b.n	8008b98 <__gethex+0x182>
 8008c50:	2301      	movs	r3, #1
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	1a9c      	subs	r4, r3, r2
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	191c      	adds	r4, r3, r4
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d3e1      	bcc.n	8008c24 <__gethex+0x20e>
 8008c60:	9907      	ldr	r1, [sp, #28]
 8008c62:	0020      	movs	r0, r4
 8008c64:	f001 f816 	bl	8009c94 <strncmp>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d1db      	bne.n	8008c24 <__gethex+0x20e>
 8008c6c:	e794      	b.n	8008b98 <__gethex+0x182>
 8008c6e:	1eb1      	subs	r1, r6, #2
 8008c70:	0028      	movs	r0, r5
 8008c72:	f000 fdc4 	bl	80097fe <__any_on>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d0b7      	beq.n	8008bea <__gethex+0x1d4>
 8008c7a:	2403      	movs	r4, #3
 8008c7c:	e7b6      	b.n	8008bec <__gethex+0x1d6>
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	2400      	movs	r4, #0
 8008c82:	429e      	cmp	r6, r3
 8008c84:	dab7      	bge.n	8008bf6 <__gethex+0x1e0>
 8008c86:	1b9e      	subs	r6, r3, r6
 8008c88:	0029      	movs	r1, r5
 8008c8a:	0032      	movs	r2, r6
 8008c8c:	9805      	ldr	r0, [sp, #20]
 8008c8e:	f000 fbe3 	bl	8009458 <__lshift>
 8008c92:	0003      	movs	r3, r0
 8008c94:	3314      	adds	r3, #20
 8008c96:	0005      	movs	r5, r0
 8008c98:	1bbf      	subs	r7, r7, r6
 8008c9a:	9303      	str	r3, [sp, #12]
 8008c9c:	e7ab      	b.n	8008bf6 <__gethex+0x1e0>
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	685e      	ldr	r6, [r3, #4]
 8008ca2:	42be      	cmp	r6, r7
 8008ca4:	dd6b      	ble.n	8008d7e <__gethex+0x368>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	1bf6      	subs	r6, r6, r7
 8008caa:	42b3      	cmp	r3, r6
 8008cac:	dc32      	bgt.n	8008d14 <__gethex+0x2fe>
 8008cae:	9b02      	ldr	r3, [sp, #8]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d026      	beq.n	8008d04 <__gethex+0x2ee>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d028      	beq.n	8008d0c <__gethex+0x2f6>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d119      	bne.n	8008cf2 <__gethex+0x2dc>
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	d116      	bne.n	8008cf2 <__gethex+0x2dc>
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	dc0d      	bgt.n	8008ce4 <__gethex+0x2ce>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	2662      	movs	r6, #98	; 0x62
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	9a01      	ldr	r2, [sp, #4]
 8008cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	9a03      	ldr	r2, [sp, #12]
 8008cda:	612b      	str	r3, [r5, #16]
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ce0:	601d      	str	r5, [r3, #0]
 8008ce2:	e72c      	b.n	8008b3e <__gethex+0x128>
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	0028      	movs	r0, r5
 8008ce8:	3901      	subs	r1, #1
 8008cea:	f000 fd88 	bl	80097fe <__any_on>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d1ea      	bne.n	8008cc8 <__gethex+0x2b2>
 8008cf2:	0029      	movs	r1, r5
 8008cf4:	9805      	ldr	r0, [sp, #20]
 8008cf6:	f000 f9e6 	bl	80090c6 <_Bfree>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cfe:	2650      	movs	r6, #80	; 0x50
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e71c      	b.n	8008b3e <__gethex+0x128>
 8008d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0de      	beq.n	8008cc8 <__gethex+0x2b2>
 8008d0a:	e7f2      	b.n	8008cf2 <__gethex+0x2dc>
 8008d0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1da      	bne.n	8008cc8 <__gethex+0x2b2>
 8008d12:	e7ee      	b.n	8008cf2 <__gethex+0x2dc>
 8008d14:	1e77      	subs	r7, r6, #1
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	d12f      	bne.n	8008d7a <__gethex+0x364>
 8008d1a:	2f00      	cmp	r7, #0
 8008d1c:	d004      	beq.n	8008d28 <__gethex+0x312>
 8008d1e:	0039      	movs	r1, r7
 8008d20:	0028      	movs	r0, r5
 8008d22:	f000 fd6c 	bl	80097fe <__any_on>
 8008d26:	0004      	movs	r4, r0
 8008d28:	231f      	movs	r3, #31
 8008d2a:	117a      	asrs	r2, r7, #5
 8008d2c:	401f      	ands	r7, r3
 8008d2e:	3b1e      	subs	r3, #30
 8008d30:	40bb      	lsls	r3, r7
 8008d32:	9903      	ldr	r1, [sp, #12]
 8008d34:	0092      	lsls	r2, r2, #2
 8008d36:	5852      	ldr	r2, [r2, r1]
 8008d38:	421a      	tst	r2, r3
 8008d3a:	d001      	beq.n	8008d40 <__gethex+0x32a>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	431c      	orrs	r4, r3
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	0031      	movs	r1, r6
 8008d44:	1b9b      	subs	r3, r3, r6
 8008d46:	2602      	movs	r6, #2
 8008d48:	0028      	movs	r0, r5
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	f7ff fe1a 	bl	8008984 <rshift>
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	685f      	ldr	r7, [r3, #4]
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d040      	beq.n	8008dda <__gethex+0x3c4>
 8008d58:	9b02      	ldr	r3, [sp, #8]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d010      	beq.n	8008d82 <__gethex+0x36c>
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d012      	beq.n	8008d8a <__gethex+0x374>
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <__gethex+0x360>
 8008d68:	07a2      	lsls	r2, r4, #30
 8008d6a:	d504      	bpl.n	8008d76 <__gethex+0x360>
 8008d6c:	9a03      	ldr	r2, [sp, #12]
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	4314      	orrs	r4, r2
 8008d72:	421c      	tst	r4, r3
 8008d74:	d10c      	bne.n	8008d90 <__gethex+0x37a>
 8008d76:	2310      	movs	r3, #16
 8008d78:	e02e      	b.n	8008dd8 <__gethex+0x3c2>
 8008d7a:	2401      	movs	r4, #1
 8008d7c:	e7d4      	b.n	8008d28 <__gethex+0x312>
 8008d7e:	2601      	movs	r6, #1
 8008d80:	e7e8      	b.n	8008d54 <__gethex+0x33e>
 8008d82:	2301      	movs	r3, #1
 8008d84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d86:	1a9b      	subs	r3, r3, r2
 8008d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f2      	beq.n	8008d76 <__gethex+0x360>
 8008d90:	692c      	ldr	r4, [r5, #16]
 8008d92:	00a3      	lsls	r3, r4, #2
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	002b      	movs	r3, r5
 8008d98:	00a2      	lsls	r2, r4, #2
 8008d9a:	3314      	adds	r3, #20
 8008d9c:	1899      	adds	r1, r3, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4694      	mov	ip, r2
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	1c50      	adds	r0, r2, #1
 8008da6:	d01d      	beq.n	8008de4 <__gethex+0x3ce>
 8008da8:	3201      	adds	r2, #1
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	002b      	movs	r3, r5
 8008dae:	3314      	adds	r3, #20
 8008db0:	2e02      	cmp	r6, #2
 8008db2:	d13a      	bne.n	8008e2a <__gethex+0x414>
 8008db4:	9a02      	ldr	r2, [sp, #8]
 8008db6:	9901      	ldr	r1, [sp, #4]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	3a01      	subs	r2, #1
 8008dbc:	428a      	cmp	r2, r1
 8008dbe:	d10a      	bne.n	8008dd6 <__gethex+0x3c0>
 8008dc0:	114a      	asrs	r2, r1, #5
 8008dc2:	211f      	movs	r1, #31
 8008dc4:	9801      	ldr	r0, [sp, #4]
 8008dc6:	0092      	lsls	r2, r2, #2
 8008dc8:	4001      	ands	r1, r0
 8008dca:	2001      	movs	r0, #1
 8008dcc:	0004      	movs	r4, r0
 8008dce:	408c      	lsls	r4, r1
 8008dd0:	58d3      	ldr	r3, [r2, r3]
 8008dd2:	4223      	tst	r3, r4
 8008dd4:	d148      	bne.n	8008e68 <__gethex+0x452>
 8008dd6:	2320      	movs	r3, #32
 8008dd8:	431e      	orrs	r6, r3
 8008dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ddc:	601d      	str	r5, [r3, #0]
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	601f      	str	r7, [r3, #0]
 8008de2:	e6ac      	b.n	8008b3e <__gethex+0x128>
 8008de4:	4662      	mov	r2, ip
 8008de6:	c304      	stmia	r3!, {r2}
 8008de8:	4299      	cmp	r1, r3
 8008dea:	d8da      	bhi.n	8008da2 <__gethex+0x38c>
 8008dec:	68ab      	ldr	r3, [r5, #8]
 8008dee:	429c      	cmp	r4, r3
 8008df0:	db12      	blt.n	8008e18 <__gethex+0x402>
 8008df2:	686b      	ldr	r3, [r5, #4]
 8008df4:	9805      	ldr	r0, [sp, #20]
 8008df6:	1c59      	adds	r1, r3, #1
 8008df8:	f000 f92d 	bl	8009056 <_Balloc>
 8008dfc:	0029      	movs	r1, r5
 8008dfe:	692b      	ldr	r3, [r5, #16]
 8008e00:	9003      	str	r0, [sp, #12]
 8008e02:	1c9a      	adds	r2, r3, #2
 8008e04:	0092      	lsls	r2, r2, #2
 8008e06:	310c      	adds	r1, #12
 8008e08:	300c      	adds	r0, #12
 8008e0a:	f7fd f9cf 	bl	80061ac <memcpy>
 8008e0e:	0029      	movs	r1, r5
 8008e10:	9805      	ldr	r0, [sp, #20]
 8008e12:	f000 f958 	bl	80090c6 <_Bfree>
 8008e16:	9d03      	ldr	r5, [sp, #12]
 8008e18:	692b      	ldr	r3, [r5, #16]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	612a      	str	r2, [r5, #16]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	3304      	adds	r3, #4
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	18eb      	adds	r3, r5, r3
 8008e26:	605a      	str	r2, [r3, #4]
 8008e28:	e7c0      	b.n	8008dac <__gethex+0x396>
 8008e2a:	692a      	ldr	r2, [r5, #16]
 8008e2c:	42a2      	cmp	r2, r4
 8008e2e:	dd0a      	ble.n	8008e46 <__gethex+0x430>
 8008e30:	2101      	movs	r1, #1
 8008e32:	0028      	movs	r0, r5
 8008e34:	f7ff fda6 	bl	8008984 <rshift>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	3701      	adds	r7, #1
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2601      	movs	r6, #1
 8008e40:	42bb      	cmp	r3, r7
 8008e42:	dac8      	bge.n	8008dd6 <__gethex+0x3c0>
 8008e44:	e6dc      	b.n	8008c00 <__gethex+0x1ea>
 8008e46:	241f      	movs	r4, #31
 8008e48:	9a01      	ldr	r2, [sp, #4]
 8008e4a:	2601      	movs	r6, #1
 8008e4c:	4022      	ands	r2, r4
 8008e4e:	1e14      	subs	r4, r2, #0
 8008e50:	d0c1      	beq.n	8008dd6 <__gethex+0x3c0>
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	189b      	adds	r3, r3, r2
 8008e56:	3b04      	subs	r3, #4
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f000 f9c9 	bl	80091f0 <__hi0bits>
 8008e5e:	2120      	movs	r1, #32
 8008e60:	1b0c      	subs	r4, r1, r4
 8008e62:	42a0      	cmp	r0, r4
 8008e64:	dbe4      	blt.n	8008e30 <__gethex+0x41a>
 8008e66:	e7b6      	b.n	8008dd6 <__gethex+0x3c0>
 8008e68:	0006      	movs	r6, r0
 8008e6a:	e7b4      	b.n	8008dd6 <__gethex+0x3c0>

08008e6c <L_shift>:
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	2520      	movs	r5, #32
 8008e72:	1a9a      	subs	r2, r3, r2
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	1aad      	subs	r5, r5, r2
 8008e78:	6843      	ldr	r3, [r0, #4]
 8008e7a:	6806      	ldr	r6, [r0, #0]
 8008e7c:	001c      	movs	r4, r3
 8008e7e:	40ac      	lsls	r4, r5
 8008e80:	40d3      	lsrs	r3, r2
 8008e82:	4334      	orrs	r4, r6
 8008e84:	6004      	str	r4, [r0, #0]
 8008e86:	6043      	str	r3, [r0, #4]
 8008e88:	3004      	adds	r0, #4
 8008e8a:	4288      	cmp	r0, r1
 8008e8c:	d3f4      	bcc.n	8008e78 <L_shift+0xc>
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}

08008e90 <__match>:
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	6803      	ldr	r3, [r0, #0]
 8008e94:	780c      	ldrb	r4, [r1, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	2c00      	cmp	r4, #0
 8008e9a:	d102      	bne.n	8008ea2 <__match+0x12>
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	bd30      	pop	{r4, r5, pc}
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	0015      	movs	r5, r2
 8008ea6:	3d41      	subs	r5, #65	; 0x41
 8008ea8:	2d19      	cmp	r5, #25
 8008eaa:	d800      	bhi.n	8008eae <__match+0x1e>
 8008eac:	3220      	adds	r2, #32
 8008eae:	3101      	adds	r1, #1
 8008eb0:	42a2      	cmp	r2, r4
 8008eb2:	d0ef      	beq.n	8008e94 <__match+0x4>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e7f3      	b.n	8008ea0 <__match+0x10>

08008eb8 <__hexnan>:
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	b08b      	sub	sp, #44	; 0x2c
 8008ebc:	9201      	str	r2, [sp, #4]
 8008ebe:	680a      	ldr	r2, [r1, #0]
 8008ec0:	9901      	ldr	r1, [sp, #4]
 8008ec2:	1153      	asrs	r3, r2, #5
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	18cb      	adds	r3, r1, r3
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	231f      	movs	r3, #31
 8008ecc:	401a      	ands	r2, r3
 8008ece:	9008      	str	r0, [sp, #32]
 8008ed0:	9206      	str	r2, [sp, #24]
 8008ed2:	d002      	beq.n	8008eda <__hexnan+0x22>
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	2500      	movs	r5, #0
 8008ede:	1f1e      	subs	r6, r3, #4
 8008ee0:	0037      	movs	r7, r6
 8008ee2:	0034      	movs	r4, r6
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	6035      	str	r5, [r6, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	9507      	str	r5, [sp, #28]
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	9502      	str	r5, [sp, #8]
 8008ef0:	9b05      	ldr	r3, [sp, #20]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	9b05      	ldr	r3, [sp, #20]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d028      	beq.n	8008f52 <__hexnan+0x9a>
 8008f00:	9803      	ldr	r0, [sp, #12]
 8008f02:	f7ff fd73 	bl	80089ec <__hexdig_fun>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d145      	bne.n	8008f96 <__hexnan+0xde>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d819      	bhi.n	8008f44 <__hexnan+0x8c>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	9a07      	ldr	r2, [sp, #28]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	dd12      	ble.n	8008f3e <__hexnan+0x86>
 8008f18:	42bc      	cmp	r4, r7
 8008f1a:	d206      	bcs.n	8008f2a <__hexnan+0x72>
 8008f1c:	2d07      	cmp	r5, #7
 8008f1e:	dc04      	bgt.n	8008f2a <__hexnan+0x72>
 8008f20:	002a      	movs	r2, r5
 8008f22:	0039      	movs	r1, r7
 8008f24:	0020      	movs	r0, r4
 8008f26:	f7ff ffa1 	bl	8008e6c <L_shift>
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	2508      	movs	r5, #8
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d905      	bls.n	8008f3e <__hexnan+0x86>
 8008f32:	1f27      	subs	r7, r4, #4
 8008f34:	2500      	movs	r5, #0
 8008f36:	003c      	movs	r4, r7
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	603d      	str	r5, [r7, #0]
 8008f3c:	9307      	str	r3, [sp, #28]
 8008f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	e7d5      	b.n	8008ef0 <__hexnan+0x38>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	2b29      	cmp	r3, #41	; 0x29
 8008f48:	d14a      	bne.n	8008fe0 <__hexnan+0x128>
 8008f4a:	9b05      	ldr	r3, [sp, #20]
 8008f4c:	9a08      	ldr	r2, [sp, #32]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	9b02      	ldr	r3, [sp, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d043      	beq.n	8008fe0 <__hexnan+0x128>
 8008f58:	42bc      	cmp	r4, r7
 8008f5a:	d206      	bcs.n	8008f6a <__hexnan+0xb2>
 8008f5c:	2d07      	cmp	r5, #7
 8008f5e:	dc04      	bgt.n	8008f6a <__hexnan+0xb2>
 8008f60:	002a      	movs	r2, r5
 8008f62:	0039      	movs	r1, r7
 8008f64:	0020      	movs	r0, r4
 8008f66:	f7ff ff81 	bl	8008e6c <L_shift>
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	d926      	bls.n	8008fbe <__hexnan+0x106>
 8008f70:	cc04      	ldmia	r4!, {r2}
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	3304      	adds	r3, #4
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d2fa      	bcs.n	8008f70 <__hexnan+0xb8>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	c304      	stmia	r3!, {r2}
 8008f7e:	429e      	cmp	r6, r3
 8008f80:	d2fc      	bcs.n	8008f7c <__hexnan+0xc4>
 8008f82:	6833      	ldr	r3, [r6, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <__hexnan+0xda>
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	429e      	cmp	r6, r3
 8008f8c:	d126      	bne.n	8008fdc <__hexnan+0x124>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	2005      	movs	r0, #5
 8008f94:	e025      	b.n	8008fe2 <__hexnan+0x12a>
 8008f96:	9b02      	ldr	r3, [sp, #8]
 8008f98:	3501      	adds	r5, #1
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	9302      	str	r3, [sp, #8]
 8008f9e:	2d08      	cmp	r5, #8
 8008fa0:	dd06      	ble.n	8008fb0 <__hexnan+0xf8>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	d9ca      	bls.n	8008f3e <__hexnan+0x86>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2501      	movs	r5, #1
 8008fac:	3c04      	subs	r4, #4
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	220f      	movs	r2, #15
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	4010      	ands	r0, r2
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	4318      	orrs	r0, r3
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	e7bf      	b.n	8008f3e <__hexnan+0x86>
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0de      	beq.n	8008f82 <__hexnan+0xca>
 8008fc4:	2120      	movs	r1, #32
 8008fc6:	9a06      	ldr	r2, [sp, #24]
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	1a89      	subs	r1, r1, r2
 8008fcc:	2201      	movs	r2, #1
 8008fce:	4252      	negs	r2, r2
 8008fd0:	40ca      	lsrs	r2, r1
 8008fd2:	3b04      	subs	r3, #4
 8008fd4:	6819      	ldr	r1, [r3, #0]
 8008fd6:	400a      	ands	r2, r1
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e7d2      	b.n	8008f82 <__hexnan+0xca>
 8008fdc:	3e04      	subs	r6, #4
 8008fde:	e7d0      	b.n	8008f82 <__hexnan+0xca>
 8008fe0:	2004      	movs	r0, #4
 8008fe2:	b00b      	add	sp, #44	; 0x2c
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fe6 <__locale_ctype_ptr_l>:
 8008fe6:	30ec      	adds	r0, #236	; 0xec
 8008fe8:	6800      	ldr	r0, [r0, #0]
 8008fea:	4770      	bx	lr

08008fec <__localeconv_l>:
 8008fec:	30f0      	adds	r0, #240	; 0xf0
 8008fee:	4770      	bx	lr

08008ff0 <_localeconv_r>:
 8008ff0:	4b03      	ldr	r3, [pc, #12]	; (8009000 <_localeconv_r+0x10>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a18      	ldr	r0, [r3, #32]
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d100      	bne.n	8008ffc <_localeconv_r+0xc>
 8008ffa:	4802      	ldr	r0, [pc, #8]	; (8009004 <_localeconv_r+0x14>)
 8008ffc:	30f0      	adds	r0, #240	; 0xf0
 8008ffe:	4770      	bx	lr
 8009000:	20000184 	.word	0x20000184
 8009004:	200001e8 	.word	0x200001e8

08009008 <malloc>:
 8009008:	b510      	push	{r4, lr}
 800900a:	4b03      	ldr	r3, [pc, #12]	; (8009018 <malloc+0x10>)
 800900c:	0001      	movs	r1, r0
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	f000 fc70 	bl	80098f4 <_malloc_r>
 8009014:	bd10      	pop	{r4, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	20000184 	.word	0x20000184

0800901c <__ascii_mbtowc>:
 800901c:	b082      	sub	sp, #8
 800901e:	2900      	cmp	r1, #0
 8009020:	d100      	bne.n	8009024 <__ascii_mbtowc+0x8>
 8009022:	a901      	add	r1, sp, #4
 8009024:	1e10      	subs	r0, r2, #0
 8009026:	d006      	beq.n	8009036 <__ascii_mbtowc+0x1a>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <__ascii_mbtowc+0x1e>
 800902c:	7813      	ldrb	r3, [r2, #0]
 800902e:	600b      	str	r3, [r1, #0]
 8009030:	7810      	ldrb	r0, [r2, #0]
 8009032:	1e43      	subs	r3, r0, #1
 8009034:	4198      	sbcs	r0, r3
 8009036:	b002      	add	sp, #8
 8009038:	4770      	bx	lr
 800903a:	2002      	movs	r0, #2
 800903c:	4240      	negs	r0, r0
 800903e:	e7fa      	b.n	8009036 <__ascii_mbtowc+0x1a>

08009040 <memchr>:
 8009040:	b2c9      	uxtb	r1, r1
 8009042:	1882      	adds	r2, r0, r2
 8009044:	4290      	cmp	r0, r2
 8009046:	d101      	bne.n	800904c <memchr+0xc>
 8009048:	2000      	movs	r0, #0
 800904a:	4770      	bx	lr
 800904c:	7803      	ldrb	r3, [r0, #0]
 800904e:	428b      	cmp	r3, r1
 8009050:	d0fb      	beq.n	800904a <memchr+0xa>
 8009052:	3001      	adds	r0, #1
 8009054:	e7f6      	b.n	8009044 <memchr+0x4>

08009056 <_Balloc>:
 8009056:	b570      	push	{r4, r5, r6, lr}
 8009058:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800905a:	0004      	movs	r4, r0
 800905c:	000d      	movs	r5, r1
 800905e:	2e00      	cmp	r6, #0
 8009060:	d107      	bne.n	8009072 <_Balloc+0x1c>
 8009062:	2010      	movs	r0, #16
 8009064:	f7ff ffd0 	bl	8009008 <malloc>
 8009068:	6260      	str	r0, [r4, #36]	; 0x24
 800906a:	6046      	str	r6, [r0, #4]
 800906c:	6086      	str	r6, [r0, #8]
 800906e:	6006      	str	r6, [r0, #0]
 8009070:	60c6      	str	r6, [r0, #12]
 8009072:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009074:	68f3      	ldr	r3, [r6, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d013      	beq.n	80090a2 <_Balloc+0x4c>
 800907a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800907c:	00aa      	lsls	r2, r5, #2
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	189b      	adds	r3, r3, r2
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	2800      	cmp	r0, #0
 8009086:	d118      	bne.n	80090ba <_Balloc+0x64>
 8009088:	2101      	movs	r1, #1
 800908a:	000e      	movs	r6, r1
 800908c:	40ae      	lsls	r6, r5
 800908e:	1d72      	adds	r2, r6, #5
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	0020      	movs	r0, r4
 8009094:	f000 fbd5 	bl	8009842 <_calloc_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	d00c      	beq.n	80090b6 <_Balloc+0x60>
 800909c:	6045      	str	r5, [r0, #4]
 800909e:	6086      	str	r6, [r0, #8]
 80090a0:	e00d      	b.n	80090be <_Balloc+0x68>
 80090a2:	2221      	movs	r2, #33	; 0x21
 80090a4:	2104      	movs	r1, #4
 80090a6:	0020      	movs	r0, r4
 80090a8:	f000 fbcb 	bl	8009842 <_calloc_r>
 80090ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ae:	60f0      	str	r0, [r6, #12]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e1      	bne.n	800907a <_Balloc+0x24>
 80090b6:	2000      	movs	r0, #0
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	6802      	ldr	r2, [r0, #0]
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	2300      	movs	r3, #0
 80090c0:	6103      	str	r3, [r0, #16]
 80090c2:	60c3      	str	r3, [r0, #12]
 80090c4:	e7f8      	b.n	80090b8 <_Balloc+0x62>

080090c6 <_Bfree>:
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090ca:	0006      	movs	r6, r0
 80090cc:	000d      	movs	r5, r1
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d107      	bne.n	80090e2 <_Bfree+0x1c>
 80090d2:	2010      	movs	r0, #16
 80090d4:	f7ff ff98 	bl	8009008 <malloc>
 80090d8:	6270      	str	r0, [r6, #36]	; 0x24
 80090da:	6044      	str	r4, [r0, #4]
 80090dc:	6084      	str	r4, [r0, #8]
 80090de:	6004      	str	r4, [r0, #0]
 80090e0:	60c4      	str	r4, [r0, #12]
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	d007      	beq.n	80090f6 <_Bfree+0x30>
 80090e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090e8:	686a      	ldr	r2, [r5, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	601d      	str	r5, [r3, #0]
 80090f6:	bd70      	pop	{r4, r5, r6, pc}

080090f8 <__multadd>:
 80090f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090fa:	001e      	movs	r6, r3
 80090fc:	2314      	movs	r3, #20
 80090fe:	469c      	mov	ip, r3
 8009100:	0007      	movs	r7, r0
 8009102:	000c      	movs	r4, r1
 8009104:	2000      	movs	r0, #0
 8009106:	690d      	ldr	r5, [r1, #16]
 8009108:	448c      	add	ip, r1
 800910a:	4663      	mov	r3, ip
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3001      	adds	r0, #1
 8009110:	b299      	uxth	r1, r3
 8009112:	4663      	mov	r3, ip
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4351      	muls	r1, r2
 8009118:	0c1b      	lsrs	r3, r3, #16
 800911a:	4353      	muls	r3, r2
 800911c:	1989      	adds	r1, r1, r6
 800911e:	0c0e      	lsrs	r6, r1, #16
 8009120:	199b      	adds	r3, r3, r6
 8009122:	b289      	uxth	r1, r1
 8009124:	0c1e      	lsrs	r6, r3, #16
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	185b      	adds	r3, r3, r1
 800912a:	4661      	mov	r1, ip
 800912c:	c108      	stmia	r1!, {r3}
 800912e:	468c      	mov	ip, r1
 8009130:	4285      	cmp	r5, r0
 8009132:	dcea      	bgt.n	800910a <__multadd+0x12>
 8009134:	2e00      	cmp	r6, #0
 8009136:	d01b      	beq.n	8009170 <__multadd+0x78>
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	42ab      	cmp	r3, r5
 800913c:	dc12      	bgt.n	8009164 <__multadd+0x6c>
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	0038      	movs	r0, r7
 8009142:	1c59      	adds	r1, r3, #1
 8009144:	f7ff ff87 	bl	8009056 <_Balloc>
 8009148:	0021      	movs	r1, r4
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	9001      	str	r0, [sp, #4]
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	310c      	adds	r1, #12
 8009154:	300c      	adds	r0, #12
 8009156:	f7fd f829 	bl	80061ac <memcpy>
 800915a:	0021      	movs	r1, r4
 800915c:	0038      	movs	r0, r7
 800915e:	f7ff ffb2 	bl	80090c6 <_Bfree>
 8009162:	9c01      	ldr	r4, [sp, #4]
 8009164:	1d2b      	adds	r3, r5, #4
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	18e3      	adds	r3, r4, r3
 800916a:	3501      	adds	r5, #1
 800916c:	605e      	str	r6, [r3, #4]
 800916e:	6125      	str	r5, [r4, #16]
 8009170:	0020      	movs	r0, r4
 8009172:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08009174 <__s2b>:
 8009174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009176:	0006      	movs	r6, r0
 8009178:	0018      	movs	r0, r3
 800917a:	000c      	movs	r4, r1
 800917c:	3008      	adds	r0, #8
 800917e:	2109      	movs	r1, #9
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	0015      	movs	r5, r2
 8009184:	f7f7 f866 	bl	8000254 <__divsi3>
 8009188:	2301      	movs	r3, #1
 800918a:	2100      	movs	r1, #0
 800918c:	4283      	cmp	r3, r0
 800918e:	db1f      	blt.n	80091d0 <__s2b+0x5c>
 8009190:	0030      	movs	r0, r6
 8009192:	f7ff ff60 	bl	8009056 <_Balloc>
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	6143      	str	r3, [r0, #20]
 800919a:	2301      	movs	r3, #1
 800919c:	6103      	str	r3, [r0, #16]
 800919e:	2d09      	cmp	r5, #9
 80091a0:	dd19      	ble.n	80091d6 <__s2b+0x62>
 80091a2:	0023      	movs	r3, r4
 80091a4:	3309      	adds	r3, #9
 80091a6:	001f      	movs	r7, r3
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	1964      	adds	r4, r4, r5
 80091ac:	783b      	ldrb	r3, [r7, #0]
 80091ae:	0001      	movs	r1, r0
 80091b0:	3b30      	subs	r3, #48	; 0x30
 80091b2:	220a      	movs	r2, #10
 80091b4:	0030      	movs	r0, r6
 80091b6:	3701      	adds	r7, #1
 80091b8:	f7ff ff9e 	bl	80090f8 <__multadd>
 80091bc:	42a7      	cmp	r7, r4
 80091be:	d1f5      	bne.n	80091ac <__s2b+0x38>
 80091c0:	9b00      	ldr	r3, [sp, #0]
 80091c2:	195c      	adds	r4, r3, r5
 80091c4:	3c08      	subs	r4, #8
 80091c6:	002f      	movs	r7, r5
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	429f      	cmp	r7, r3
 80091cc:	db06      	blt.n	80091dc <__s2b+0x68>
 80091ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	3101      	adds	r1, #1
 80091d4:	e7da      	b.n	800918c <__s2b+0x18>
 80091d6:	340a      	adds	r4, #10
 80091d8:	2509      	movs	r5, #9
 80091da:	e7f4      	b.n	80091c6 <__s2b+0x52>
 80091dc:	1b63      	subs	r3, r4, r5
 80091de:	5ddb      	ldrb	r3, [r3, r7]
 80091e0:	0001      	movs	r1, r0
 80091e2:	3b30      	subs	r3, #48	; 0x30
 80091e4:	220a      	movs	r2, #10
 80091e6:	0030      	movs	r0, r6
 80091e8:	f7ff ff86 	bl	80090f8 <__multadd>
 80091ec:	3701      	adds	r7, #1
 80091ee:	e7eb      	b.n	80091c8 <__s2b+0x54>

080091f0 <__hi0bits>:
 80091f0:	0003      	movs	r3, r0
 80091f2:	0c02      	lsrs	r2, r0, #16
 80091f4:	2000      	movs	r0, #0
 80091f6:	4282      	cmp	r2, r0
 80091f8:	d101      	bne.n	80091fe <__hi0bits+0xe>
 80091fa:	041b      	lsls	r3, r3, #16
 80091fc:	3010      	adds	r0, #16
 80091fe:	0e1a      	lsrs	r2, r3, #24
 8009200:	d101      	bne.n	8009206 <__hi0bits+0x16>
 8009202:	3008      	adds	r0, #8
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	0f1a      	lsrs	r2, r3, #28
 8009208:	d101      	bne.n	800920e <__hi0bits+0x1e>
 800920a:	3004      	adds	r0, #4
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	0f9a      	lsrs	r2, r3, #30
 8009210:	d101      	bne.n	8009216 <__hi0bits+0x26>
 8009212:	3002      	adds	r0, #2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	db03      	blt.n	8009222 <__hi0bits+0x32>
 800921a:	3001      	adds	r0, #1
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	d400      	bmi.n	8009222 <__hi0bits+0x32>
 8009220:	2020      	movs	r0, #32
 8009222:	4770      	bx	lr

08009224 <__lo0bits>:
 8009224:	2207      	movs	r2, #7
 8009226:	6803      	ldr	r3, [r0, #0]
 8009228:	b510      	push	{r4, lr}
 800922a:	0001      	movs	r1, r0
 800922c:	401a      	ands	r2, r3
 800922e:	d00d      	beq.n	800924c <__lo0bits+0x28>
 8009230:	2401      	movs	r4, #1
 8009232:	2000      	movs	r0, #0
 8009234:	4223      	tst	r3, r4
 8009236:	d105      	bne.n	8009244 <__lo0bits+0x20>
 8009238:	3002      	adds	r0, #2
 800923a:	4203      	tst	r3, r0
 800923c:	d003      	beq.n	8009246 <__lo0bits+0x22>
 800923e:	40e3      	lsrs	r3, r4
 8009240:	0020      	movs	r0, r4
 8009242:	600b      	str	r3, [r1, #0]
 8009244:	bd10      	pop	{r4, pc}
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	600b      	str	r3, [r1, #0]
 800924a:	e7fb      	b.n	8009244 <__lo0bits+0x20>
 800924c:	b29c      	uxth	r4, r3
 800924e:	0010      	movs	r0, r2
 8009250:	2c00      	cmp	r4, #0
 8009252:	d101      	bne.n	8009258 <__lo0bits+0x34>
 8009254:	2010      	movs	r0, #16
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	b2da      	uxtb	r2, r3
 800925a:	2a00      	cmp	r2, #0
 800925c:	d101      	bne.n	8009262 <__lo0bits+0x3e>
 800925e:	3008      	adds	r0, #8
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	071a      	lsls	r2, r3, #28
 8009264:	d101      	bne.n	800926a <__lo0bits+0x46>
 8009266:	3004      	adds	r0, #4
 8009268:	091b      	lsrs	r3, r3, #4
 800926a:	079a      	lsls	r2, r3, #30
 800926c:	d101      	bne.n	8009272 <__lo0bits+0x4e>
 800926e:	3002      	adds	r0, #2
 8009270:	089b      	lsrs	r3, r3, #2
 8009272:	07da      	lsls	r2, r3, #31
 8009274:	d4e8      	bmi.n	8009248 <__lo0bits+0x24>
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	d001      	beq.n	800927e <__lo0bits+0x5a>
 800927a:	3001      	adds	r0, #1
 800927c:	e7e4      	b.n	8009248 <__lo0bits+0x24>
 800927e:	2020      	movs	r0, #32
 8009280:	e7e0      	b.n	8009244 <__lo0bits+0x20>

08009282 <__i2b>:
 8009282:	b510      	push	{r4, lr}
 8009284:	000c      	movs	r4, r1
 8009286:	2101      	movs	r1, #1
 8009288:	f7ff fee5 	bl	8009056 <_Balloc>
 800928c:	2301      	movs	r3, #1
 800928e:	6144      	str	r4, [r0, #20]
 8009290:	6103      	str	r3, [r0, #16]
 8009292:	bd10      	pop	{r4, pc}

08009294 <__multiply>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	0014      	movs	r4, r2
 800929a:	6912      	ldr	r2, [r2, #16]
 800929c:	b089      	sub	sp, #36	; 0x24
 800929e:	000d      	movs	r5, r1
 80092a0:	4293      	cmp	r3, r2
 80092a2:	da01      	bge.n	80092a8 <__multiply+0x14>
 80092a4:	0025      	movs	r5, r4
 80092a6:	000c      	movs	r4, r1
 80092a8:	692f      	ldr	r7, [r5, #16]
 80092aa:	6926      	ldr	r6, [r4, #16]
 80092ac:	6869      	ldr	r1, [r5, #4]
 80092ae:	19bb      	adds	r3, r7, r6
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	68ab      	ldr	r3, [r5, #8]
 80092b4:	19ba      	adds	r2, r7, r6
 80092b6:	4293      	cmp	r3, r2
 80092b8:	da00      	bge.n	80092bc <__multiply+0x28>
 80092ba:	3101      	adds	r1, #1
 80092bc:	f7ff fecb 	bl	8009056 <_Balloc>
 80092c0:	0002      	movs	r2, r0
 80092c2:	19bb      	adds	r3, r7, r6
 80092c4:	3214      	adds	r2, #20
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	18d3      	adds	r3, r2, r3
 80092ca:	469c      	mov	ip, r3
 80092cc:	2100      	movs	r1, #0
 80092ce:	0013      	movs	r3, r2
 80092d0:	9004      	str	r0, [sp, #16]
 80092d2:	4563      	cmp	r3, ip
 80092d4:	d31d      	bcc.n	8009312 <__multiply+0x7e>
 80092d6:	3514      	adds	r5, #20
 80092d8:	00bf      	lsls	r7, r7, #2
 80092da:	19eb      	adds	r3, r5, r7
 80092dc:	3414      	adds	r4, #20
 80092de:	00b6      	lsls	r6, r6, #2
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	19a3      	adds	r3, r4, r6
 80092e4:	9503      	str	r5, [sp, #12]
 80092e6:	9401      	str	r4, [sp, #4]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	4299      	cmp	r1, r3
 80092f0:	d311      	bcc.n	8009316 <__multiply+0x82>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd06      	ble.n	8009306 <__multiply+0x72>
 80092f8:	2304      	movs	r3, #4
 80092fa:	425b      	negs	r3, r3
 80092fc:	449c      	add	ip, r3
 80092fe:	4663      	mov	r3, ip
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d051      	beq.n	80093aa <__multiply+0x116>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	9a02      	ldr	r2, [sp, #8]
 800930a:	0018      	movs	r0, r3
 800930c:	611a      	str	r2, [r3, #16]
 800930e:	b009      	add	sp, #36	; 0x24
 8009310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009312:	c302      	stmia	r3!, {r1}
 8009314:	e7dd      	b.n	80092d2 <__multiply+0x3e>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	b298      	uxth	r0, r3
 800931c:	2800      	cmp	r0, #0
 800931e:	d01c      	beq.n	800935a <__multiply+0xc6>
 8009320:	0015      	movs	r5, r2
 8009322:	2600      	movs	r6, #0
 8009324:	9f03      	ldr	r7, [sp, #12]
 8009326:	cf02      	ldmia	r7!, {r1}
 8009328:	682c      	ldr	r4, [r5, #0]
 800932a:	b28b      	uxth	r3, r1
 800932c:	4343      	muls	r3, r0
 800932e:	0c09      	lsrs	r1, r1, #16
 8009330:	4341      	muls	r1, r0
 8009332:	b2a4      	uxth	r4, r4
 8009334:	191b      	adds	r3, r3, r4
 8009336:	199b      	adds	r3, r3, r6
 8009338:	000e      	movs	r6, r1
 800933a:	6829      	ldr	r1, [r5, #0]
 800933c:	9506      	str	r5, [sp, #24]
 800933e:	0c09      	lsrs	r1, r1, #16
 8009340:	1871      	adds	r1, r6, r1
 8009342:	0c1e      	lsrs	r6, r3, #16
 8009344:	1989      	adds	r1, r1, r6
 8009346:	0c0e      	lsrs	r6, r1, #16
 8009348:	b29b      	uxth	r3, r3
 800934a:	0409      	lsls	r1, r1, #16
 800934c:	430b      	orrs	r3, r1
 800934e:	c508      	stmia	r5!, {r3}
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	42bb      	cmp	r3, r7
 8009354:	d8e7      	bhi.n	8009326 <__multiply+0x92>
 8009356:	9b06      	ldr	r3, [sp, #24]
 8009358:	605e      	str	r6, [r3, #4]
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	0c1d      	lsrs	r5, r3, #16
 8009360:	d01e      	beq.n	80093a0 <__multiply+0x10c>
 8009362:	0010      	movs	r0, r2
 8009364:	2700      	movs	r7, #0
 8009366:	6813      	ldr	r3, [r2, #0]
 8009368:	9e03      	ldr	r6, [sp, #12]
 800936a:	6831      	ldr	r1, [r6, #0]
 800936c:	6804      	ldr	r4, [r0, #0]
 800936e:	b289      	uxth	r1, r1
 8009370:	4369      	muls	r1, r5
 8009372:	0c24      	lsrs	r4, r4, #16
 8009374:	1909      	adds	r1, r1, r4
 8009376:	19c9      	adds	r1, r1, r7
 8009378:	040f      	lsls	r7, r1, #16
 800937a:	b29b      	uxth	r3, r3
 800937c:	433b      	orrs	r3, r7
 800937e:	6003      	str	r3, [r0, #0]
 8009380:	ce80      	ldmia	r6!, {r7}
 8009382:	6843      	ldr	r3, [r0, #4]
 8009384:	0c3f      	lsrs	r7, r7, #16
 8009386:	436f      	muls	r7, r5
 8009388:	b29b      	uxth	r3, r3
 800938a:	18fb      	adds	r3, r7, r3
 800938c:	0c09      	lsrs	r1, r1, #16
 800938e:	185b      	adds	r3, r3, r1
 8009390:	9905      	ldr	r1, [sp, #20]
 8009392:	9006      	str	r0, [sp, #24]
 8009394:	0c1f      	lsrs	r7, r3, #16
 8009396:	3004      	adds	r0, #4
 8009398:	42b1      	cmp	r1, r6
 800939a:	d8e6      	bhi.n	800936a <__multiply+0xd6>
 800939c:	9906      	ldr	r1, [sp, #24]
 800939e:	604b      	str	r3, [r1, #4]
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	3204      	adds	r2, #4
 80093a4:	3304      	adds	r3, #4
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	e79f      	b.n	80092ea <__multiply+0x56>
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	e79f      	b.n	80092f2 <__multiply+0x5e>
	...

080093b4 <__pow5mult>:
 80093b4:	2303      	movs	r3, #3
 80093b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b8:	4013      	ands	r3, r2
 80093ba:	0005      	movs	r5, r0
 80093bc:	000e      	movs	r6, r1
 80093be:	0014      	movs	r4, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d008      	beq.n	80093d6 <__pow5mult+0x22>
 80093c4:	4922      	ldr	r1, [pc, #136]	; (8009450 <__pow5mult+0x9c>)
 80093c6:	3b01      	subs	r3, #1
 80093c8:	009a      	lsls	r2, r3, #2
 80093ca:	5852      	ldr	r2, [r2, r1]
 80093cc:	2300      	movs	r3, #0
 80093ce:	0031      	movs	r1, r6
 80093d0:	f7ff fe92 	bl	80090f8 <__multadd>
 80093d4:	0006      	movs	r6, r0
 80093d6:	10a3      	asrs	r3, r4, #2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	d036      	beq.n	800944a <__pow5mult+0x96>
 80093dc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80093de:	2c00      	cmp	r4, #0
 80093e0:	d107      	bne.n	80093f2 <__pow5mult+0x3e>
 80093e2:	2010      	movs	r0, #16
 80093e4:	f7ff fe10 	bl	8009008 <malloc>
 80093e8:	6268      	str	r0, [r5, #36]	; 0x24
 80093ea:	6044      	str	r4, [r0, #4]
 80093ec:	6084      	str	r4, [r0, #8]
 80093ee:	6004      	str	r4, [r0, #0]
 80093f0:	60c4      	str	r4, [r0, #12]
 80093f2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80093f4:	68bc      	ldr	r4, [r7, #8]
 80093f6:	2c00      	cmp	r4, #0
 80093f8:	d107      	bne.n	800940a <__pow5mult+0x56>
 80093fa:	4916      	ldr	r1, [pc, #88]	; (8009454 <__pow5mult+0xa0>)
 80093fc:	0028      	movs	r0, r5
 80093fe:	f7ff ff40 	bl	8009282 <__i2b>
 8009402:	2300      	movs	r3, #0
 8009404:	0004      	movs	r4, r0
 8009406:	60b8      	str	r0, [r7, #8]
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	2201      	movs	r2, #1
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	4213      	tst	r3, r2
 8009410:	d00a      	beq.n	8009428 <__pow5mult+0x74>
 8009412:	0031      	movs	r1, r6
 8009414:	0022      	movs	r2, r4
 8009416:	0028      	movs	r0, r5
 8009418:	f7ff ff3c 	bl	8009294 <__multiply>
 800941c:	0007      	movs	r7, r0
 800941e:	0031      	movs	r1, r6
 8009420:	0028      	movs	r0, r5
 8009422:	f7ff fe50 	bl	80090c6 <_Bfree>
 8009426:	003e      	movs	r6, r7
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	105b      	asrs	r3, r3, #1
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	d00c      	beq.n	800944a <__pow5mult+0x96>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	2800      	cmp	r0, #0
 8009434:	d107      	bne.n	8009446 <__pow5mult+0x92>
 8009436:	0022      	movs	r2, r4
 8009438:	0021      	movs	r1, r4
 800943a:	0028      	movs	r0, r5
 800943c:	f7ff ff2a 	bl	8009294 <__multiply>
 8009440:	2300      	movs	r3, #0
 8009442:	6020      	str	r0, [r4, #0]
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	0004      	movs	r4, r0
 8009448:	e7df      	b.n	800940a <__pow5mult+0x56>
 800944a:	0030      	movs	r0, r6
 800944c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	0800a0b0 	.word	0x0800a0b0
 8009454:	00000271 	.word	0x00000271

08009458 <__lshift>:
 8009458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945a:	000d      	movs	r5, r1
 800945c:	0017      	movs	r7, r2
 800945e:	692b      	ldr	r3, [r5, #16]
 8009460:	1154      	asrs	r4, r2, #5
 8009462:	b085      	sub	sp, #20
 8009464:	18e3      	adds	r3, r4, r3
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	3301      	adds	r3, #1
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	6849      	ldr	r1, [r1, #4]
 800946e:	68ab      	ldr	r3, [r5, #8]
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9a00      	ldr	r2, [sp, #0]
 8009474:	4293      	cmp	r3, r2
 8009476:	db35      	blt.n	80094e4 <__lshift+0x8c>
 8009478:	9802      	ldr	r0, [sp, #8]
 800947a:	f7ff fdec 	bl	8009056 <_Balloc>
 800947e:	2300      	movs	r3, #0
 8009480:	0002      	movs	r2, r0
 8009482:	0006      	movs	r6, r0
 8009484:	0019      	movs	r1, r3
 8009486:	3214      	adds	r2, #20
 8009488:	42a3      	cmp	r3, r4
 800948a:	db2e      	blt.n	80094ea <__lshift+0x92>
 800948c:	43e3      	mvns	r3, r4
 800948e:	17db      	asrs	r3, r3, #31
 8009490:	401c      	ands	r4, r3
 8009492:	002b      	movs	r3, r5
 8009494:	00a4      	lsls	r4, r4, #2
 8009496:	1914      	adds	r4, r2, r4
 8009498:	692a      	ldr	r2, [r5, #16]
 800949a:	3314      	adds	r3, #20
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	189a      	adds	r2, r3, r2
 80094a0:	4694      	mov	ip, r2
 80094a2:	221f      	movs	r2, #31
 80094a4:	4017      	ands	r7, r2
 80094a6:	d024      	beq.n	80094f2 <__lshift+0x9a>
 80094a8:	3201      	adds	r2, #1
 80094aa:	1bd2      	subs	r2, r2, r7
 80094ac:	9203      	str	r2, [sp, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	6819      	ldr	r1, [r3, #0]
 80094b2:	0020      	movs	r0, r4
 80094b4:	40b9      	lsls	r1, r7
 80094b6:	430a      	orrs	r2, r1
 80094b8:	c404      	stmia	r4!, {r2}
 80094ba:	cb04      	ldmia	r3!, {r2}
 80094bc:	9903      	ldr	r1, [sp, #12]
 80094be:	40ca      	lsrs	r2, r1
 80094c0:	459c      	cmp	ip, r3
 80094c2:	d8f5      	bhi.n	80094b0 <__lshift+0x58>
 80094c4:	6042      	str	r2, [r0, #4]
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d002      	beq.n	80094d0 <__lshift+0x78>
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	3302      	adds	r3, #2
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	9b00      	ldr	r3, [sp, #0]
 80094d2:	9802      	ldr	r0, [sp, #8]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	6133      	str	r3, [r6, #16]
 80094d8:	0029      	movs	r1, r5
 80094da:	f7ff fdf4 	bl	80090c6 <_Bfree>
 80094de:	0030      	movs	r0, r6
 80094e0:	b005      	add	sp, #20
 80094e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e4:	3101      	adds	r1, #1
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	e7c3      	b.n	8009472 <__lshift+0x1a>
 80094ea:	0098      	lsls	r0, r3, #2
 80094ec:	5011      	str	r1, [r2, r0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	e7ca      	b.n	8009488 <__lshift+0x30>
 80094f2:	cb04      	ldmia	r3!, {r2}
 80094f4:	c404      	stmia	r4!, {r2}
 80094f6:	459c      	cmp	ip, r3
 80094f8:	d8fb      	bhi.n	80094f2 <__lshift+0x9a>
 80094fa:	e7e9      	b.n	80094d0 <__lshift+0x78>

080094fc <__mcmp>:
 80094fc:	690a      	ldr	r2, [r1, #16]
 80094fe:	6903      	ldr	r3, [r0, #16]
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	d10d      	bne.n	8009522 <__mcmp+0x26>
 8009506:	0092      	lsls	r2, r2, #2
 8009508:	3014      	adds	r0, #20
 800950a:	3114      	adds	r1, #20
 800950c:	1884      	adds	r4, r0, r2
 800950e:	1889      	adds	r1, r1, r2
 8009510:	3c04      	subs	r4, #4
 8009512:	3904      	subs	r1, #4
 8009514:	6825      	ldr	r5, [r4, #0]
 8009516:	680a      	ldr	r2, [r1, #0]
 8009518:	4295      	cmp	r5, r2
 800951a:	d004      	beq.n	8009526 <__mcmp+0x2a>
 800951c:	2301      	movs	r3, #1
 800951e:	4295      	cmp	r5, r2
 8009520:	d304      	bcc.n	800952c <__mcmp+0x30>
 8009522:	0018      	movs	r0, r3
 8009524:	bd30      	pop	{r4, r5, pc}
 8009526:	42a0      	cmp	r0, r4
 8009528:	d3f2      	bcc.n	8009510 <__mcmp+0x14>
 800952a:	e7fa      	b.n	8009522 <__mcmp+0x26>
 800952c:	425b      	negs	r3, r3
 800952e:	e7f8      	b.n	8009522 <__mcmp+0x26>

08009530 <__mdiff>:
 8009530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009532:	000d      	movs	r5, r1
 8009534:	b085      	sub	sp, #20
 8009536:	0007      	movs	r7, r0
 8009538:	0011      	movs	r1, r2
 800953a:	0028      	movs	r0, r5
 800953c:	0014      	movs	r4, r2
 800953e:	f7ff ffdd 	bl	80094fc <__mcmp>
 8009542:	1e06      	subs	r6, r0, #0
 8009544:	d108      	bne.n	8009558 <__mdiff+0x28>
 8009546:	0001      	movs	r1, r0
 8009548:	0038      	movs	r0, r7
 800954a:	f7ff fd84 	bl	8009056 <_Balloc>
 800954e:	2301      	movs	r3, #1
 8009550:	6146      	str	r6, [r0, #20]
 8009552:	6103      	str	r3, [r0, #16]
 8009554:	b005      	add	sp, #20
 8009556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009558:	2301      	movs	r3, #1
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	2800      	cmp	r0, #0
 800955e:	db04      	blt.n	800956a <__mdiff+0x3a>
 8009560:	0023      	movs	r3, r4
 8009562:	002c      	movs	r4, r5
 8009564:	001d      	movs	r5, r3
 8009566:	2300      	movs	r3, #0
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	6861      	ldr	r1, [r4, #4]
 800956c:	0038      	movs	r0, r7
 800956e:	f7ff fd72 	bl	8009056 <_Balloc>
 8009572:	002f      	movs	r7, r5
 8009574:	2200      	movs	r2, #0
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	6926      	ldr	r6, [r4, #16]
 800957a:	60c3      	str	r3, [r0, #12]
 800957c:	3414      	adds	r4, #20
 800957e:	00b3      	lsls	r3, r6, #2
 8009580:	18e3      	adds	r3, r4, r3
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	692b      	ldr	r3, [r5, #16]
 8009586:	3714      	adds	r7, #20
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	0003      	movs	r3, r0
 8009590:	4694      	mov	ip, r2
 8009592:	3314      	adds	r3, #20
 8009594:	cc20      	ldmia	r4!, {r5}
 8009596:	cf04      	ldmia	r7!, {r2}
 8009598:	9201      	str	r2, [sp, #4]
 800959a:	b2aa      	uxth	r2, r5
 800959c:	4494      	add	ip, r2
 800959e:	466a      	mov	r2, sp
 80095a0:	4661      	mov	r1, ip
 80095a2:	8892      	ldrh	r2, [r2, #4]
 80095a4:	0c2d      	lsrs	r5, r5, #16
 80095a6:	1a8a      	subs	r2, r1, r2
 80095a8:	9901      	ldr	r1, [sp, #4]
 80095aa:	0c09      	lsrs	r1, r1, #16
 80095ac:	1a69      	subs	r1, r5, r1
 80095ae:	1415      	asrs	r5, r2, #16
 80095b0:	1949      	adds	r1, r1, r5
 80095b2:	140d      	asrs	r5, r1, #16
 80095b4:	b292      	uxth	r2, r2
 80095b6:	0409      	lsls	r1, r1, #16
 80095b8:	430a      	orrs	r2, r1
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	9a03      	ldr	r2, [sp, #12]
 80095be:	46ac      	mov	ip, r5
 80095c0:	3304      	adds	r3, #4
 80095c2:	42ba      	cmp	r2, r7
 80095c4:	d8e6      	bhi.n	8009594 <__mdiff+0x64>
 80095c6:	9902      	ldr	r1, [sp, #8]
 80095c8:	001a      	movs	r2, r3
 80095ca:	428c      	cmp	r4, r1
 80095cc:	d305      	bcc.n	80095da <__mdiff+0xaa>
 80095ce:	3a04      	subs	r2, #4
 80095d0:	6813      	ldr	r3, [r2, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00e      	beq.n	80095f4 <__mdiff+0xc4>
 80095d6:	6106      	str	r6, [r0, #16]
 80095d8:	e7bc      	b.n	8009554 <__mdiff+0x24>
 80095da:	cc04      	ldmia	r4!, {r2}
 80095dc:	b291      	uxth	r1, r2
 80095de:	4461      	add	r1, ip
 80095e0:	140d      	asrs	r5, r1, #16
 80095e2:	0c12      	lsrs	r2, r2, #16
 80095e4:	1952      	adds	r2, r2, r5
 80095e6:	1415      	asrs	r5, r2, #16
 80095e8:	b289      	uxth	r1, r1
 80095ea:	0412      	lsls	r2, r2, #16
 80095ec:	430a      	orrs	r2, r1
 80095ee:	46ac      	mov	ip, r5
 80095f0:	c304      	stmia	r3!, {r2}
 80095f2:	e7e8      	b.n	80095c6 <__mdiff+0x96>
 80095f4:	3e01      	subs	r6, #1
 80095f6:	e7ea      	b.n	80095ce <__mdiff+0x9e>

080095f8 <__ulp>:
 80095f8:	000b      	movs	r3, r1
 80095fa:	4910      	ldr	r1, [pc, #64]	; (800963c <__ulp+0x44>)
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4019      	ands	r1, r3
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <__ulp+0x48>)
 8009602:	18c9      	adds	r1, r1, r3
 8009604:	2900      	cmp	r1, #0
 8009606:	dd04      	ble.n	8009612 <__ulp+0x1a>
 8009608:	2200      	movs	r2, #0
 800960a:	000b      	movs	r3, r1
 800960c:	0010      	movs	r0, r2
 800960e:	0019      	movs	r1, r3
 8009610:	bd10      	pop	{r4, pc}
 8009612:	4249      	negs	r1, r1
 8009614:	1509      	asrs	r1, r1, #20
 8009616:	2200      	movs	r2, #0
 8009618:	2300      	movs	r3, #0
 800961a:	2913      	cmp	r1, #19
 800961c:	dc04      	bgt.n	8009628 <__ulp+0x30>
 800961e:	2080      	movs	r0, #128	; 0x80
 8009620:	0300      	lsls	r0, r0, #12
 8009622:	4108      	asrs	r0, r1
 8009624:	0003      	movs	r3, r0
 8009626:	e7f1      	b.n	800960c <__ulp+0x14>
 8009628:	3914      	subs	r1, #20
 800962a:	2001      	movs	r0, #1
 800962c:	291e      	cmp	r1, #30
 800962e:	dc02      	bgt.n	8009636 <__ulp+0x3e>
 8009630:	241f      	movs	r4, #31
 8009632:	1a61      	subs	r1, r4, r1
 8009634:	4088      	lsls	r0, r1
 8009636:	0002      	movs	r2, r0
 8009638:	e7e8      	b.n	800960c <__ulp+0x14>
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	7ff00000 	.word	0x7ff00000
 8009640:	fcc00000 	.word	0xfcc00000

08009644 <__b2d>:
 8009644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009646:	0006      	movs	r6, r0
 8009648:	6903      	ldr	r3, [r0, #16]
 800964a:	3614      	adds	r6, #20
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	18f3      	adds	r3, r6, r3
 8009650:	1f1d      	subs	r5, r3, #4
 8009652:	682c      	ldr	r4, [r5, #0]
 8009654:	000f      	movs	r7, r1
 8009656:	0020      	movs	r0, r4
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	f7ff fdc9 	bl	80091f0 <__hi0bits>
 800965e:	2320      	movs	r3, #32
 8009660:	1a1b      	subs	r3, r3, r0
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	491c      	ldr	r1, [pc, #112]	; (80096d8 <__b2d+0x94>)
 8009666:	280a      	cmp	r0, #10
 8009668:	dc16      	bgt.n	8009698 <__b2d+0x54>
 800966a:	230b      	movs	r3, #11
 800966c:	0027      	movs	r7, r4
 800966e:	1a1b      	subs	r3, r3, r0
 8009670:	40df      	lsrs	r7, r3
 8009672:	4339      	orrs	r1, r7
 8009674:	469c      	mov	ip, r3
 8009676:	000b      	movs	r3, r1
 8009678:	2100      	movs	r1, #0
 800967a:	42ae      	cmp	r6, r5
 800967c:	d202      	bcs.n	8009684 <__b2d+0x40>
 800967e:	9901      	ldr	r1, [sp, #4]
 8009680:	3908      	subs	r1, #8
 8009682:	6809      	ldr	r1, [r1, #0]
 8009684:	3015      	adds	r0, #21
 8009686:	4084      	lsls	r4, r0
 8009688:	4660      	mov	r0, ip
 800968a:	40c1      	lsrs	r1, r0
 800968c:	430c      	orrs	r4, r1
 800968e:	0022      	movs	r2, r4
 8009690:	0010      	movs	r0, r2
 8009692:	0019      	movs	r1, r3
 8009694:	b003      	add	sp, #12
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009698:	2700      	movs	r7, #0
 800969a:	42ae      	cmp	r6, r5
 800969c:	d202      	bcs.n	80096a4 <__b2d+0x60>
 800969e:	9d01      	ldr	r5, [sp, #4]
 80096a0:	3d08      	subs	r5, #8
 80096a2:	682f      	ldr	r7, [r5, #0]
 80096a4:	380b      	subs	r0, #11
 80096a6:	4684      	mov	ip, r0
 80096a8:	1e03      	subs	r3, r0, #0
 80096aa:	d012      	beq.n	80096d2 <__b2d+0x8e>
 80096ac:	409c      	lsls	r4, r3
 80096ae:	2020      	movs	r0, #32
 80096b0:	4321      	orrs	r1, r4
 80096b2:	003c      	movs	r4, r7
 80096b4:	1ac0      	subs	r0, r0, r3
 80096b6:	40c4      	lsrs	r4, r0
 80096b8:	4321      	orrs	r1, r4
 80096ba:	000b      	movs	r3, r1
 80096bc:	2100      	movs	r1, #0
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d901      	bls.n	80096c6 <__b2d+0x82>
 80096c2:	3d04      	subs	r5, #4
 80096c4:	6829      	ldr	r1, [r5, #0]
 80096c6:	4664      	mov	r4, ip
 80096c8:	40c1      	lsrs	r1, r0
 80096ca:	40a7      	lsls	r7, r4
 80096cc:	430f      	orrs	r7, r1
 80096ce:	003a      	movs	r2, r7
 80096d0:	e7de      	b.n	8009690 <__b2d+0x4c>
 80096d2:	4321      	orrs	r1, r4
 80096d4:	000b      	movs	r3, r1
 80096d6:	e7fa      	b.n	80096ce <__b2d+0x8a>
 80096d8:	3ff00000 	.word	0x3ff00000

080096dc <__d2b>:
 80096dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096de:	001d      	movs	r5, r3
 80096e0:	2101      	movs	r1, #1
 80096e2:	0014      	movs	r4, r2
 80096e4:	9f08      	ldr	r7, [sp, #32]
 80096e6:	f7ff fcb6 	bl	8009056 <_Balloc>
 80096ea:	032b      	lsls	r3, r5, #12
 80096ec:	006d      	lsls	r5, r5, #1
 80096ee:	0006      	movs	r6, r0
 80096f0:	0b1b      	lsrs	r3, r3, #12
 80096f2:	0d6d      	lsrs	r5, r5, #21
 80096f4:	d124      	bne.n	8009740 <__d2b+0x64>
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	d027      	beq.n	800974c <__d2b+0x70>
 80096fc:	4668      	mov	r0, sp
 80096fe:	9400      	str	r4, [sp, #0]
 8009700:	f7ff fd90 	bl	8009224 <__lo0bits>
 8009704:	9c00      	ldr	r4, [sp, #0]
 8009706:	2800      	cmp	r0, #0
 8009708:	d01e      	beq.n	8009748 <__d2b+0x6c>
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	2120      	movs	r1, #32
 800970e:	001a      	movs	r2, r3
 8009710:	1a09      	subs	r1, r1, r0
 8009712:	408a      	lsls	r2, r1
 8009714:	40c3      	lsrs	r3, r0
 8009716:	4322      	orrs	r2, r4
 8009718:	6172      	str	r2, [r6, #20]
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	9c01      	ldr	r4, [sp, #4]
 800971e:	61b4      	str	r4, [r6, #24]
 8009720:	1e63      	subs	r3, r4, #1
 8009722:	419c      	sbcs	r4, r3
 8009724:	3401      	adds	r4, #1
 8009726:	6134      	str	r4, [r6, #16]
 8009728:	2d00      	cmp	r5, #0
 800972a:	d018      	beq.n	800975e <__d2b+0x82>
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <__d2b+0x9c>)
 800972e:	18ed      	adds	r5, r5, r3
 8009730:	2335      	movs	r3, #53	; 0x35
 8009732:	182d      	adds	r5, r5, r0
 8009734:	603d      	str	r5, [r7, #0]
 8009736:	1a18      	subs	r0, r3, r0
 8009738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973a:	6018      	str	r0, [r3, #0]
 800973c:	0030      	movs	r0, r6
 800973e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009740:	2280      	movs	r2, #128	; 0x80
 8009742:	0352      	lsls	r2, r2, #13
 8009744:	4313      	orrs	r3, r2
 8009746:	e7d6      	b.n	80096f6 <__d2b+0x1a>
 8009748:	6174      	str	r4, [r6, #20]
 800974a:	e7e7      	b.n	800971c <__d2b+0x40>
 800974c:	a801      	add	r0, sp, #4
 800974e:	f7ff fd69 	bl	8009224 <__lo0bits>
 8009752:	2401      	movs	r4, #1
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	6134      	str	r4, [r6, #16]
 8009758:	6173      	str	r3, [r6, #20]
 800975a:	3020      	adds	r0, #32
 800975c:	e7e4      	b.n	8009728 <__d2b+0x4c>
 800975e:	4b07      	ldr	r3, [pc, #28]	; (800977c <__d2b+0xa0>)
 8009760:	18c0      	adds	r0, r0, r3
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <__d2b+0xa4>)
 8009764:	6038      	str	r0, [r7, #0]
 8009766:	18e3      	adds	r3, r4, r3
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	18f3      	adds	r3, r6, r3
 800976c:	6958      	ldr	r0, [r3, #20]
 800976e:	f7ff fd3f 	bl	80091f0 <__hi0bits>
 8009772:	0164      	lsls	r4, r4, #5
 8009774:	1a20      	subs	r0, r4, r0
 8009776:	e7df      	b.n	8009738 <__d2b+0x5c>
 8009778:	fffffbcd 	.word	0xfffffbcd
 800977c:	fffffbce 	.word	0xfffffbce
 8009780:	3fffffff 	.word	0x3fffffff

08009784 <__ratio>:
 8009784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009786:	b085      	sub	sp, #20
 8009788:	000f      	movs	r7, r1
 800978a:	a902      	add	r1, sp, #8
 800978c:	0006      	movs	r6, r0
 800978e:	f7ff ff59 	bl	8009644 <__b2d>
 8009792:	0004      	movs	r4, r0
 8009794:	000d      	movs	r5, r1
 8009796:	0038      	movs	r0, r7
 8009798:	a903      	add	r1, sp, #12
 800979a:	9400      	str	r4, [sp, #0]
 800979c:	9501      	str	r5, [sp, #4]
 800979e:	f7ff ff51 	bl	8009644 <__b2d>
 80097a2:	6936      	ldr	r6, [r6, #16]
 80097a4:	693f      	ldr	r7, [r7, #16]
 80097a6:	0002      	movs	r2, r0
 80097a8:	1bf7      	subs	r7, r6, r7
 80097aa:	017e      	lsls	r6, r7, #5
 80097ac:	46b4      	mov	ip, r6
 80097ae:	9f03      	ldr	r7, [sp, #12]
 80097b0:	9e02      	ldr	r6, [sp, #8]
 80097b2:	000b      	movs	r3, r1
 80097b4:	1bf6      	subs	r6, r6, r7
 80097b6:	4466      	add	r6, ip
 80097b8:	0537      	lsls	r7, r6, #20
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	dd07      	ble.n	80097ce <__ratio+0x4a>
 80097be:	1979      	adds	r1, r7, r5
 80097c0:	9101      	str	r1, [sp, #4]
 80097c2:	9800      	ldr	r0, [sp, #0]
 80097c4:	9901      	ldr	r1, [sp, #4]
 80097c6:	f7f7 f9a9 	bl	8000b1c <__aeabi_ddiv>
 80097ca:	b005      	add	sp, #20
 80097cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ce:	1bcb      	subs	r3, r1, r7
 80097d0:	e7f7      	b.n	80097c2 <__ratio+0x3e>

080097d2 <__copybits>:
 80097d2:	0013      	movs	r3, r2
 80097d4:	3901      	subs	r1, #1
 80097d6:	b510      	push	{r4, lr}
 80097d8:	1149      	asrs	r1, r1, #5
 80097da:	6912      	ldr	r2, [r2, #16]
 80097dc:	3101      	adds	r1, #1
 80097de:	0089      	lsls	r1, r1, #2
 80097e0:	3314      	adds	r3, #20
 80097e2:	0092      	lsls	r2, r2, #2
 80097e4:	1841      	adds	r1, r0, r1
 80097e6:	189a      	adds	r2, r3, r2
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d803      	bhi.n	80097f4 <__copybits+0x22>
 80097ec:	2300      	movs	r3, #0
 80097ee:	4281      	cmp	r1, r0
 80097f0:	d803      	bhi.n	80097fa <__copybits+0x28>
 80097f2:	bd10      	pop	{r4, pc}
 80097f4:	cb10      	ldmia	r3!, {r4}
 80097f6:	c010      	stmia	r0!, {r4}
 80097f8:	e7f6      	b.n	80097e8 <__copybits+0x16>
 80097fa:	c008      	stmia	r0!, {r3}
 80097fc:	e7f7      	b.n	80097ee <__copybits+0x1c>

080097fe <__any_on>:
 80097fe:	0002      	movs	r2, r0
 8009800:	6900      	ldr	r0, [r0, #16]
 8009802:	b510      	push	{r4, lr}
 8009804:	3214      	adds	r2, #20
 8009806:	114b      	asrs	r3, r1, #5
 8009808:	4298      	cmp	r0, r3
 800980a:	db12      	blt.n	8009832 <__any_on+0x34>
 800980c:	dd0b      	ble.n	8009826 <__any_on+0x28>
 800980e:	201f      	movs	r0, #31
 8009810:	4001      	ands	r1, r0
 8009812:	d008      	beq.n	8009826 <__any_on+0x28>
 8009814:	0098      	lsls	r0, r3, #2
 8009816:	5884      	ldr	r4, [r0, r2]
 8009818:	0020      	movs	r0, r4
 800981a:	40c8      	lsrs	r0, r1
 800981c:	4088      	lsls	r0, r1
 800981e:	0001      	movs	r1, r0
 8009820:	2001      	movs	r0, #1
 8009822:	428c      	cmp	r4, r1
 8009824:	d104      	bne.n	8009830 <__any_on+0x32>
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	4293      	cmp	r3, r2
 800982c:	d803      	bhi.n	8009836 <__any_on+0x38>
 800982e:	2000      	movs	r0, #0
 8009830:	bd10      	pop	{r4, pc}
 8009832:	0003      	movs	r3, r0
 8009834:	e7f7      	b.n	8009826 <__any_on+0x28>
 8009836:	3b04      	subs	r3, #4
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	2900      	cmp	r1, #0
 800983c:	d0f5      	beq.n	800982a <__any_on+0x2c>
 800983e:	2001      	movs	r0, #1
 8009840:	e7f6      	b.n	8009830 <__any_on+0x32>

08009842 <_calloc_r>:
 8009842:	434a      	muls	r2, r1
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	0011      	movs	r1, r2
 8009848:	0014      	movs	r4, r2
 800984a:	f000 f853 	bl	80098f4 <_malloc_r>
 800984e:	1e05      	subs	r5, r0, #0
 8009850:	d003      	beq.n	800985a <_calloc_r+0x18>
 8009852:	0022      	movs	r2, r4
 8009854:	2100      	movs	r1, #0
 8009856:	f7fc fcb2 	bl	80061be <memset>
 800985a:	0028      	movs	r0, r5
 800985c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009860 <_free_r>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	0005      	movs	r5, r0
 8009864:	2900      	cmp	r1, #0
 8009866:	d010      	beq.n	800988a <_free_r+0x2a>
 8009868:	1f0c      	subs	r4, r1, #4
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da00      	bge.n	8009872 <_free_r+0x12>
 8009870:	18e4      	adds	r4, r4, r3
 8009872:	0028      	movs	r0, r5
 8009874:	f000 fa3e 	bl	8009cf4 <__malloc_lock>
 8009878:	4a1d      	ldr	r2, [pc, #116]	; (80098f0 <_free_r+0x90>)
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d105      	bne.n	800988c <_free_r+0x2c>
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6014      	str	r4, [r2, #0]
 8009884:	0028      	movs	r0, r5
 8009886:	f000 fa36 	bl	8009cf6 <__malloc_unlock>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	42a3      	cmp	r3, r4
 800988e:	d909      	bls.n	80098a4 <_free_r+0x44>
 8009890:	6821      	ldr	r1, [r4, #0]
 8009892:	1860      	adds	r0, r4, r1
 8009894:	4283      	cmp	r3, r0
 8009896:	d1f3      	bne.n	8009880 <_free_r+0x20>
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	1841      	adds	r1, r0, r1
 800989e:	6021      	str	r1, [r4, #0]
 80098a0:	e7ee      	b.n	8009880 <_free_r+0x20>
 80098a2:	0013      	movs	r3, r2
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	d001      	beq.n	80098ae <_free_r+0x4e>
 80098aa:	42a2      	cmp	r2, r4
 80098ac:	d9f9      	bls.n	80098a2 <_free_r+0x42>
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	1858      	adds	r0, r3, r1
 80098b2:	42a0      	cmp	r0, r4
 80098b4:	d10b      	bne.n	80098ce <_free_r+0x6e>
 80098b6:	6820      	ldr	r0, [r4, #0]
 80098b8:	1809      	adds	r1, r1, r0
 80098ba:	1858      	adds	r0, r3, r1
 80098bc:	6019      	str	r1, [r3, #0]
 80098be:	4282      	cmp	r2, r0
 80098c0:	d1e0      	bne.n	8009884 <_free_r+0x24>
 80098c2:	6810      	ldr	r0, [r2, #0]
 80098c4:	6852      	ldr	r2, [r2, #4]
 80098c6:	1841      	adds	r1, r0, r1
 80098c8:	6019      	str	r1, [r3, #0]
 80098ca:	605a      	str	r2, [r3, #4]
 80098cc:	e7da      	b.n	8009884 <_free_r+0x24>
 80098ce:	42a0      	cmp	r0, r4
 80098d0:	d902      	bls.n	80098d8 <_free_r+0x78>
 80098d2:	230c      	movs	r3, #12
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	e7d5      	b.n	8009884 <_free_r+0x24>
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	1860      	adds	r0, r4, r1
 80098dc:	4282      	cmp	r2, r0
 80098de:	d103      	bne.n	80098e8 <_free_r+0x88>
 80098e0:	6810      	ldr	r0, [r2, #0]
 80098e2:	6852      	ldr	r2, [r2, #4]
 80098e4:	1841      	adds	r1, r0, r1
 80098e6:	6021      	str	r1, [r4, #0]
 80098e8:	6062      	str	r2, [r4, #4]
 80098ea:	605c      	str	r4, [r3, #4]
 80098ec:	e7ca      	b.n	8009884 <_free_r+0x24>
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	200007a0 	.word	0x200007a0

080098f4 <_malloc_r>:
 80098f4:	2303      	movs	r3, #3
 80098f6:	b570      	push	{r4, r5, r6, lr}
 80098f8:	1ccd      	adds	r5, r1, #3
 80098fa:	439d      	bics	r5, r3
 80098fc:	3508      	adds	r5, #8
 80098fe:	0006      	movs	r6, r0
 8009900:	2d0c      	cmp	r5, #12
 8009902:	d21e      	bcs.n	8009942 <_malloc_r+0x4e>
 8009904:	250c      	movs	r5, #12
 8009906:	42a9      	cmp	r1, r5
 8009908:	d81d      	bhi.n	8009946 <_malloc_r+0x52>
 800990a:	0030      	movs	r0, r6
 800990c:	f000 f9f2 	bl	8009cf4 <__malloc_lock>
 8009910:	4a25      	ldr	r2, [pc, #148]	; (80099a8 <_malloc_r+0xb4>)
 8009912:	6814      	ldr	r4, [r2, #0]
 8009914:	0021      	movs	r1, r4
 8009916:	2900      	cmp	r1, #0
 8009918:	d119      	bne.n	800994e <_malloc_r+0x5a>
 800991a:	4c24      	ldr	r4, [pc, #144]	; (80099ac <_malloc_r+0xb8>)
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <_malloc_r+0x36>
 8009922:	0030      	movs	r0, r6
 8009924:	f000 f9a4 	bl	8009c70 <_sbrk_r>
 8009928:	6020      	str	r0, [r4, #0]
 800992a:	0029      	movs	r1, r5
 800992c:	0030      	movs	r0, r6
 800992e:	f000 f99f 	bl	8009c70 <_sbrk_r>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	d12b      	bne.n	800998e <_malloc_r+0x9a>
 8009936:	230c      	movs	r3, #12
 8009938:	0030      	movs	r0, r6
 800993a:	6033      	str	r3, [r6, #0]
 800993c:	f000 f9db 	bl	8009cf6 <__malloc_unlock>
 8009940:	e003      	b.n	800994a <_malloc_r+0x56>
 8009942:	2d00      	cmp	r5, #0
 8009944:	dadf      	bge.n	8009906 <_malloc_r+0x12>
 8009946:	230c      	movs	r3, #12
 8009948:	6033      	str	r3, [r6, #0]
 800994a:	2000      	movs	r0, #0
 800994c:	bd70      	pop	{r4, r5, r6, pc}
 800994e:	680b      	ldr	r3, [r1, #0]
 8009950:	1b5b      	subs	r3, r3, r5
 8009952:	d419      	bmi.n	8009988 <_malloc_r+0x94>
 8009954:	2b0b      	cmp	r3, #11
 8009956:	d903      	bls.n	8009960 <_malloc_r+0x6c>
 8009958:	600b      	str	r3, [r1, #0]
 800995a:	18cc      	adds	r4, r1, r3
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	e003      	b.n	8009968 <_malloc_r+0x74>
 8009960:	684b      	ldr	r3, [r1, #4]
 8009962:	428c      	cmp	r4, r1
 8009964:	d10d      	bne.n	8009982 <_malloc_r+0x8e>
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	0030      	movs	r0, r6
 800996a:	f000 f9c4 	bl	8009cf6 <__malloc_unlock>
 800996e:	0020      	movs	r0, r4
 8009970:	2207      	movs	r2, #7
 8009972:	300b      	adds	r0, #11
 8009974:	1d23      	adds	r3, r4, #4
 8009976:	4390      	bics	r0, r2
 8009978:	1ac3      	subs	r3, r0, r3
 800997a:	d0e7      	beq.n	800994c <_malloc_r+0x58>
 800997c:	425a      	negs	r2, r3
 800997e:	50e2      	str	r2, [r4, r3]
 8009980:	e7e4      	b.n	800994c <_malloc_r+0x58>
 8009982:	6063      	str	r3, [r4, #4]
 8009984:	000c      	movs	r4, r1
 8009986:	e7ef      	b.n	8009968 <_malloc_r+0x74>
 8009988:	000c      	movs	r4, r1
 800998a:	6849      	ldr	r1, [r1, #4]
 800998c:	e7c3      	b.n	8009916 <_malloc_r+0x22>
 800998e:	2303      	movs	r3, #3
 8009990:	1cc4      	adds	r4, r0, #3
 8009992:	439c      	bics	r4, r3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d0e1      	beq.n	800995c <_malloc_r+0x68>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	0030      	movs	r0, r6
 800999c:	f000 f968 	bl	8009c70 <_sbrk_r>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d1db      	bne.n	800995c <_malloc_r+0x68>
 80099a4:	e7c7      	b.n	8009936 <_malloc_r+0x42>
 80099a6:	46c0      	nop			; (mov r8, r8)
 80099a8:	200007a0 	.word	0x200007a0
 80099ac:	200007a4 	.word	0x200007a4

080099b0 <__ssputs_r>:
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	688e      	ldr	r6, [r1, #8]
 80099b4:	b085      	sub	sp, #20
 80099b6:	0007      	movs	r7, r0
 80099b8:	000c      	movs	r4, r1
 80099ba:	9203      	str	r2, [sp, #12]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	429e      	cmp	r6, r3
 80099c0:	d83c      	bhi.n	8009a3c <__ssputs_r+0x8c>
 80099c2:	2390      	movs	r3, #144	; 0x90
 80099c4:	898a      	ldrh	r2, [r1, #12]
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	421a      	tst	r2, r3
 80099ca:	d034      	beq.n	8009a36 <__ssputs_r+0x86>
 80099cc:	2503      	movs	r5, #3
 80099ce:	6909      	ldr	r1, [r1, #16]
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	1a5b      	subs	r3, r3, r1
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	6963      	ldr	r3, [r4, #20]
 80099d8:	9802      	ldr	r0, [sp, #8]
 80099da:	435d      	muls	r5, r3
 80099dc:	0feb      	lsrs	r3, r5, #31
 80099de:	195d      	adds	r5, r3, r5
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	106d      	asrs	r5, r5, #1
 80099e4:	3301      	adds	r3, #1
 80099e6:	181b      	adds	r3, r3, r0
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	d900      	bls.n	80099ee <__ssputs_r+0x3e>
 80099ec:	001d      	movs	r5, r3
 80099ee:	0553      	lsls	r3, r2, #21
 80099f0:	d532      	bpl.n	8009a58 <__ssputs_r+0xa8>
 80099f2:	0029      	movs	r1, r5
 80099f4:	0038      	movs	r0, r7
 80099f6:	f7ff ff7d 	bl	80098f4 <_malloc_r>
 80099fa:	1e06      	subs	r6, r0, #0
 80099fc:	d109      	bne.n	8009a12 <__ssputs_r+0x62>
 80099fe:	230c      	movs	r3, #12
 8009a00:	603b      	str	r3, [r7, #0]
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	2001      	movs	r0, #1
 8009a06:	89a2      	ldrh	r2, [r4, #12]
 8009a08:	4240      	negs	r0, r0
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	b005      	add	sp, #20
 8009a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a12:	9a02      	ldr	r2, [sp, #8]
 8009a14:	6921      	ldr	r1, [r4, #16]
 8009a16:	f7fc fbc9 	bl	80061ac <memcpy>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	4a14      	ldr	r2, [pc, #80]	; (8009a70 <__ssputs_r+0xc0>)
 8009a1e:	401a      	ands	r2, r3
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	4313      	orrs	r3, r2
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	6126      	str	r6, [r4, #16]
 8009a2a:	18f6      	adds	r6, r6, r3
 8009a2c:	6026      	str	r6, [r4, #0]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	9e01      	ldr	r6, [sp, #4]
 8009a32:	1aed      	subs	r5, r5, r3
 8009a34:	60a5      	str	r5, [r4, #8]
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	429e      	cmp	r6, r3
 8009a3a:	d900      	bls.n	8009a3e <__ssputs_r+0x8e>
 8009a3c:	9e01      	ldr	r6, [sp, #4]
 8009a3e:	0032      	movs	r2, r6
 8009a40:	9903      	ldr	r1, [sp, #12]
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	f000 f943 	bl	8009cce <memmove>
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	1b9b      	subs	r3, r3, r6
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	199e      	adds	r6, r3, r6
 8009a54:	6026      	str	r6, [r4, #0]
 8009a56:	e7da      	b.n	8009a0e <__ssputs_r+0x5e>
 8009a58:	002a      	movs	r2, r5
 8009a5a:	0038      	movs	r0, r7
 8009a5c:	f000 f94c 	bl	8009cf8 <_realloc_r>
 8009a60:	1e06      	subs	r6, r0, #0
 8009a62:	d1e0      	bne.n	8009a26 <__ssputs_r+0x76>
 8009a64:	6921      	ldr	r1, [r4, #16]
 8009a66:	0038      	movs	r0, r7
 8009a68:	f7ff fefa 	bl	8009860 <_free_r>
 8009a6c:	e7c7      	b.n	80099fe <__ssputs_r+0x4e>
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	fffffb7f 	.word	0xfffffb7f

08009a74 <_svfiprintf_r>:
 8009a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a76:	b0a1      	sub	sp, #132	; 0x84
 8009a78:	9003      	str	r0, [sp, #12]
 8009a7a:	001d      	movs	r5, r3
 8009a7c:	898b      	ldrh	r3, [r1, #12]
 8009a7e:	000f      	movs	r7, r1
 8009a80:	0016      	movs	r6, r2
 8009a82:	061b      	lsls	r3, r3, #24
 8009a84:	d511      	bpl.n	8009aaa <_svfiprintf_r+0x36>
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10e      	bne.n	8009aaa <_svfiprintf_r+0x36>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff31 	bl	80098f4 <_malloc_r>
 8009a92:	6038      	str	r0, [r7, #0]
 8009a94:	6138      	str	r0, [r7, #16]
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d105      	bne.n	8009aa6 <_svfiprintf_r+0x32>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	9a03      	ldr	r2, [sp, #12]
 8009a9e:	3801      	subs	r0, #1
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	b021      	add	sp, #132	; 0x84
 8009aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa6:	2340      	movs	r3, #64	; 0x40
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	ac08      	add	r4, sp, #32
 8009aae:	6163      	str	r3, [r4, #20]
 8009ab0:	3320      	adds	r3, #32
 8009ab2:	7663      	strb	r3, [r4, #25]
 8009ab4:	3310      	adds	r3, #16
 8009ab6:	76a3      	strb	r3, [r4, #26]
 8009ab8:	9507      	str	r5, [sp, #28]
 8009aba:	0035      	movs	r5, r6
 8009abc:	782b      	ldrb	r3, [r5, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <_svfiprintf_r+0x52>
 8009ac2:	2b25      	cmp	r3, #37	; 0x25
 8009ac4:	d146      	bne.n	8009b54 <_svfiprintf_r+0xe0>
 8009ac6:	1bab      	subs	r3, r5, r6
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	d00c      	beq.n	8009ae6 <_svfiprintf_r+0x72>
 8009acc:	0032      	movs	r2, r6
 8009ace:	0039      	movs	r1, r7
 8009ad0:	9803      	ldr	r0, [sp, #12]
 8009ad2:	f7ff ff6d 	bl	80099b0 <__ssputs_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d100      	bne.n	8009adc <_svfiprintf_r+0x68>
 8009ada:	e0ae      	b.n	8009c3a <_svfiprintf_r+0x1c6>
 8009adc:	6962      	ldr	r2, [r4, #20]
 8009ade:	9b05      	ldr	r3, [sp, #20]
 8009ae0:	4694      	mov	ip, r2
 8009ae2:	4463      	add	r3, ip
 8009ae4:	6163      	str	r3, [r4, #20]
 8009ae6:	782b      	ldrb	r3, [r5, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d100      	bne.n	8009aee <_svfiprintf_r+0x7a>
 8009aec:	e0a5      	b.n	8009c3a <_svfiprintf_r+0x1c6>
 8009aee:	2201      	movs	r2, #1
 8009af0:	2300      	movs	r3, #0
 8009af2:	4252      	negs	r2, r2
 8009af4:	6062      	str	r2, [r4, #4]
 8009af6:	a904      	add	r1, sp, #16
 8009af8:	3254      	adds	r2, #84	; 0x54
 8009afa:	1852      	adds	r2, r2, r1
 8009afc:	1c6e      	adds	r6, r5, #1
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	60e3      	str	r3, [r4, #12]
 8009b02:	60a3      	str	r3, [r4, #8]
 8009b04:	7013      	strb	r3, [r2, #0]
 8009b06:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b08:	7831      	ldrb	r1, [r6, #0]
 8009b0a:	2205      	movs	r2, #5
 8009b0c:	4853      	ldr	r0, [pc, #332]	; (8009c5c <_svfiprintf_r+0x1e8>)
 8009b0e:	f7ff fa97 	bl	8009040 <memchr>
 8009b12:	1c75      	adds	r5, r6, #1
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d11f      	bne.n	8009b58 <_svfiprintf_r+0xe4>
 8009b18:	6822      	ldr	r2, [r4, #0]
 8009b1a:	06d3      	lsls	r3, r2, #27
 8009b1c:	d504      	bpl.n	8009b28 <_svfiprintf_r+0xb4>
 8009b1e:	2353      	movs	r3, #83	; 0x53
 8009b20:	a904      	add	r1, sp, #16
 8009b22:	185b      	adds	r3, r3, r1
 8009b24:	2120      	movs	r1, #32
 8009b26:	7019      	strb	r1, [r3, #0]
 8009b28:	0713      	lsls	r3, r2, #28
 8009b2a:	d504      	bpl.n	8009b36 <_svfiprintf_r+0xc2>
 8009b2c:	2353      	movs	r3, #83	; 0x53
 8009b2e:	a904      	add	r1, sp, #16
 8009b30:	185b      	adds	r3, r3, r1
 8009b32:	212b      	movs	r1, #43	; 0x2b
 8009b34:	7019      	strb	r1, [r3, #0]
 8009b36:	7833      	ldrb	r3, [r6, #0]
 8009b38:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3a:	d016      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3c:	0035      	movs	r5, r6
 8009b3e:	2100      	movs	r1, #0
 8009b40:	200a      	movs	r0, #10
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	782a      	ldrb	r2, [r5, #0]
 8009b46:	1c6e      	adds	r6, r5, #1
 8009b48:	3a30      	subs	r2, #48	; 0x30
 8009b4a:	2a09      	cmp	r2, #9
 8009b4c:	d94e      	bls.n	8009bec <_svfiprintf_r+0x178>
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d018      	beq.n	8009b84 <_svfiprintf_r+0x110>
 8009b52:	e010      	b.n	8009b76 <_svfiprintf_r+0x102>
 8009b54:	3501      	adds	r5, #1
 8009b56:	e7b1      	b.n	8009abc <_svfiprintf_r+0x48>
 8009b58:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <_svfiprintf_r+0x1e8>)
 8009b5a:	6822      	ldr	r2, [r4, #0]
 8009b5c:	1ac0      	subs	r0, r0, r3
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4083      	lsls	r3, r0
 8009b62:	4313      	orrs	r3, r2
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	002e      	movs	r6, r5
 8009b68:	e7ce      	b.n	8009b08 <_svfiprintf_r+0x94>
 8009b6a:	9b07      	ldr	r3, [sp, #28]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9107      	str	r1, [sp, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	db01      	blt.n	8009b7a <_svfiprintf_r+0x106>
 8009b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b78:	e004      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b7a:	425b      	negs	r3, r3
 8009b7c:	60e3      	str	r3, [r4, #12]
 8009b7e:	2302      	movs	r3, #2
 8009b80:	4313      	orrs	r3, r2
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	782b      	ldrb	r3, [r5, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10a      	bne.n	8009ba0 <_svfiprintf_r+0x12c>
 8009b8a:	786b      	ldrb	r3, [r5, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b07      	ldr	r3, [sp, #28]
 8009b92:	3502      	adds	r5, #2
 8009b94:	1d1a      	adds	r2, r3, #4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	9207      	str	r2, [sp, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	db2b      	blt.n	8009bf6 <_svfiprintf_r+0x182>
 8009b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba0:	4e2f      	ldr	r6, [pc, #188]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009ba2:	7829      	ldrb	r1, [r5, #0]
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	0030      	movs	r0, r6
 8009ba8:	f7ff fa4a 	bl	8009040 <memchr>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d006      	beq.n	8009bbe <_svfiprintf_r+0x14a>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	1b80      	subs	r0, r0, r6
 8009bb4:	4083      	lsls	r3, r0
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	3501      	adds	r5, #1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	7829      	ldrb	r1, [r5, #0]
 8009bc0:	2206      	movs	r2, #6
 8009bc2:	4828      	ldr	r0, [pc, #160]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bc4:	1c6e      	adds	r6, r5, #1
 8009bc6:	7621      	strb	r1, [r4, #24]
 8009bc8:	f7ff fa3a 	bl	8009040 <memchr>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d03c      	beq.n	8009c4a <_svfiprintf_r+0x1d6>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d125      	bne.n	8009c22 <_svfiprintf_r+0x1ae>
 8009bd6:	2207      	movs	r2, #7
 8009bd8:	9b07      	ldr	r3, [sp, #28]
 8009bda:	3307      	adds	r3, #7
 8009bdc:	4393      	bics	r3, r2
 8009bde:	3308      	adds	r3, #8
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	6963      	ldr	r3, [r4, #20]
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	6163      	str	r3, [r4, #20]
 8009bea:	e766      	b.n	8009aba <_svfiprintf_r+0x46>
 8009bec:	4343      	muls	r3, r0
 8009bee:	2101      	movs	r1, #1
 8009bf0:	189b      	adds	r3, r3, r2
 8009bf2:	0035      	movs	r5, r6
 8009bf4:	e7a6      	b.n	8009b44 <_svfiprintf_r+0xd0>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	425b      	negs	r3, r3
 8009bfa:	e7d0      	b.n	8009b9e <_svfiprintf_r+0x12a>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	200a      	movs	r0, #10
 8009c00:	001a      	movs	r2, r3
 8009c02:	3501      	adds	r5, #1
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	7829      	ldrb	r1, [r5, #0]
 8009c08:	1c6e      	adds	r6, r5, #1
 8009c0a:	3930      	subs	r1, #48	; 0x30
 8009c0c:	2909      	cmp	r1, #9
 8009c0e:	d903      	bls.n	8009c18 <_svfiprintf_r+0x1a4>
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0c5      	beq.n	8009ba0 <_svfiprintf_r+0x12c>
 8009c14:	9209      	str	r2, [sp, #36]	; 0x24
 8009c16:	e7c3      	b.n	8009ba0 <_svfiprintf_r+0x12c>
 8009c18:	4342      	muls	r2, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	1852      	adds	r2, r2, r1
 8009c1e:	0035      	movs	r5, r6
 8009c20:	e7f1      	b.n	8009c06 <_svfiprintf_r+0x192>
 8009c22:	ab07      	add	r3, sp, #28
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	003a      	movs	r2, r7
 8009c28:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2a:	0021      	movs	r1, r4
 8009c2c:	9803      	ldr	r0, [sp, #12]
 8009c2e:	f7fc fb6b 	bl	8006308 <_printf_float>
 8009c32:	9004      	str	r0, [sp, #16]
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	3301      	adds	r3, #1
 8009c38:	d1d3      	bne.n	8009be2 <_svfiprintf_r+0x16e>
 8009c3a:	89bb      	ldrh	r3, [r7, #12]
 8009c3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	d400      	bmi.n	8009c44 <_svfiprintf_r+0x1d0>
 8009c42:	e72e      	b.n	8009aa2 <_svfiprintf_r+0x2e>
 8009c44:	2001      	movs	r0, #1
 8009c46:	4240      	negs	r0, r0
 8009c48:	e72b      	b.n	8009aa2 <_svfiprintf_r+0x2e>
 8009c4a:	ab07      	add	r3, sp, #28
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	003a      	movs	r2, r7
 8009c50:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c52:	0021      	movs	r1, r4
 8009c54:	9803      	ldr	r0, [sp, #12]
 8009c56:	f7fc fe11 	bl	800687c <_printf_i>
 8009c5a:	e7ea      	b.n	8009c32 <_svfiprintf_r+0x1be>
 8009c5c:	0800a0bc 	.word	0x0800a0bc
 8009c60:	0800a0c2 	.word	0x0800a0c2
 8009c64:	0800a0c6 	.word	0x0800a0c6
 8009c68:	08006309 	.word	0x08006309
 8009c6c:	080099b1 	.word	0x080099b1

08009c70 <_sbrk_r>:
 8009c70:	2300      	movs	r3, #0
 8009c72:	b570      	push	{r4, r5, r6, lr}
 8009c74:	4c06      	ldr	r4, [pc, #24]	; (8009c90 <_sbrk_r+0x20>)
 8009c76:	0005      	movs	r5, r0
 8009c78:	0008      	movs	r0, r1
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	f7f8 fe70 	bl	8002960 <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d103      	bne.n	8009c8c <_sbrk_r+0x1c>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d000      	beq.n	8009c8c <_sbrk_r+0x1c>
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	200013e0 	.word	0x200013e0

08009c94 <strncmp>:
 8009c94:	2300      	movs	r3, #0
 8009c96:	b530      	push	{r4, r5, lr}
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d00a      	beq.n	8009cb2 <strncmp+0x1e>
 8009c9c:	3a01      	subs	r2, #1
 8009c9e:	5cc4      	ldrb	r4, [r0, r3]
 8009ca0:	5ccd      	ldrb	r5, [r1, r3]
 8009ca2:	42ac      	cmp	r4, r5
 8009ca4:	d104      	bne.n	8009cb0 <strncmp+0x1c>
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d002      	beq.n	8009cb0 <strncmp+0x1c>
 8009caa:	3301      	adds	r3, #1
 8009cac:	2c00      	cmp	r4, #0
 8009cae:	d1f6      	bne.n	8009c9e <strncmp+0xa>
 8009cb0:	1b63      	subs	r3, r4, r5
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	bd30      	pop	{r4, r5, pc}

08009cb6 <__ascii_wctomb>:
 8009cb6:	1e0b      	subs	r3, r1, #0
 8009cb8:	d004      	beq.n	8009cc4 <__ascii_wctomb+0xe>
 8009cba:	2aff      	cmp	r2, #255	; 0xff
 8009cbc:	d904      	bls.n	8009cc8 <__ascii_wctomb+0x12>
 8009cbe:	238a      	movs	r3, #138	; 0x8a
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	3b8b      	subs	r3, #139	; 0x8b
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	4770      	bx	lr
 8009cc8:	700a      	strb	r2, [r1, #0]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e7fa      	b.n	8009cc4 <__ascii_wctomb+0xe>

08009cce <memmove>:
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4288      	cmp	r0, r1
 8009cd2:	d902      	bls.n	8009cda <memmove+0xc>
 8009cd4:	188b      	adds	r3, r1, r2
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	d303      	bcc.n	8009ce2 <memmove+0x14>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e007      	b.n	8009cee <memmove+0x20>
 8009cde:	5c8b      	ldrb	r3, [r1, r2]
 8009ce0:	5483      	strb	r3, [r0, r2]
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	d2fb      	bcs.n	8009cde <memmove+0x10>
 8009ce6:	bd10      	pop	{r4, pc}
 8009ce8:	5ccc      	ldrb	r4, [r1, r3]
 8009cea:	54c4      	strb	r4, [r0, r3]
 8009cec:	3301      	adds	r3, #1
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d1fa      	bne.n	8009ce8 <memmove+0x1a>
 8009cf2:	e7f8      	b.n	8009ce6 <memmove+0x18>

08009cf4 <__malloc_lock>:
 8009cf4:	4770      	bx	lr

08009cf6 <__malloc_unlock>:
 8009cf6:	4770      	bx	lr

08009cf8 <_realloc_r>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	0007      	movs	r7, r0
 8009cfc:	000d      	movs	r5, r1
 8009cfe:	0016      	movs	r6, r2
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d105      	bne.n	8009d10 <_realloc_r+0x18>
 8009d04:	0011      	movs	r1, r2
 8009d06:	f7ff fdf5 	bl	80098f4 <_malloc_r>
 8009d0a:	0004      	movs	r4, r0
 8009d0c:	0020      	movs	r0, r4
 8009d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	d103      	bne.n	8009d1c <_realloc_r+0x24>
 8009d14:	f7ff fda4 	bl	8009860 <_free_r>
 8009d18:	0034      	movs	r4, r6
 8009d1a:	e7f7      	b.n	8009d0c <_realloc_r+0x14>
 8009d1c:	f000 f812 	bl	8009d44 <_malloc_usable_size_r>
 8009d20:	002c      	movs	r4, r5
 8009d22:	42b0      	cmp	r0, r6
 8009d24:	d2f2      	bcs.n	8009d0c <_realloc_r+0x14>
 8009d26:	0031      	movs	r1, r6
 8009d28:	0038      	movs	r0, r7
 8009d2a:	f7ff fde3 	bl	80098f4 <_malloc_r>
 8009d2e:	1e04      	subs	r4, r0, #0
 8009d30:	d0ec      	beq.n	8009d0c <_realloc_r+0x14>
 8009d32:	0029      	movs	r1, r5
 8009d34:	0032      	movs	r2, r6
 8009d36:	f7fc fa39 	bl	80061ac <memcpy>
 8009d3a:	0029      	movs	r1, r5
 8009d3c:	0038      	movs	r0, r7
 8009d3e:	f7ff fd8f 	bl	8009860 <_free_r>
 8009d42:	e7e3      	b.n	8009d0c <_realloc_r+0x14>

08009d44 <_malloc_usable_size_r>:
 8009d44:	1f0b      	subs	r3, r1, #4
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	1f18      	subs	r0, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da01      	bge.n	8009d52 <_malloc_usable_size_r+0xe>
 8009d4e:	580b      	ldr	r3, [r1, r0]
 8009d50:	18c0      	adds	r0, r0, r3
 8009d52:	4770      	bx	lr

08009d54 <_init>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr

08009d60 <_fini>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr
